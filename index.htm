<?php
	include '../base/lc_header.php';
	include '../base/lc_util.php';
?>

<!--------------------------- Body Begin ---------------------------------------->

<div class="Section1">

<br>
<h1>◈Introduction to Shader Programming◈</h1>

<p class=MsoNormal><span lang=EN-US style='font-size:16.0pt'>1 </span><span
style='font-size:16.0pt'>쉐이더 개요</span></p>

<p class=MsoNormal><span lang=EN-US>Shader(</span>쉐이더<span lang=EN-US>) </span>프로그래밍은
<span lang=EN-US>GPU(Graphic Processing Unit)</span>에 대한 <span lang=EN-US>3D </span>장면
처리를 고정 기능 파이프라인을 이용하지 않고 <span lang=EN-US>Assembly </span>언어와 같은 저수준 언어 또는<span
lang=EN-US> C</span>언어와 같은 고수준 언어<span lang=EN-US>(HLSL: High Level Shading
Language)</span>로 작성된 프로그램이라 할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>비디오 제어기<span lang=EN-US>(</span>디스플레이 제어기<span lang=EN-US>)</span>는<span
lang=EN-US> CPU</span>에서 처리한 픽셀 데이터를 화면에 출력하는 단순한 역할에서 메모리의 가격이 낮아지고 컴퓨터의 하드웨어 성능이
발전하면서 화면에 출력할 픽셀의 데이터 일부를<span lang=EN-US> CPU </span>대신 처리하게 되어 단순 기능의 비디오 제어기
대신 디스플레이 프로세서<span lang=EN-US>(Display Processer)</span>로 발전하게 되었습니다<span
lang=EN-US>. </span>이 디스플레이 프로세서가 라이팅<span lang=EN-US>, </span>정점 변환<span
lang=EN-US>, </span>픽셀 샘플링 등을<span lang=EN-US> CPU </span>대신 처리하게 되었는데 이것을<span
lang=EN-US> CPU</span>와 대응되는 개념으로 그래픽 출력을 전담하는 장치를<span lang=EN-US> GPU(Graphic
Processing Unit)</span>라고 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>처음에 <span lang=EN-US>GPU</span>는 기술적인 한계와 비용에 의해서 그래픽에 대한 모든
처리 과정이 고정<span lang=EN-US>(Fixed) </span>되어 있었습니다<span lang=EN-US>. </span>이것을 고정
기능 파이프라인<span lang=EN-US>(Fixed Function Pipeline)</span>으로 부릅니다<span
lang=EN-US>. GPU</span>도 발전하면서 고정 기능 파이프라인의 일부를 사용자가 프로그램을 작성할 수 있도록 구성되게 되었는데 이것을
프로그램 가능한 파이프라인<span lang=EN-US>(Programmable Pipeline)</span>으로 부르게 되었으며 쉐이더는<span
lang=EN-US> GPU</span>가 제공하는 <span lang=EN-US>Programmable Pipeline</span>의 정점과<span
lang=EN-US> Pixel</span>의 처리를 사용자의 프로그램으로 처리하는 것입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>C/C++ </span>같은 고급 언어는<span lang=EN-US>
inline Assembly</span>를 이용해서 저급 언어도 일부 지원하고 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#include </span><span lang=EN-US style='color:fuchsia'>&lt;stdio.h&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>char</span><span lang=EN-US>*&nbsp;&nbsp; s1 = </span><span
lang=EN-US style='color:fuchsia'>&quot;Hello&quot;</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>char</span><span lang=EN-US>*&nbsp;&nbsp; s2 = </span><span
lang=EN-US style='color:fuchsia'>&quot;World&quot;</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>char</span><span lang=PT-BR>*&nbsp;&nbsp; f&nbsp; = </span><span
lang=PT-BR style='color:fuchsia'>&quot;%s %s\n&quot;</span><span lang=PT-BR>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>_asm </span><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov
eax, s2;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; push
eax;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov
ebx, s1;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; push
ebx;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mov
ecx, f;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; push
ecx;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; call
printf;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>만약 여러분이 <span lang=EN-US>Microsoft</span>의<span lang=EN-US>
DirectX</span>의<span lang=EN-US> Shader</span>를 사용하면 <span lang=EN-US>C</span>언어와
유사한 문법으로 쉐이더 프로그램을 쉽게 작성할 수 있습니다<span lang=EN-US>. </span>또한<span lang=EN-US>
DirectX</span>의 쉐이더는 고급 언어뿐만 아니라 어셈블리어 형태의 저급 언어 문법이 지원이 되어 동시에 활용할 수도 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>우리가<span lang=EN-US> C/C++ </span>등으로 작성하는 프로그램은 실제로<span
lang=EN-US> CPU</span>가 처리하는 명령어들입니다<span lang=EN-US>. </span>그런데 우리는<span
lang=EN-US> CPU</span>를 완벽하게 이해하지 않고도 프로그램을 작성할 수 있습니다<span lang=EN-US>. </span>이것은
컴파일러라는 도구에 의해서 사람과 가까운 형태의 언어를<span lang=EN-US> CPU</span>가 처리할 수 있는 기계 코드로 바꾸어
주기 때문입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>GPU</span>도 제조하는 회사마다 고유의 명령어들이 있을 수 있어서 같은
계열이 아니면 다른 문법 또는 다른 명령어로 프로그램을 작성해야 합니다<span lang=EN-US>. </span>그런데<span
lang=EN-US> DirectX Shader</span>를 지원하는 그래픽 카드에 대해서는 여러분이 쉐이더 프로그램을 작성할 때 그래픽 카드의
특성과 세부적인 내용을 생각하지 않고 동일한 문법으로<span lang=EN-US> GPU</span>를 프로그램 할 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>고정 기능 파이프라인을 가지고 게임 프로그램을 만들 때 발생하는 문제들은 단순히 값을 바꾸어서 해결되는 경우도
있습니다<span lang=EN-US>. </span>하지만 쉐이더는 이렇게 단순히 값을 바꾸는 반복 작업으로 문제 해결이 잘 안됩니다<span
lang=EN-US>. </span>이것은 쉐이더는<span lang=EN-US> GPU</span>의 처리 과정을 직접 작성하는 것이라서 각
단계의 처리 절차를 알고 있지 않으면 문제의 원인과 해결점을 찾을 수 없기 때문입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>여러분이 능숙하게 쉐이더를 사용할 수 있는 능력을 키우는 가장 확실한 방법은 먼저 <span
lang=EN-US>GPU</span>의 처리 과정을 분명하게 이해 하는 것입니다<span lang=EN-US>. GPU</span>의 처리 과정만
이해해도 여러분은 올바른 쉐이더 프로그램을 작성할 수 있을 뿐만 아니라 다른 사람이 작성한 것도 쉽게 활용할 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>또한 선형 대수<span lang=EN-US>(Linear Algebra) </span>정도의 수학적 지식이
있어야 합니다<span lang=EN-US>. DirectX Shader</span>에서 제공 되는 함수들은 거의 기본적인 함수들 밖에 없습니다<span
lang=EN-US>. </span>여러분은 이 기본적으로 제공되는 함수들을 조합해서 정점의 변환<span lang=EN-US>, </span>조명
효과<span lang=EN-US>, </span>픽셀 처리 등을 작성해야 합니다<span lang=EN-US>. </span>예를 들어 조명
효과의 퐁 반사는 쉐이더로 작성한다면 불과 몇 줄도 안되지만 여러분이 벡터의 내적과<span lang=EN-US> power() </span>함수를
알지 못하면 그림의 떡일 수 밖에 없습니다<span lang=EN-US>. </span>따라서 수학적인 능력이 부족하다 느끼면 틈틈이 게임에 관련된
수학을 찾아보고 연습하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>GPU</span>의 처리 과정을 이해하는 여러 방법 중에서 고정 기능 파이프라인에서
작성한 것을 쉐이더로 프로그램 가능한 파이프라인에 맞게 바꾸어 보는 것이 가장 쉽고 빠릅니다<span lang=EN-US>. </span>고정
기능 파이프라인의 처리 과정을 간단히 복습하면 <span lang=EN-US>3D </span>장면을 연출하기 위해 그래픽 파이프라인에 입력된
정점 데이터는 최초로 정점 처리<span lang=EN-US>(Vertex Processing)</span>을 진행 합니다<span
lang=EN-US>. </span>정점 처리 과정은 정점의 월드변환 → 정점 블렌딩 → 카메라 공간으로 뷰 변환 → 포그 결합 → 조명<span
lang=EN-US> &amp; </span>재질 결합 → 정규 변환<span lang=EN-US>(</span>장치 독립의 정규좌표 변환<span
lang=EN-US>) </span>→ 뷰 포트<span lang=EN-US>(View port) </span>변환 → 래스터라이징<span
lang=EN-US>(Rasterizing) </span>변환 입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>래스터라이징을 거치면 정점의 데이터는 픽셀로 바뀌게 됩니다<span lang=EN-US>. </span>이러한
데이터는 또다시 픽셀 처리<span lang=EN-US>(Pixel Processing)</span>을 거치며 픽셀 처리는 샘플링<span
lang=EN-US>(Sampling) </span>→<span lang=EN-US> Multi texturing </span>→<span
lang=EN-US> Alpha Test </span>→<span lang=EN-US> Depth Test </span>→<span
lang=EN-US> Stencil Test </span>→<span lang=EN-US> Pixel fog </span>→<span
lang=EN-US> Alpha Blending </span>등을 거처 최종적으로 백 버퍼에 저장이 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=480 height=371
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image001.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>고정 기능 파이프라인과 프로그램 가능한 파이프라인 비교<span
lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 중에서 정점의 월드변환에서 래스터라이징 전까지에 해당하는 과정을 프로그램 하는 것을 정점 쉐이더<span
lang=EN-US>(Vertex Shader) </span>프로그래밍이라 합니다<span lang=EN-US>. </span>그리고 샘플링에서
멀티텍스처링까지 픽셀 처리에 대한 프로그램을 픽셀 쉐이더<span lang=EN-US>(Pixel Shader) </span>프로그래밍이라 합니다<span
lang=EN-US>. </span>즉<span lang=EN-US>, </span>정점 쉐이더와 픽셀 쉐이더는 정점 처리와 픽셀 처리의 일부
만을 프로그램 하는 것을 의미합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>또한 정점 쉐이더로 처리하는 과정과 픽셀 쉐이더로 처리하는 과정은 독립적으로 진행을 합니다<span
lang=EN-US>. </span>이것은 또한 고정 기능 파이프라인의 픽셀 처리와 프로그램 가능한 파이프라인의 픽셀 처리에서 입력되는 정점 처리
후의 데이터가 정점 쉐이더로 처리되었던 결과인지 아니면 고정 기능 파이프라인으로 처리되었던 결과인지를 구분하지 않는다는 것입니다<span
lang=EN-US>. </span>이러한 이유로 때로는 정점 처리는 고정 기능 파이프라인으로 처리하고 픽셀 처리는 픽셀 쉐이더를 사용하거나 정점
쉐이더를 사용하고 픽셀 처리는 고정 기능 파이프라인으로 처리하기도 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>같은 개수의 명령어를 처리하는 것이라면 고정 기능 파이프라인이 더 빠를 수 있다고 할 수 있지만 쉐이더를 사용하더라도
<span lang=EN-US>“</span>느려지지 않는다<span lang=EN-US>.”</span>라는 것입니다<span
lang=EN-US>. </span>우리가 쉐이더를 사용하는 가장 큰 이유는 고정 기능 파이프라인에서 처리하지 못하는 내용을 쉐이더 프로그램을
통해 극복하는 것입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>지금까지 대충 쉐이더의 역할과 내용을 살펴보았습니다<span lang=EN-US>. </span>이제 본격적으로
정점 쉐이더와 픽셀 쉐이더를 공부해봅시다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:16.0pt'>2 </span><span
style='font-size:16.0pt'>정점 쉐이더<span lang=EN-US>(Vertex Shader)</span></span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>2.1 </span><span
style='font-size:14.0pt'>간단한 정점 쉐이더</span></p>

<p class=MsoNormal>정점 쉐이더 프로그래밍은 정점 처리 과정을 프로그램 가능한 파이프라인에 대한 프로그램입니다<span
lang=EN-US>. </span>쉐이더가 처음 만들어졌을 때는<span lang=EN-US> GPU</span>에서 지원되는 기능이 많지 않아서<span
lang=EN-US> Assembly </span>형태의 언어로 작성해야만 했습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>다음 코드는<span lang=EN-US> C</span>언어의<span lang=EN-US>
&quot;Hello world&quot;</span>에 해당하는 가장 간단한 정점 쉐이더 코드 입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:fuchsia'>&quot;</span><span
lang=EN-US style='color:fuchsia'>vs_1_1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n&quot;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:fuchsia'>&quot;dcl_position&nbsp; v0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n&quot;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:fuchsia'>&quot;mov oPos, v0&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n&quot;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>쉐이더를 어셈블리 형태의 저급 언어로 작성할 때 제일 먼저 여러분은 쉐이더 컴파일 버전을 명시해야 합니다<span
lang=EN-US>. </span>첫 번째 줄의<span lang=EN-US> vs_1_1(</span>또는<span lang=EN-US>
vs.1.1)</span>은 정점 쉐이더 버전<span lang=EN-US> 1.1 </span>로 쉐이더를 작성했다는 의미이며 이 버전을 이용해서
이후의 쉐이더 코드를 컴파일 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>정점 쉐이더 버전은<span lang=EN-US> 1.1, 1.2, 1.3, 2.0, 2.x 3.0 </span>등이
있으며 쉐이더 명령어는 버전마다 명령어들이 조금씩 다르기 때문에 이것을 어떤 쉐이더 버전을 사용하고 있는지 꼭 명시해야 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>두 번째 줄의 <span lang=EN-US>&quot;dcl_&quot; </span>으로 시작되는 문장은<span
lang=EN-US> GPU</span>에 전달되는 정점 데이터가 처리되기 전에 임시로 머무는 입력 값을 선언하고 저장하는 레지스터<span
lang=EN-US>(v</span>로 시작<span lang=EN-US>)</span>를 지정하는 것입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>앞의 <span lang=EN-US>&quot;dcl_position v0&quot; </span>는 <span
lang=EN-US>GPU</span>에 입력된 정점 데이터의 위치를<span lang=EN-US> v0 </span>레지스터에 지정한다 의미입니다<span
lang=EN-US>. </span>입력 값을 저장하는 레지스터는 <span lang=EN-US>v0~v12</span>까지 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>세 번째 줄의<span lang=EN-US> mov</span>는 데이터의 복사를 지시하는 명령어 입니다<span
lang=EN-US>. &quot;mov oPos, v0&quot;</span>는<span lang=EN-US> v0</span>에 저장된<span
lang=EN-US> x, y, z, w </span>출력 레지스터 <span lang=EN-US>oPos</span>에 저장하라는 의미입니다<span
lang=EN-US>. </span>여기서 중요한 것은 정점 쉐이더에서 처리한 후의 위치에 대한 결과 값은 반드시 출력 레지스터에 복사를 해야
한다는 것입니다<span lang=EN-US>. </span>만약 여러분이 출력 레지스터에 어떤 값도 지정하지 않으면 쉐이더 프로그램은 컴파일이
완료되지 않습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=211 height=158
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image002.gif">&nbsp;<img width=212 height=159
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image003.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>간단한 정점 쉐이더<span lang=EN-US>. <a
href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_01_vertex01.zip">s0v_01_vertex01.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>앞의 쉐이더 코드는 입력레지스터에 저장된 정점 위치를 그대로 출력 레지스터에 저장하도록 했습니다<span
lang=EN-US>. </span>만약 여러분이 정점의 좌표를<span lang=EN-US> [-1, -1, 0] ~ [1, 1, 1] </span>범위로
작성했다면 앞의 그림과 같은 삼각형을 출력 할 수 있습니다<span lang=EN-US>. </span>대부분의 그래픽 카드는 색상을 지정하지
않으면 흰색을 출력하는데 간혹 앞의 오른쪽 그림과 같이 검정색 삼각형이 출력 될 수도 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US><a href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_01_vertex01.zip">s0v_01_vertex01.zip</a></span>의
<span lang=EN-US>CShaderEx::Create() </span>함수에서 삼각형 출력에 대한 정점 쉐이더 작성 예를 볼 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이번에는 이전의 코드에 색상이 출력되도록 쉐이더 코드를 작성해 봅시다<span lang=EN-US>. </span>고정기능
파이프라인에서는 정점에 색상이 있어야 되지만 쉐이더는 직접 색상을 지정할 수 있습니다<span lang=EN-US>. </span>이렇게 직접
쉐이더 색상을 지정하려면 상수 레지스터를 이용해야 합니다<span lang=EN-US>. </span>상수 레지스터의 값을 설정하는 방법은 쉐이더
코드에서 지정하는 방법과 외부에서 지정하는 방법<span lang=EN-US> 2</span>가지가 있습니다<span lang=EN-US>. </span>다음은
쉐이더 코드 내부에서 상수 레지스터에 색상을 지정하고 출력하는 예입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US style='color:fuchsia'>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:fuchsia'>&quot;vs_1_1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n&quot;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:fuchsia'>&quot;def c10, 1, 1,
0, 1&nbsp;&nbsp; \n&quot;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:fuchsia'>&quot;dcl_position&nbsp;&nbsp;&nbsp;
v0 &nbsp;&nbsp; \n&quot;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:fuchsia'>&quot;mov oPos,
v0&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n&quot;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:fuchsia'>&quot;mov oD0, c10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n&quot;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:fuchsia'>&nbsp;</span></p>

<p class=MsoNormal>두 번째 줄의<span lang=EN-US> def</span>는 상수 레지스터에 값을 지정하는 명령어로<span
lang=EN-US> &quot; def c10, 1, 1, 0, 1&quot;</span>은 상수 레지스터<span lang=EN-US>
c10</span>에<span lang=EN-US> r, g, b, a = (1, 1, 0, 1)</span>로 저장하라는 명령어 입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>상수 레지스터는<span lang=EN-US> c</span>로 시작을 하며 <span lang=EN-US>c</span>는<span
lang=EN-US> constant</span>의 첫 글자입니다<span lang=EN-US>. </span>마지막의<span
lang=EN-US> &quot;mov oD0, c10&quot;</span>은 출력 레지스터<span lang=EN-US> oD0</span>에
상수레지스터에 저장된 값을 복사를 지시하는 것입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=215 height=163
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image004.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>상수 레지스터를 사용한 색상 출력<span
lang=EN-US>. <a href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_01_vertex02.zip">s0v_01_vertex02.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 번에는 정점이 색상을 가지고 있다고 가정하고 정점의 색상을 출력해 봅시다<span lang=EN-US>.
</span>여러분은 이전 쉐이더 코드에서 상수 레지스터의 값 대신 입력 레지스터에 정점 색상을 지정하고 이것을 출력 레지스터<span
lang=EN-US> oD0</span>에 복사하면 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:fuchsia'>&quot;vs_1_1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
\n&quot;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:fuchsia'>&quot;dcl_position&nbsp;&nbsp;&nbsp; v0&nbsp; \n&quot;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:fuchsia'>&quot;dcl_color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
v1&nbsp; \n&quot;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:fuchsia'>&quot;mov oPos,
v0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n&quot;</span></p>

<p class=MsoNormal><span lang=PT-BR style='color:fuchsia'>&quot;mov&nbsp; oD0,
v1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \n&quot;</span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal>세 번째 줄의<span lang=EN-US> &quot;dcl_color v1&quot; </span>정점의<span
lang=EN-US> Diffuse </span>값을 입력 레지스터<span lang=EN-US> v0</span>에 저장을 지시하는 것이며 마지막<span
lang=EN-US> &quot;mov oD0, v1&quot;</span>은 출력 레지스터<span lang=EN-US> oD0</span>에<span
lang=EN-US> v1</span>의 값 복사를 지시하는 것입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=241 height=181
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image005.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>정점의 <span lang=EN-US>Diffuse </span>출력<span
lang=EN-US>. <a href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_01_vertex03.zip">s0v_01_vertex03.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>2.2 </span><span
style='font-size:14.0pt'>저 수준 정점 쉐이더 작성 방법</span></p>

<p class=MsoNormal>어셈블리어 형태의 저 수준 쉐이더 문법은 간단하게 구성되어 있어서 일정한 순서와 명령어들을 익히면 쉽게 쉐이더
코드를 작성할 수 있습니다<span lang=EN-US>. </span>저 수준 쉐이더 코드 작성은 다음과 같이 총<span
lang=EN-US> 5</span>단계로 나누어서 작성됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>1. </span>정점 쉐이더 버전을 선언한다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>2. </span>필요하다면 상수 레지스터의 값을 지정한다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>3. </span>입력 레지스터를 선언하고 지정한다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>4. </span>정점의 위치<span lang=EN-US>, </span>법선
벡터<span lang=EN-US>, </span>색상<span lang=EN-US>, </span>안개 효과 값들에 대한 연산을 한다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>5. </span>연산한 결과를 출력 레지스터에 저장한다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>첫 번째 단계의 쉐이더 버전 선언은<span lang=EN-US> &quot;vs&quot;</span>로 시작을
하며<span lang=EN-US> vs_1_1(</span>또는<span lang=EN-US> vs.1.1), vs_1_2(</span>또는
<span lang=EN-US>vs.1.2), vs_1_3, vs_2_0, vs_3_0 </span>등으로 작성 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>2 </span>번째 단계인 상수 레지스터에 값을 설정하는 것은<span
lang=EN-US> &quot;def&quot;</span>로 시작합니다<span lang=EN-US>. </span>쉐이더는<span
lang=EN-US> float </span>형<span lang=EN-US> 4</span>개를 하나의 데이터의 단위로 처리합니다<span
lang=EN-US>. </span>따라서 상수 레지스터에 값을 지정할 때는<span lang=EN-US> float</span>형 값<span
lang=EN-US> 4</span>개를 지정해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>def</span><span
lang=EN-US style='color:fuchsia'> </span><span lang=EN-US style='color:blue'>c0</span><span
lang=EN-US>, &nbsp;</span><span lang=EN-US style='color:fuchsia'>1</span><span
lang=EN-US>.</span><span lang=EN-US style='color:fuchsia'>0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:fuchsia'>3</span><span
lang=EN-US>.</span><span lang=EN-US style='color:fuchsia'>0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:fuchsia'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:fuchsia'>0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:fuchsia'>2&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>; </span><span style='color:green'>상수 레지스터<span
lang=EN-US> c0</span>에<span lang=EN-US> (1, 3, 0, 2) </span>값 저장</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>def</span><span
lang=EN-US style='color:fuchsia'> </span><span lang=EN-US style='color:blue'>c12</span><span
lang=EN-US>, </span><span lang=EN-US style='color:fuchsia'>1</span><span
lang=EN-US>.</span><span lang=EN-US style='color:fuchsia'>0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:fuchsia'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:fuchsia'>0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:fuchsia'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:fuchsia'>0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:fuchsia'>1&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>; </span><span style='color:green'>상수 레지스터<span
lang=EN-US> c12</span>에<span lang=EN-US> (1, 0, 0, 1) </span>값 저장</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>상수 레지스터는<span lang=EN-US> c</span>로 시작을 하며 상수레지스터의 개수는 쉐이더 버전
마다 다르며 상수 레지스터에 저장된 값은 쉐이더 코드 처리 과정에서 수정할 수 없는 읽기 전용입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>저 수준 쉐이더 문법에서 주석은 <span lang=EN-US>Assembly </span>언어의 주석<span
lang=EN-US> &quot;;&quot;</span>과<span lang=EN-US> C </span>언어의 주석<span
lang=EN-US>&quot;//&quot;, &quot;/* */&quot; </span>이 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>3 </span>번째 단계는 입력 레지스터를 선언하고 지정하는 것으로<span
lang=EN-US> &quot;dcl_&quot;</span>로 시작합니다<span lang=EN-US>. dcl</span>은<span
lang=EN-US> declare</span>를 의미합니다<span lang=EN-US>. </span>가장 많이 사용되는 정점의 위치<span
lang=EN-US>, </span>법선 벡터<span lang=EN-US>, Diffuse, </span>텍스처 좌표를 지정할 때는 다음과 같이
작성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>dcl_position&nbsp; v0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>; </span><span style='color:green'>입력 정점의 위치를<span
lang=EN-US> v0 </span>레지스터로 선언<span lang=EN-US>(</span>저장<span lang=EN-US>)</span></span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>dcl_normal&nbsp;&nbsp;&nbsp;
v1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>; </span><span style='color:green'>입력 정점 법선을<span
lang=EN-US> v1 </span>레지스터로 선언<span lang=EN-US>(</span>저장<span lang=EN-US>)</span></span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>dcl_color&nbsp;&nbsp;&nbsp;&nbsp;
v2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>; </span><span style='color:green'>정점의<span lang=EN-US>
diffuse </span>색상을<span lang=EN-US> v2 </span>레지스터로 선언<span lang=EN-US>(</span>저장<span
lang=EN-US>)</span></span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>dcl_texcoord&nbsp; v3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>; </span><span style='color:green'>정점의 텍스처 좌표를<span
lang=EN-US> v3 </span>레지스터로 선언<span lang=EN-US>(</span>저장<span lang=EN-US>)</span></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이렇게<span lang=EN-US> &quot;dcl_&quot; </span>로 입력 레지스터를 지정하면
정점 데이터는 위치<span lang=EN-US>(position), </span>법선<span lang=EN-US>(normal), Diffuse(color,
color0), </span>텍스처 좌표<span lang=EN-US>(texcoord, texcoord0~7) </span>등으로 분리되어<span
lang=EN-US> &quot;dcl_&quot;</span>에서 지정된 레지스터에 저장 됩니다<span lang=EN-US>.
&quot;dcl_…&quot; </span>끝에는 숫자가 붙을 수 있습니다<span lang=EN-US>. </span>숫자<span
lang=EN-US> 0</span>은 숫자가 없을 때와 동등합니다<span lang=EN-US>. </span>즉<span
lang=EN-US>, dcl_color0</span>과<span lang=EN-US> dcl_color</span>는 같은 내용이며<span
lang=EN-US> Diffuse</span>를 지정할 때 사용합니다<span lang=EN-US>. </span>정점의 스페큘러<span
lang=EN-US>(Specular)</span>는<span lang=EN-US> dcl_color1</span>로 합니다<span
lang=EN-US>. </span>텍스처 좌표도 여러 개를 가지면 각각<span lang=EN-US> dcl_texcoord0~7</span>를
사용하면 됩니다<span lang=EN-US>. </span>때로는 정점을 구성하는 위치 또는 법선 벡터를 여러 개 둘 수 있습니다<span
lang=EN-US>. </span>마찬가지 방법으로<span lang=EN-US> dcl_position[#], dcl_normal[#]</span>으로
숫자를 붙여서 사용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&quot;dcl_&quot; </span>다음에 붙는 키워드는 <span
lang=EN-US>D3DDECLUSAGE </span>열거 형에서<span lang=EN-US> &quot;D3DDECLUSAGE_&quot;
</span>제외한 나머지를 사용하면 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>4 </span>번째 단계에서는 입력 레지스터 값과 상수 레지스터 값을 이용해서
연산을 수행합니다<span lang=EN-US>. </span>연산의 문법은<span lang=EN-US> Assembly</span>와 거의
같으며 명령어는<span lang=EN-US> Mnemonic </span>형태 입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=DE style='color:blue'>operator</span><span
lang=DE style='color:fuchsia'> </span><span lang=DE style='color:blue'>dest
Register</span><span lang=DE>, </span><span lang=DE style='color:blue'>src1
Register</span><span lang=DE>, </span><span lang=DE style='color:blue'>src2
Register</span><span lang=DE>, </span><span lang=DE style='color:blue'>src3
Register</span></p>

<p class=MsoNormal><span lang=DE>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>dest</span>는 임시<span lang=EN-US>(r#), </span>출력<span
lang=EN-US>(o</span>…<span lang=EN-US>)</span>레지스터만 가능하며 상수<span lang=EN-US>(c#),
</span>입력<span lang=EN-US>(v#)</span>는 읽기 전용이기 때문에 허용하지 않습니다<span lang=EN-US>. operator</span>의
모든 연산은<span lang=EN-US> float4</span>를<span lang=EN-US> x, y, z, w </span>또는<span
lang=EN-US> r, g, b, a</span>로 나누어서 연산이 가능합니다<span lang=EN-US>. </span>또한<span
lang=EN-US> xyzw </span>순서를 바꾸거나<span lang=EN-US> yyxx</span>와 같이 성분의 순서와 요소를 섞을
수 있으며 이것을<span lang=EN-US> swizzling</span>이라 합니다<span lang=EN-US>. swizzling</span>은<span
lang=EN-US> source</span>에서만 가능합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>연산을 하면서 결과를 임시로 저장할 수 있습니다<span lang=EN-US>. </span>이 경우에 임시
레지스터<span lang=EN-US>(Temporary Register)</span>를 사용할 수 있습니다<span lang=EN-US>. </span>임시
레지스터는<span lang=EN-US> &quot;r&quot;</span>로 시작을 합니다<span lang=EN-US>. </span>다음은<span
lang=EN-US> swizzling</span>으로 임시 레지스터<span lang=EN-US> &quot;r0&quot;</span>에 입력
레지스터<span lang=EN-US> &quot;v1&quot;</span>의 값을 복사하는 예입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>mov</span><span
lang=EN-US style='color:fuchsia'> </span><span lang=EN-US style='color:blue'>r0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:blue'>v1</span><span
lang=EN-US>.</span><span lang=EN-US style='color:fuchsia'>zy</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이렇게 하면<span lang=EN-US> r0(x, y, z, w)</span>는<span
lang=EN-US> (v1.z, v1.y, v1.y, v1.y) </span>값이 저장 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>5 </span>번째 단계에서는 출력 레지스터로 결과를 저장합니다<span
lang=EN-US>. </span>출력 레지스터는 소문자<span lang=EN-US> &quot;o&quot;</span>로 시작을 하며 여러분은
출력 레지스터<span lang=EN-US> oPos</span>에 값을 반드시 저장해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>Diffuse </span>값은<span lang=EN-US> oD0, </span>스페큘러
값은<span lang=EN-US> oD1</span>에 저장을 하고<span lang=EN-US>, </span>텍스처 좌표는<span
lang=EN-US> oT0~ 0T7</span>에 저장합니다<span lang=EN-US>. </span>안개 값은<span
lang=EN-US> oFog, Point</span>의 크기는<span lang=EN-US> oPts</span>에 저장합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=PT-BR style='color:blue'>mov oPos</span><span
lang=PT-BR>, </span><span lang=PT-BR style='color:blue'>r0</span></p>

<p class=MsoNormal><span lang=PT-BR style='color:blue'>mov oDo </span><span
lang=PT-BR>, </span><span lang=PT-BR style='color:blue'>v2</span></p>

<p class=MsoNormal><span lang=PT-BR style='color:blue'>mov oT0 </span><span
lang=EN-US>, </span><span lang=PT-BR style='color:blue'>v3</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이렇게 사용자가 작성한 쉐이더 코드는 다음 그림과 같이 프로그램 가능한 파이프라인에서 정점 데이터가 입력이 되면
쉐이더 코드의 명령어 순서에 따라 각각의 동작을 수행 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=492 height=301
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image006.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>정점 쉐이더 레이아웃<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>정점 데이터와 쉐이더 코드의 관계는 그림처럼 입력 레지스터 선언에 의해서 데이터가 분해되어 입력 레지스터에 저장됩니다<span
lang=EN-US>.</span><span lang=EN-US> </span>이 입력 레지스터에 저장된 값과 미리 설정된 상수 레지스터에 저장된
값들을 가지고 연산을 합니다<span lang=EN-US>. </span>이 연산의 결과를 임시 레지스터에 저장하거나 직접 출력 레지스터로 복사되고
출력 레지스터 내용은 <span lang=EN-US>Rasterizing </span>또는<span lang=EN-US> Pixel
Processing</span>에서 처리 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>지금까지 간단한 정점 쉐이더와 쉐이더 작성 방법을 살펴 보았습니다<span lang=EN-US>. </span>다음으로
정점 쉐이더를 사용해서 정점의 처리 과정을 살펴봅시다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>2.3 </span><span
style='font-size:14.0pt'>정점 쉐이더 객체와 정점 선언자 객체</span></p>

<p class=MsoNormal>프로그램 가능한 파이프라인에 우리가 작성한 정점 쉐이더 코드를 적용하려면 정점 쉐이더<span
lang=EN-US>(Vertex Shader) </span>객체와 정점 선언<span lang=EN-US>(Vertex Declaration)
</span>객체<span lang=EN-US> 2</span>개가 필요합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>정점 쉐이더 객체는 컴파일 한 쉐이더 코드를 적재한 객체이고<span lang=EN-US>, </span>정점
선언 객체는 프로그램 가능한 파이프라인에 정점 데이터의 형식을 알리는 객체입니다<span lang=EN-US>. </span>이것은 고정기능 파이프라인의<span
lang=EN-US> SetFVF()</span>함수를 대신한다고 할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>정점 쉐이더 객체를 생성하기 위해서 먼저 정점 쉐이더 코드를 컴파일 해야 합니다<span
lang=EN-US>. D3DXAssembleShader() </span>함수는 저수준 언어로 작성된 쉐이더 코드를 컴파일 하며<span
lang=EN-US>, </span>컴파일 과정에서 발생한 문법 오류 등을 검사해 줍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>DWORD</span><span lang=EN-US> dwFlags = </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#if defined</span><span lang=EN-US>( _DEBUG ) || </span><span
lang=EN-US style='color:blue'>defined</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#A000A0'>DEBUG</span><span lang=EN-US> )</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dwFlags
|= </span><span lang=EN-US style='color:#A000A0'>D3DXSHADER_DEBUG</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#endif</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>LPD3DXBUFFER</span><span lang=EN-US>&nbsp;&nbsp; pShd&nbsp;&nbsp;&nbsp; =
</span><span lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>LPD3DXBUFFER</span><span lang=EN-US>&nbsp;&nbsp; pErr&nbsp;&nbsp;&nbsp; =
</span><span lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iLen&nbsp;&nbsp;&nbsp; =
</span><span lang=EN-US style='color:#880000'>strlen</span><span lang=EN-US>(sShader);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>hr = </span><span
lang=EN-US style='color:#880000'>D3DXAssembleShader</span><span lang=EN-US>(sShader,
iLen, </span><span lang=EN-US style='color:#A000A0'>NULL</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>NULL</span><span
lang=EN-US>, dwFlags, &amp;pShd, &amp;pErr);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>만약 파일에서 작성한 저 수준 쉐이더를 컴파일 하려면 <span lang=EN-US>D3DXAssembleShaderFromFile()
</span>함수를 다음과 같이 사용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>hr = </span><span lang=EN-US
style='color:#880000'>D3DXAssembleShaderFromFile</span><span lang=EN-US>(</span><span
lang=EN-US style='color:fuchsia'>&quot;</span><span style='color:fuchsia'>파일 이름<span
lang=EN-US>&quot;</span></span><span lang=EN-US>, </span><span lang=EN-US
style='color:#A000A0'>NULL</span><span lang=EN-US>, </span><span lang=EN-US
style='color:#A000A0'>NULL</span><span lang=EN-US>, dwFlags, &amp;pShd, &amp;pErr);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>&nbsp;</span></p>

<p class=MsoNormal>앞의 예처럼 <span lang=EN-US>D3DXAssembleShader() </span>함수의 마지막에
오류 정보를 저장할 <span lang=EN-US>ID3DXBuffer </span>형 인수를 넣어주면 컴파일 과정에서 발생한 에러 내용과 위치<span
lang=EN-US>(</span>행<span lang=EN-US>)</span>을 문자열로 저장해 줍니다<span lang=EN-US>. </span>우리는
이것을 다음의 <span lang=EN-US>(char*)pErr-&gt;GetBufferPointer()</span>와 같이 문자열로 캐스팅에서
문제점을 파악할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US> ( </span><span lang=EN-US
style='color:#A000A0'>FAILED</span><span lang=EN-US>(hr) )</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(</span><span
lang=EN-US>pErr)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=DE style='color:blue'>char</span><span lang=DE>* sErr = (</span><span
lang=DE style='color:blue'>char</span><span lang=DE>*)pErr-&gt;</span><span
lang=DE style='color:#880000'>GetBufferPointer</span><span lang=DE>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=DE style='color:#A000A0'>MessageBox</span><span lang=DE>( hWnd, sErr, </span><span
lang=DE style='color:fuchsia'>&quot;Err&quot;</span><span lang=DE>, </span><span
lang=DE style='color:#A000A0'>MB_ICONWARNING</span><span lang=DE>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US>pErr-&gt;</span><span lang=EN-US style='color:#880000'>Release</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> -</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>D3DXAssembleShader() </span>함수는 컴파일만 담당하기 때문에
컴파일 한 쉐이더 명령어를 사용하기 위해서 결과를 메모리에 적재해야 합니다<span lang=EN-US>. </span>정점 쉐이더 코드가 적재된
객체를 정점 쉐이더<span lang=EN-US>(IDirect3DVertexShader9) </span>객체라 하는데 이 객체는 다음과 같이
<span lang=EN-US>D3D </span>디바이스의<span lang=EN-US> CreateVertexShader() </span>함수에
컴파일 한 결과를 인수로 전달하면 생성 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>IDirect3DVertexShader9</span><span
lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pVs;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 쉐이더 객체</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>hr =
m_pDev-&gt;</span><span lang=EN-US style='color:#880000'>CreateVertexShader</span><span
lang=EN-US>( (</span><span lang=EN-US style='color:blue'>DWORD</span><span
lang=EN-US>*)pShd-&gt;</span><span lang=EN-US style='color:#880000'>GetBufferPointer</span><span
lang=EN-US>() , &amp;m_pVs);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US> ( </span><span lang=EN-US
style='color:#A000A0'>FAILED</span><span lang=EN-US>(hr) )</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> -</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>프로그램 가능한 파이프라인에서는 고정 기능 파이프라인의<span lang=EN-US> FVF(Flexible
Vertex Format) </span>상수를 사용할 수 없습니다<span lang=EN-US>. </span>그 대신 정점 선언<span
lang=EN-US>(</span>자<span lang=EN-US>) </span>객체를 사용하는데 정점 선언 객체를 생성하기 위해서 먼저 <span
lang=EN-US>D3DVERTEXELEMENT9 </span>구조체 변수를 <span lang=EN-US>MAX_FVF_DECL_SIZE </span>만큼
배열로 선언하고 <span lang=EN-US>manual</span>로 값을 채웁니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>D3DVERTEXELEMENT9</span><span
lang=EN-US> vertex_decl[</span><span lang=EN-US style='color:#A000A0'>MAX_FVF_DECL_SIZE</span><span
lang=EN-US>] =</span></p>

<p class=MsoNormal><span lang=EN-US>{</span></p>

<p class=MsoNormal style='text-indent:10.0pt;word-break:keep-all'><span
lang=EN-US>{ </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>, &nbsp;</span><span lang=EN-US style='color:#A000A0'>D3DDECLTYPE_FLOAT3</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>D3DDECLMETHOD_DEFAULT</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>D3DDECLUSAGE_POSITION</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US> },</span></p>

<p class=MsoNormal style='text-indent:10.0pt;word-break:keep-all'><span
lang=EN-US>{ </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>12</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>D3DDECLTYPE_D3DCOLOR</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>D3DDECLMETHOD_DEFAULT</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>D3DDECLUSAGE_COLOR</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US> },</span></p>

<p class=MsoNormal style='text-indent:10.0pt;word-break:keep-all'><span
lang=EN-US>…</span></p>

<p class=MsoNormal style='text-indent:10.0pt;word-break:keep-all'><span
lang=EN-US style='color:#A000A0'>D3DDECL_END</span><span lang=EN-US>()</span></p>

<p class=MsoNormal><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>구조체를 채울 때 마지막은<span lang=EN-US> &quot;D3DDECL_END()&quot;</span>을
사용해서 더 이상 추가가 없음을 지시합니다<span lang=EN-US>. </span>이렇게<span lang=EN-US> manual</span>로
<span lang=EN-US>D3DVERTEXELEMENT9</span>의 값을 설정하는 것도 좋겠지만 처음 하는 분들에게는 부담이 됩니다<span
lang=EN-US>. DXSDK</span>의 <span lang=EN-US>D3DXDeclaratorFromFVF() </span>함수는 이미
알려진<span lang=EN-US> FVF </span>값에서 <span lang=EN-US>D3DVERTEXELEMENT9 </span>구조체
변수를 채우는 함수로 이 함수를 사용하는 것이 가장 무난합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>manual</span>로 작성하는 경우는 고정 기능 파이프라인에서 제공 되지
않는<span lang=EN-US> FVF</span>를 사용할 때<span lang=EN-US>, </span>예를 들어 정점의 위치가<span
lang=EN-US> 2</span>개 이상 이거나<span lang=EN-US>, </span>여러 개의 법선 벡터를 사용하게 되면 직접 <span
lang=EN-US>D3DVERTEXELEMENT9 </span>값을 작성해야 하며 쉐이더 코드 작성에서도<span lang=EN-US>
dcl_position </span>또는<span lang=EN-US> dcl_normal </span>끝에 숫자를 붙여서 작성해야 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>IDirect3DVertexDeclaration9</span><span
lang=EN-US>*&nbsp; m_pFVF;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 선언 객체</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>D3DVERTEXELEMENT9</span><span lang=EN-US> vertex_decl[</span><span
lang=EN-US style='color:#A000A0'>MAX_FVF_DECL_SIZE</span><span lang=EN-US>]</span><span
lang=EN-US> ={</span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>};</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>D3DXDeclaratorFromFVF</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>VtxD</span><span lang=EN-US>::</span><span
lang=EN-US style='color:#A000A0'>FVF</span><span lang=EN-US>, vertex_decl);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US>(</span><span lang=EN-US
style='color:#A000A0'>FAILED</span><span lang=EN-US>(m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>CreateVertexDeclaration</span><span
lang=EN-US>( vertex_decl, &amp;m_pFVF )))</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> -</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이렇게 프로그램 가능한 파이프라인을 사용하기 위해서 정점 쉐이더 객체와 정점 선언 객체를 만들었습니다<span
lang=EN-US>. </span>이들을 이용해서 렌더링 하는 순서는 다음과 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>1. </span>정점 쉐이더와 정점 선언 객체 사용 명시함으로써 프로그램 가능한
파이프라인 사용을 알린다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>2. </span>정점 선언 객체로 정점 데이터의 형식을 파이프라인에 알린다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>3. </span>필요하면 상수 레지스터 값을 설정한다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>4. </span>정점을 그린다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>5. </span>정점 쉐이더 객체 사용을 해제해서 고정 기능 파이프라인 사용으로
돌아 온다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>프로그램 가능한 파이프라인을 사용하려면 정점 쉐이더 사용을 다음과 같이 명시해야 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=DE>m_pDev-&gt;</span><span lang=DE
style='color:#880000'>SetVertexShader</span><span lang=DE>(m_pVs);</span></p>

<p class=MsoNormal><span lang=DE>&nbsp;</span></p>

<p class=MsoNormal>이렇게 하면<span lang=EN-US> GPU</span>는 고정 기능 파이프라인 대신에 프로그램 가능한
파이프라인으로 정점 데이터를 전달합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>다음으로 정점 선언 객체를 지정해서 입력된 정점 데이터의 형식을 파이프라인에 알립니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>m_pDev-&gt;</span><span lang=EN-US
style='color:#880000'>SetVertexDeclaration</span><span lang=EN-US>( m_pFVF );</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>필요한 상수의 전달입니다<span lang=EN-US>. </span><span lang=EN-US>CPU</span>에서
데이터의 처리는 <span lang=EN-US>int </span>형 이듯이 쉐이더는 <span lang=EN-US>float4 (float
*4) </span>형 입니다<span lang=EN-US>. </span>파이프라인에 상수를 전달하는 함수는 디바이스의<span
lang=EN-US> SetVertexShader()</span>함수입니다<span lang=EN-US>. </span>이 함수의 사용은 다음과
같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>m_pDev-&gt;</span><span lang=EN-US
style='color:#880000'>SetVertexShaderConstantF</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, (</span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>*)&amp;mtVP , </span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>SetVertexShaderConstantF() </span>함수의 <span
lang=EN-US>F</span>는<span lang=EN-US> FLOAT </span>형 데이터 전달을 의미합니다<span
lang=EN-US>. </span>함수의 첫 번째 인수는 상수 레지스터 이름의<span lang=EN-US> c</span>를 제외한 나머지로
앞의 코드처럼<span lang=EN-US> &quot;0&quot;</span>으로 지정하면 <span lang=EN-US>c0 </span>상수
레지스터에 값을 지정하는 것입니다<span lang=EN-US>. </span>함수의 두 번째 인수는 상수에 설정할 값의 주소를 지정합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>세 번째 인수는<span lang=EN-US> float4</span>형의 개수를 의미하며 앞의 코드는<span
lang=EN-US> float4 </span>형이<span lang=EN-US> 4</span>개 전달되므로 총<span
lang=EN-US> 16</span>개의<span lang=EN-US> float </span>형 데이터를 상수 레지스터에 지정하는 것입니다<span
lang=EN-US>. </span>앞서 쉐이더의 레지스터는<span lang=EN-US> float4</span>형이 기본이라고 했습니다<span
lang=EN-US>. </span>그런데 데이터가<span lang=EN-US> 16</span>개가 전달되어서 <span
lang=EN-US>c0</span>는<span lang=EN-US> float</span>형<span lang=EN-US> 4</span>개가
적재되고 나머지<span lang=EN-US> 12</span>개의 데이터는 <span lang=EN-US>c1, c2, c3 </span>레지스터에
순차적으로 기록이 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>상수 연결에서 주의할 내용은<span lang=EN-US> float </span>형 데이터 하나를 설정 하더라도
쉐이더는<span lang=EN-US> float4</span>가 기본이어서 데이터를<span lang=EN-US> float4</span>로
늘린 후에 값을 전달해야 합니다<span lang=EN-US>. </span>예를 들어 상수 레지스터<span lang=EN-US> c10</span>에
정점의 위치<span lang=EN-US> vcP(=float2: x, y)</span>으로 구성된 데이터를 연결한다 하더라도 다음과 같이 코딩
해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>FLOAT</span><span
lang=EN-US> p[</span><span lang=EN-US style='color:red'>4</span><span
lang=EN-US>] = {vcP.x, vcP.y, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>m_pDev-&gt;</span><span lang=EN-US
style='color:#880000'>SetVertexShaderConstantF</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>10</span><span lang=EN-US>, (</span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>*)&amp;p , </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>저 수준에서 행렬 데이터를 상수 레지스터에 복사할 경우에 행렬의 값을 전치<span lang=EN-US>(Transpose)
</span>시켜야 합니다<span lang=EN-US>. </span>이것은 쉐이더에서 행렬의 연산 과정이 마치 오른손 좌표계 연산과 동일해서
왼손 좌표를 사용하는<span lang=EN-US> DirectX</span>의 행렬 값을 전치해야 올바를 결과를 만들 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>D3DXMATRIX </span><span lang=EN-US>mtVP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
mtWld * mtViw * mtPrj;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>D3DXMatrixTranspose</span><span lang=EN-US>( &amp;mtVP ,
&amp;mtVP );</span></p>

<p class=MsoNormal><span lang=EN-US>m_pDev-&gt;</span><span lang=EN-US
style='color:#880000'>SetVertexShaderConstantF</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, (</span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>*)&amp;mtVP , </span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>고 수준 언어인<span lang=EN-US> HLSL</span>을 사용하게 되면 행렬을 전치하지 않고 그대로
사용할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>상수 레지스터는<span lang=EN-US> float</span>형 이외에 정수형과<span
lang=EN-US> bool</span>형을 지정할 수 있습니다<span lang=EN-US>. </span>정수형은 <span
lang=EN-US>SetVertexShaderConstantI() </span>함수를 사용하고<span lang=EN-US> bool </span>형은
<span lang=EN-US>SetVertexShaderConstantB() </span>함수를 사용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>상수 레지스터 지정 후에 <span lang=EN-US>DrawPrimitive()</span>함수 등을 호출해서
렌더링을 하며<span lang=EN-US>, </span>렌더링을 끝내고 고정 파이프라인으로 돌아오기 위해서 다음과 같이<span
lang=EN-US> SetVertexShader()</span>함수에<span lang=EN-US> NULL </span>을 설정합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>m_pDev-&gt;</span><span lang=EN-US
style='color:#880000'>SetVertexShader</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><a href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_02_shader_string.zip">s0v_02_shader_string.zip</a></span>는
문자열로 작성된 쉐이더에 대한 예제이고 <span lang=EN-US><a href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_02_shader_file.zip">s0v_02_shader_file.zip</a>
</span>은 파일에서 작성한 쉐이더 예제 입니다<span lang=EN-US>. </span>이 둘의 <span lang=EN-US>CShaderEx
</span>클래스는 프로그램 가능한 파이프라인을 이용해서 월드 공간에서 삼각형을 렌더링 합니다<span lang=EN-US>. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=244 height=184
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image007.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>프로그램 가능한 파이프라인에서 삼각형 출력<span
lang=EN-US>:</span></p>

<p class=MsoNormal><span lang=EN-US><a href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_02_shader_string.zip">s0v_02_shader_string.zip</a>,
<a href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_02_shader_file.zip">s0v_02_shader_file.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>지금까지 정점 쉐이더 객체와 정점 선언 객체를 생성하고 프로그램 가능한 파이프라인을 이용하고 상수 레지스터 설정
방법을 간단히 살펴보았습니다<span lang=EN-US>. </span>정점 쉐이더를 사용과 관련된 함수들을 정리한다면 다음과 같습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>1. </span>파일 또는 문자열로 어셈블리어 형식의 저 수준 쉐이더 명령어들을
작성한다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>2. </span>저 수준 쉐이더 명령어들을 컴파일 한다<span
lang=EN-US>. </span>→ <span lang=EN-US>D3DXAssembleShader() </span>함수</p>

<p class=MsoNormal><span lang=EN-US>3. </span>컴파일 된 쉐이더 명령어로 정점 쉐이더 객체를 생성한다<span
lang=EN-US>. </span>→<span lang=EN-US> pDevice-&gt;CreateVertexShader()</span></p>

<p class=MsoNormal><span lang=EN-US>4. </span>정점 형식 객체를 생성한다<span lang=EN-US>. </span>→<span
lang=EN-US> pDevice-&gt; CreateVertexDeclaration()</span></p>

<p class=MsoNormal><span lang=EN-US>5. GPU</span>에게 프로그램 가능한 파이프라인 사용을 알린다<span
lang=EN-US>. </span>→<span lang=EN-US> pDevice-&gt;SetVertexShader()</span></p>

<p class=MsoNormal><span lang=EN-US>5. </span>파이프라인에 입력된 정점 데이터 형식을 알린다<span
lang=EN-US>. </span>→<span lang=EN-US> pDevice-&gt;SetVertexDeclaration()</span></p>

<p class=MsoNormal><span lang=EN-US>6. </span>파이프라인의 상수 레지스터를 설정한다<span
lang=EN-US>. </span>→<span lang=EN-US> pDevice-&gt;SetVertexShaderConstant{F|B|I|}()</span></p>

<p class=MsoNormal><span lang=EN-US>7. </span>장면을 그린다<span lang=EN-US>. </span>→<span
lang=EN-US> pDevice-&gt;DrawPrimitive ()</span></p>

<p class=MsoNormal><span lang=EN-US>8. </span>정점 쉐이더 사용을 해제한다<span lang=EN-US>.
</span>→<span lang=EN-US> pDevice-&gt;SetVertexShader(NULL)</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>2.4 </span><span
style='font-size:14.0pt'>변환<span lang=EN-US>(Transform)</span></span></p>

<p class=MsoNormal><span lang=EN-US>3D </span>기초 과정으로 돌아서 고정 기능 파이프라인의 정점 처리 과정을
보면 크게 정점의 변환<span lang=EN-US>, </span>조명 효과 적용<span lang=EN-US>, </span>안개 효과 적용
입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=516 height=160
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image008.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>쉐이더 프로그램 대상인 고정 기능 파이프라인의 정점 처리 과정<span
lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>정점의 변환은 다시 월드 변환<span lang=EN-US>, </span>뷰 변환<span
lang=EN-US>, </span>정규 변환으로 나눌 수 있으며 수식으로 다음과 같이 정리할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>정점의 정규 변환 위치<span lang=EN-US>' = </span>정점의 위치<span
lang=EN-US> * (</span>월드 행렬<span lang=EN-US> * </span>뷰 행렬<span lang=EN-US> * </span>투영
행렬<span lang=EN-US>)</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 수식을 다음과 같이 <span lang=EN-US><a
href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_02_shader_string.zip">s0v_02_shader_string.zip</a>, <a
href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_02_shader_file.zip">s0v_02_shader_file.zip</a> </span>에 구현하고 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>vs_1_1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl_position</span><span lang=EN-US>&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>v0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl_color</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>v1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>m4x4</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>oPos</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>v0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>c0</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#880000'>mov</span><span
lang=EN-US>&nbsp; </span><span lang=EN-US style='color:blue'>oD0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:blue'>v1</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>4 </span>번째 줄의<span lang=EN-US> m4x4</span>는
벡터와 행렬의 곱셈 연산을 지시하는 명령어로<span lang=EN-US> &quot;m4x4 oPos, v0, c0&quot; </span>상수
레지스터<span lang=EN-US> c0, c1, c2, c3</span>를 행으로 구성하는 행렬과 입력 레지스터<span
lang=EN-US> v0</span>를 곱해서<span lang=EN-US> oPos</span>에 저장하는 것이며 수식으로 표현하면 다음과
같습니다<span lang=EN-US>. </span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=528 height=86
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image009.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>m4x4</span>는 또한 다음과 같이<span lang=EN-US> 4</span>번의
내적<span lang=EN-US>(dp4: 4</span>차원 벡터의 내적<span lang=EN-US>)</span>를 수행하는 것과 같습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr style='height:36.2pt'>
  <td width=151 style='width:4.0cm;padding:0cm 5.4pt 0cm 5.4pt;height:36.2pt'>
  <p class=MsoNormal><span lang=EN-US>m4x4 r0, r1, c0&nbsp; </span><span
  lang=EN-US style='font-family:Wingdings'>&oacute;</span></p>
  </td>
  <td width=180 style='width:135.0pt;padding:0cm 5.4pt 0cm 5.4pt;height:36.2pt'>
  <p class=MsoNormal><span lang=PT-BR>dp4&nbsp;&nbsp; r0.x, r1, c0</span></p>
  <p class=MsoNormal><span lang=PT-BR>dp4&nbsp;&nbsp; r0.y, r1, c1</span></p>
  <p class=MsoNormal><span lang=PT-BR>dp4&nbsp;&nbsp; r0.z, r1, c2</span></p>
  <p class=MsoNormal><span lang=PT-BR>dp4&nbsp;&nbsp; r0.w, r1, c3</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal><span lang=PT-BR>m4x4</span>이외에<span lang=PT-BR> m4x3, m3x3</span>도
있는데<span lang=PT-BR> m3x3</span>은 주어진 행렬의<span lang=PT-BR> 3</span>행<span
lang=PT-BR> 3</span>열만 곱셈 연산에 적용이 됩니다<span lang=PT-BR>.</span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>c0</span>에<span lang=EN-US> &quot;</span>월드
행렬<span lang=EN-US> * </span>뷰 행렬<span lang=EN-US> * </span>투영 행렬<span
lang=EN-US>&quot; </span>값을 전달하기 위해서 <span lang=EN-US><a
href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_02_shader_file.zip">s0v_02_shader_file.zip</a></span>의 <span
lang=EN-US>CShaderEx::Render() </span>함수를 보면 다음과 같이 행렬 값들을 설정하고<span
lang=EN-US> SetVertexShaderConstantF() </span>함수로 상수 레지스터<span lang=EN-US> c0</span>에
설정하고 있음을 볼 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>D3DXMATRIX</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; mtWld;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>월드 행렬</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>D3DXMATRIX</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; mtViw;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>뷰 행렬</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>D3DXMATRIX</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; mtPrj;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>투영 행렬</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>D3DXMATRIX</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; mtVP&nbsp;&nbsp;&nbsp; =
mtWld * mtViw * mtPrj;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>D3DXMatrixTranspose</span><span lang=EN-US>( &amp;mtVP ,
&amp;mtVP );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>m_pDev-&gt;</span><span lang=EN-US
style='color:#880000'>SetVertexShaderConstantF</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, (</span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>*)&amp;mtVP , </span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>지금은 정점 변환에 관한 행렬을 전부 곱해서 전달하고 있고 각각 월드 변환<span lang=EN-US>, </span>뷰
변환<span lang=EN-US>, </span>정규 변환을 쉐이더에서 단계적으로 구현하기 위해서 먼저 다음과 같이 순서와 수식을 정리합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>정점의 위치<span lang=EN-US>' = </span>입력 정점의 위치</i></p>

<p class=MsoNormal><i>정점의 월드 변환 위치<span lang=EN-US>' = </span>정점의 위치<span
lang=EN-US>' * </span>월드 행렬</i></p>

<p class=MsoNormal><i>정점의 뷰 변환 위치<span lang=EN-US>' = </span>정점의 월드 변환 위치<span
lang=EN-US>' * </span>뷰 행렬</i></p>

<p class=MsoNormal><i>정점의 정규 변환 위치<span lang=EN-US>' = </span>정점의 월드 변환 위치<span
lang=EN-US>' * </span>투영 행렬</i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이것을 쉐이더 코드로 전환해야 하는데 월드 행렬<span lang=EN-US>, </span>뷰 행렬<span
lang=EN-US>, </span>투영 행렬은 외부에서 설정되는 값이므로 상수 레지스터로 설정합니다<span lang=EN-US>. </span>그런데
행렬은<span lang=EN-US> float</span>형<span lang=EN-US> 16</span>개가 필요하기 때문에 만약 월드 행렬을<span
lang=EN-US> c0</span>에 설정하게 되면<span lang=EN-US> c0~c3</span>까지 상수 레지스터가 월드 행렬 값으로
설정이 되고<span lang=EN-US>, </span>뷰 행렬이<span lang=EN-US> c4</span>에 설정되면<span
lang=EN-US> c4~c7 </span>레지스터가 뷰 행렬 값으로 설정 됩니다<span lang=EN-US>. </span>투영 행렬이<span
lang=EN-US> c8</span>에 설정되면<span lang=EN-US> c8~c11</span>까지 투영 행렬 값이 설정 됩니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>수식의 왼쪽에 있는 정점의 위치<span lang=EN-US>', </span>정점의 월드 변환 위치<span
lang=EN-US>, </span>뷰 변환 위치<span lang=EN-US>, </span>정규 변환 위치는 쉐이더 내부에서 임시<span
lang=EN-US>(Temporary)</span>로 사용되는 값 입니다<span lang=EN-US>. </span>따라서 이들은 임시 레지스터<span
lang=EN-US> r0, r1, r2, r3</span>에 저장 시킬 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>이 내용을 가지고 저 수준 쉐이더 코드로 전환하면 다음과 같습니다<span lang=PT-BR>.</span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>vs_1_1</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:green'>// </span><span style='color:green'>쉐이더
버전</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl_position</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>v0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:green'>// </span><span style='color:green'>위치
설정</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mov</span><span lang=EN-US> r0, </span><span lang=EN-US
style='color:blue'>v0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:green'>// </span><span style='color:green'>정점의
위치를 임시 레지스터에 복사</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>m4x4</span><span lang=EN-US> r1, r0, </span><span
lang=EN-US style='color:blue'>c0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:green'>// </span><span style='color:green'>월드
행렬 변환 후<span lang=EN-US> r1</span>에 저장</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>m4x4</span><span lang=EN-US> r2, r1, </span><span
lang=EN-US style='color:blue'>c4</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:green'>// </span><span style='color:green'>뷰
행렬 변환 후<span lang=EN-US> r2</span>에 저장</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>m4x4</span><span lang=EN-US> r3, r2, </span><span
lang=EN-US style='color:blue'>c8</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:green'>// </span><span style='color:green'>투영
행렬 변환 후<span lang=EN-US> r3</span>에 저장</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#A000A0'>mov</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>oPos</span><span
lang=EN-US>,
r3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// r3 </span><span style='color:green'>값을 출력 레지스터<span
lang=EN-US> oPos</span>에 복사</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>만약 정점의 색상을 출력하려면<span lang=EN-US> &quot;dcl_color&quot; </span>또는<span
lang=EN-US> &quot;dcl_color0&quot;</span>를 이용해서 정점의<span lang=EN-US> Diffuse </span>값에
대해서 레지스터를 선언합니다<span lang=EN-US>. </span>만약 정점의 스페큘러<span lang=EN-US>(Specular)
</span>값을 얻으려면<span lang=EN-US> &quot;dcl_color1&quot;</span>을 이용해야 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>dcl_color</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:blue'>v1</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>색상 레지스터</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#A000A0'>mov</span><span
lang=EN-US>&nbsp; </span><span lang=EN-US style='color:blue'>oD0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:blue'>v1</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점의 색상을 직접 복사</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>색상을 출력하기 위해서는<span lang=EN-US> oD0</span>와<span lang=EN-US>
oD1</span>을 사용합니다<span lang=EN-US>. oD0</span>는<span lang=EN-US> Diffuse </span>값<span
lang=EN-US>, oD1</span>은 스페큘러 값에 대한 출력 레지스터입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>상수 레지스터<span lang=EN-US> c0, c4, c8</span>에 값을 설정하기 위해서 우리는 다음과
같이 먼저 행렬을 전치<span lang=EN-US>(Transpose) </span>시키고<span lang=EN-US>, </span>디바이스의<span
lang=EN-US> SetVertexShaderConstantF() </span>함수에<span lang=EN-US> &quot;</span>상수
레지스터 인덱스<span lang=EN-US>&quot;, </span>행렬 주소<span lang=EN-US>, 4 </span>등을 인수로
전달하면 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>D3DXMATRIX</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; mtT;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>D3DXMatrixTranspose</span><span lang=EN-US>( &amp;mtT ,
&amp;mtWld );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetVertexShaderConstantF</span><span
lang=EN-US>( </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>, (</span><span lang=EN-US style='color:blue'>FLOAT</span><span
lang=EN-US>*)&amp;mtT , </span><span lang=EN-US style='color:red'>4</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>D3DXMatrixTranspose</span><span lang=EN-US>( &amp;mtT ,
&amp;mtViw );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetVertexShaderConstantF</span><span
lang=EN-US>( </span><span lang=EN-US style='color:red'>4</span><span
lang=EN-US>, (</span><span lang=EN-US style='color:blue'>FLOAT</span><span
lang=EN-US>*)&amp;mtT , </span><span lang=EN-US style='color:red'>4</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>D3DXMatrixTranspose</span><span lang=EN-US>( &amp;mtT ,
&amp;mtPrj );</span></p>

<p class=MsoNormal><span lang=EN-US>m_pDev-&gt;</span><span lang=EN-US
style='color:#880000'>SetVertexShaderConstantF</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>8</span><span lang=EN-US>, (</span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>*)&amp;mtT , </span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=485 height=204
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image010.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;SetVertexShaderConstantF()</span>함수의 인덱스와
상수 레지스터 관계<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><a href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_04_transform.zip">s0v_04_transform.zip</a></span>은
정점의 월드 변환<span lang=EN-US>, </span>뷰 변환<span lang=EN-US>, </span>정규 변환을 저 수준으로 구현한
예제 입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=244 height=183
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image011.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>정점의 변환<span lang=EN-US>: <a
href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_04_transform.zip">s0v_04_transform.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>2.5 </span><span
style='font-size:14.0pt'>정점 쉐이더 가상 머신<span lang=EN-US>(Vertex Shader Virtual
Machine)</span></span></p>

<p class=MsoNormal>쉐이더가 익숙해지기 위해서 정점 쉐이더의 레이아웃을 알아보았고 정점의 변환을 연습해보았습니다<span
lang=EN-US>. </span>정신 없이 쉐이더 강의를 진행 했는데 다음 단계를 위해서 차분하게 정점 쉐이더의 구조를 다시 살펴 보도록 합시다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=480 height=335
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image012.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>정점 쉐이더 가상 머신<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>그림은 정점 쉐이더의 가상 머신을 표현한 것입니다<span lang=EN-US>. </span>이 가상 머신은
크게 입력 레지스터<span lang=EN-US>, </span>출력 레지스터<span lang=EN-US>, </span>상수 레지스터<span
lang=EN-US>, </span>임시 레지스터<span lang=EN-US>, </span>그리고 산술과 논리 연산을 담당하는<span
lang=EN-US> ALU</span>로 구성되어 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>보통 마이크로 프로세서 내부에서 처리를 돕기 위해 만들어진 작은 기억 공간을 레지스터라 합니다<span
lang=EN-US>. GPU</span>도 하나의<span lang=EN-US> &quot;</span>처리기<span lang=EN-US>(Processor)&quot;
</span>이므로<span lang=EN-US> GPU </span>내부에서 처리를 보조하는 기억 공간도 레지스터라 부르는 것입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>ALU</span>는<span lang=EN-US> Arithmetic-Logic
Unit</span>로 정점<span lang=EN-US> ALU</span>는 정점 데이터에 대한 산술 연산과 논리 동작을 담당합니다<span
lang=EN-US>. ALU</span>는 기본적인 사칙 연산부터 벡터<span lang=EN-US> * </span>행렬의 연산<span
lang=EN-US>, </span>내적<span lang=EN-US>, </span>제곱근<span lang=EN-US>, </span>승수<span
lang=EN-US>, exp, log </span>등의 수학 함수들과 조건 문 등을 처리할 수 있습니다<span lang=EN-US>. </span>정점
쉐이더 코드를 작성한다는 것을 단순하게 바라본다면 정점<span lang=EN-US> ALU</span>가 처리하는 과정을 순서대로 나열한 것이라
할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>그림을 보면 정점 쉐이더 가상머신의 흐름이 노란색 화살표로 표시되어 있고 입력된 정점 버퍼의 데이터는 입력 레지스터에<span
lang=EN-US> &quot;dcl_&quot; </span>문장에 의해서 정점의 위치<span lang=EN-US>, </span>법선<span
lang=EN-US>, </span>색상<span lang=EN-US>, </span>텍스처 좌표 등등이 각각 분리되어 입력 레지스터<span
lang=EN-US> v0~v15</span>에 적재 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>정점<span lang=EN-US> ALU</span>는 입력 레지스터의 값을 받아서 연산을 하며 필요하다면
상수 레지스터와 임시 레지스터를 사용하기도 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>우리가 정점 쉐이더를 컴파일하고 파이프라인에 적용하게 되면 동작을 바꾸어 볼 수 있는 것은 정점 버퍼와 상수
레지스터뿐이라는 것을 기억해야 합니다<span lang=EN-US>. </span>따라서 다양한 기능을 정점 쉐이더에 적용하려면 많은 변수들을
상수 레지스터로 구성해야 합니다<span lang=EN-US>. </span>이로 인해<span lang=EN-US> GPU </span>내부에서
가장 큰 레지스터를 구성하는 것이 상수 레지스터입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>상수 레지스터의 값은<span lang=EN-US> &quot;def&quot; </span>문장으로 쉐이더
코드 내부에서 지정하거나 아니면 외부에서<span lang=EN-US> SetVertexShaderConstant{F|B|I}() </span>함수로
설정합니다<span lang=EN-US>. </span>같은 레지스터의 값을 지정할 때는<span lang=EN-US>
&quot;def&quot;</span>로 명명한 우선 순위가 쉐이더 내부에서 정한 값이 먼저입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>우리는 연산의 과정에서 일시적으로 값을 저장할 필요가 있습니다<span lang=EN-US>. </span>이
때 임시 레지스터를 이용합니다<span lang=EN-US>. </span>입력 레지스터와 상수 레지스터는 읽기 전용 이지만 임시 레지스터는 읽기<span
lang=EN-US>/</span>쓰기가 가능한 레지스터 이며 임시 레지스터에 값을 설정할 때는<span lang=EN-US>
&quot;mov&quot; </span>명령어를 이용해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>정점에 관한 모든 처리를 끝냈으면 출력 레지스터에 결과를 저장해야 합니다<span lang=EN-US>. </span>출력
레지스터는 소문자<span lang=EN-US> &quot;o&quot;(Out)</span>로 시작을 하는 레지스터로 위치<span
lang=EN-US>, </span>색상<span lang=EN-US>, </span>텍스처 좌표<span lang=EN-US>, </span>안개<span
lang=EN-US>, </span>점 크기<span lang=EN-US> 5</span>종류가 있습니다<span lang=EN-US>. </span>출력
레지스터의 위치는<span lang=EN-US> oPos</span>에 저장하고<span lang=EN-US>, </span>색상에 대한<span
lang=EN-US> Diffuse</span>와<span lang=EN-US> Specular </span>값은<span
lang=EN-US> oD0, oD1</span>에 저장합니다<span lang=EN-US>. </span>텍스처 좌표는<span
lang=EN-US> oT0~0T7</span>까지 사용할 수 있습니다<span lang=EN-US>. </span>안개는<span
lang=EN-US> oFog, Point</span>의 크기는<span lang=EN-US> oPts</span>에 저장합니다<span
lang=EN-US>. </span>때로는 픽셀 쉐이더에서 정점 쉐이더의 입력 값 또는 결과 값을 사용하고자 할 때가 있습니다<span
lang=EN-US>. </span>프로그래머들은 이 경우에 출력 레지스터 중에서 텍스처 좌표를 저장하는<span lang=EN-US>
oT0~0T7</span>을 사용하며 끝 번호<span lang=EN-US>(oT7)</span>부터 주로 이용합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl_position</span><span lang=EN-US>&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>v0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 위치</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl_normal</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>v1</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 법선</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mov</span><span lang=EN-US>&nbsp; oT7, </span><span
lang=EN-US style='color:blue'>v0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 위치를<span
lang=EN-US> 0T7</span>에 저장</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mov</span><span lang=EN-US>&nbsp; oT6, </span><span
lang=EN-US style='color:blue'>v1</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 법선 벡터를<span
lang=EN-US> 0T6</span>에 저장</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=238 height=183
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image013.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>상수 레지스터<span lang=EN-US>, </span>임시
레지스터<span lang=EN-US>, </span>출력 레지스터 사용 예<span lang=EN-US>. <a
href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_05_const.zip">s0v_05_const.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>GPU </span>레지스터의 크기는<span lang=EN-US> float
* 4</span>로 구성되어 있습니다<span lang=EN-US>. </span>또한 하나의 레지스터는<span lang=EN-US> x,
y, z, w </span>와<span lang=EN-US> r, g, b, a</span>를 구분하지 않고<span lang=EN-US>
x, y, z, w </span>순서 또는<span lang=EN-US> r, g, b, a </span>순으로 저장 됩니다<span
lang=EN-US>. </span>이것은 색상도 벡터에서 적용되는 연산이 가능하며 또한 벡터도 색상으로 출력할 수 있다는 의미도 됩니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>쉐이더는 각 버전 마다 전체 명령에 대한 제한이 있습니다<span lang=EN-US>. </span>따라서
필요한 명령어 이외의 쉐이더 코드는<span lang=EN-US> GPU</span>의 불필요한 동작을 지시하는 것이기 때문에 쉐이더 작성에서
한 줄이라도 명령문을 줄이는 것이 좋습니다<span lang=EN-US>. </span><span lang=EN-US><a
href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_05_const.zip">s0v_05_const.zip</a></span>의<span lang=EN-US>
&quot;data/ shader.vsh&quot; </span>은 강의를 목적으로 작성된 것이므로 이렇게 작성하는 것은 좋지 않으며 가급적이면
필요한 부분만 남겨 놓거나 줄여서 사용하는 것이 바람직합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>지금까지 정점의 변환과 색상을 가지고 프로그램을 작성해 보았는데 텍스처<span lang=EN-US>, </span>조명등을
살펴보겠습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>2.6 </span><span
style='font-size:14.0pt'>텍스처 적용</span></p>

<p class=MsoNormal>텍스처에 관련된 중심 내용은 픽셀 쉐이더에 있습니다<span lang=EN-US>. </span>보통 정점 쉐이더에서
텍스처 적용은 단순히 좌표 전달 정도의 용도로 활용 되는 것이 대부분입니다<span lang=EN-US>. </span>이 경우에 쉐이더 코드는
다음과 같이 작성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>1. </span>정점의 텍스처 좌표에 대해서<span lang=EN-US>
&quot;dcl_texcoord&quot;</span>로 입력 레지스터의 텍스처 좌표를 설정한다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>2. </span>필요에 따라 텍스처 좌표를 변환한다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>3. </span>출력 레지스터<span lang=EN-US> oT0~0T7</span>에
복사한다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>입력 레지스터에 대한 정점의 텍스처 좌표 설정은 다음 예제와 같이<span lang=EN-US>
dcl_texcoord </span>명령어로 설정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>dcl_texcoord</span><span
lang=EN-US>&nbsp;&nbsp; </span><span lang=EN-US style='color:blue'>v3</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>입력 텍스처 좌표는 총<span lang=EN-US> 8</span>개까지 설정이 가능합니다<span
lang=EN-US>. </span>여러 개의 텍스처 좌표를 입력 레지스터에 설정할 때는<span lang=EN-US>
dcl_texcoord0~ dcltexcoord7</span>을 사용합니다<span lang=EN-US>. dcl_texcoord</span>는<span
lang=EN-US> dcl_texcoord0</span>과 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>텍스처 좌표도 위치이므로 정점의 위치와 같이 변환<span lang=EN-US>(Transform)</span>을
할 수 있습니다<span lang=EN-US>. </span>여기서는 텍스처 좌표의 변환이 없다고 가정하고 최종 단계인 출력 레지스터에 직접 복사하도록
합시다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#A000A0'>mov</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>oT0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:blue'>v3</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>oT0</span>는<span lang=EN-US> Output Texture
0-address coordinate</span>를 의미하며<span lang=EN-US> DirectX</span>는 총<span
lang=EN-US> 8</span>장의 멀티 텍스처를 하나의 그래픽 파이프라인에서 사용이 가능하므로 사용자는<span lang=EN-US>
oT0 ~oT7</span>까지 출력 레지스터에 복사를 할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US><a href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_06_tex.zip">s0v_06_tex.zip</a></span>와
<span lang=EN-US><a href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_06_tex_earth.zip">s0v_06_tex_earth.zip</a></span>의
<span lang=EN-US>&quot;data/shader.vsh&quot;</span>는 은 단순히 텍스처 좌표를 출력 레지스터로 복사하는
예제입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image014.gif">&nbsp;<img border=0 width=242 height=181
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image015.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>텍스처 출력<span lang=EN-US>. <a
href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_06_tex.zip">s0v_06_tex.zip</a>, <a href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_06_tex_earth.zip">s0v_06_tex_earth.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>반사 또는 굴절에 대한 환경 매핑<span lang=EN-US>(Environment Mapping)</span>은
정점의 좌표와 법선 벡터를 텍스처 좌표로 전환하는 것입니다<span lang=EN-US>. </span>이 내용은<span
lang=EN-US> 3D </span>기초 시간에 약간의 복잡한 과정을 거쳐 살펴보았는데 환경 매핑은 쉐이더를 사용하면 쉽게 구현할 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>반사라는 것은 다음과 같이 주어진 그림에서 붉은 색 화살표의 텍스처 좌표를 설정하는 것이고<span
lang=EN-US>, </span>이 붉은 색 화살표는 정점의 법선 벡터를 이용하면 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>또한 반사는 카메라의 위치에 의해 결정되기 때문에 정점의 법선 벡터를 카메라 공간으로 변환하면 카메라의 움직임에
대해서도 반사효과를 만들어 낼 수 있습니다<span lang=EN-US>. </span>이것을 수식으로 정리하면 다음과 같습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=199 valign=top style='width:149.4pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=EN-US><img border=0 width=180 height=181
  src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image016.gif"></span></p>
  </td>
  <td width=336 style='width:252.0pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal>텍스처 좌표<span lang=EN-US>' = </span>정점의 법선 벡터<span
  lang=EN-US> * </span>뷰 행렬</p>
  <p class=MsoNormal>텍스처 좌표<span lang=EN-US>.x =&nbsp; </span>텍스처 좌표<span
  lang=EN-US>'.x * 0.5 + 0.5 </span></p>
  <p class=MsoNormal>텍스처 좌표<span lang=EN-US>.y = -</span>텍스처 좌표<span
  lang=EN-US>'.y * 0.5 + 0.5</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>텍스처 좌표에<span lang=EN-US> 0.5</span>를 곱하고 더한 것은 법선 벡터의 범위가<span
lang=EN-US> [-1, 1]</span>이기 때문에 텍스처 중심으로 좌표를<span lang=EN-US> [0, 1] </span>범위로
만들기 위해서 입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>이 수식을 쉐이더로 구현하면 다음과 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#define </span><span lang=EN-US style='color:#A000A0'>Nor</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; r0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#define </span><span lang=EN-US style='color:#A000A0'>Tex</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; r1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>def</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; c32, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>4</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>5</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl_normal</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>v1</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점의 법선 벡터 레지스터
선언</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>m3x3</span><span lang=EN-US> Nor, </span><span
lang=EN-US style='color:blue'>v1</span><span lang=EN-US>,&nbsp; </span><span
lang=EN-US style='color:blue'>c4</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>법선 벡터의 카메라 공간
변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mov</span><span lang=EN-US> Tex.xyz, Nor.xyz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>변환된 법선 벡터를 텍스처
좌표에 복사</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mov</span><span lang=EN-US> Tex.w, c32.w&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>텍스처 좌표의<span
lang=EN-US> w </span>값 설정</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mov</span><span lang=EN-US> Tex.y, -Tex.y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// y </span><span style='color:green'>좌표를 반전시킴</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// Tex = Tex * 0.4F + 0.5F</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mad</span><span lang=EN-US> Tex, Tex, c32.x, c32.y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>텍스처의 중심으로 이동과
범위<span lang=EN-US>[0,1]</span>로 설정</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#A000A0'>mov</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>oT0</span><span
lang=EN-US>, Tex</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>저 수준 쉐이더에서는 전처리 문이 지원이 되며<span lang=EN-US>
&quot;#define&quot; </span>키워드로 매크로를 정의할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>카메라 움직임에 대해서 반사 효과가 적용되어야 하기 때문에 정점의 법선 벡터를 뷰 행렬에 곱합니다<span
lang=EN-US>. </span>이 때 법선 벡터의 크기는 변하지 않아야 하므로 회전 변환만 적용시키기 위해서<span
lang=EN-US> m3x3</span>을 사용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>법선 벡터가 <span lang=EN-US>mad</span>를 이용해서 텍스처 중심 좌표<span
lang=EN-US> (0.5, 0.5)</span>에서<span lang=EN-US> [0, 1] </span>범위로 이동하는 계산을 한 번에
처리하기 위해서<span lang=EN-US> y </span>값을 반전시켜 놓습니다<span lang=EN-US>. mad </span>명령어는
다음과 같이 두 변수의 곱에 세 번째 변수를 합한 값입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0
 style='border-collapse:collapse'>
 <tr>
  <td width=151 style='width:4.0cm;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=PT-BR>mad r3, r0, r1, r2</span></p>
  </td>
  <td width=28 style='width:20.8pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal>≡</p>
  </td>
  <td width=212 style='width:159.2pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=PT-BR>r3.x&nbsp; = r0.x * r1.x&nbsp; + r2.x;</span></p>
  <p class=MsoNormal><span lang=PT-BR>r3.y&nbsp; = r0.y * r1.y&nbsp; + r2.y;</span></p>
  <p class=MsoNormal><span lang=PT-BR>r3.z&nbsp; = r0.z * r1.z&nbsp; + r2.z;</span></p>
  <p class=MsoNormal><span lang=PT-BR>r3.w = r0.w * r1.w + r2.w;</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal>따라서<span lang=PT-BR> &quot;mad Tex, Tex, c32.x, c32.y&quot;</span>는
다음과 같은 의미이며 여기서<span lang=EN-US> 0.5F </span>대신<span lang=EN-US> 0.4F</span>를 사용한
것은 환경 매핑의 경계에서 해상도가 낮기 때문입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal><span lang=PT-BR>Tex.x = Tex.x * 0.4F + 0.5F, Tex.y = Tex.y
* 0.4F + 0.5F, …</span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal>이 내용은 <span lang=EN-US><a href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_06_tex_env.zip">s0v_06_tex_env.zip</a></span>의<span
lang=EN-US> &quot;data/shader.vsh&quot; </span>파일에 구현되어 있습니다<span lang=EN-US>. </span>실행하면
다음과 같은 화면을 볼 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image017.jpg">&nbsp;<img border=0 width=242 height=181
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image018.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>환경 매핑<span lang=EN-US>: <a
href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_06_tex_env.zip">s0v_06_tex_env.zip</a>, </span>정점 위치로 구현된 텍스처 좌표<span
lang=EN-US>: <a href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_06_tex_vtx.zip">s0v_06_tex_vtx.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>3D </span>기초에서 정점 좌표를 텍스처 좌표로 사용한 예도 있었는데 구현이
간단하므로 <span lang=EN-US><a href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_06_tex_vtx.zip">s0v_06_tex_vtx.zip</a> </span>예제를
참고 하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>2.7 Lighting</span></p>

<p class=MsoNormal>지금까지 정점 쉐이더에서 변환<span lang=EN-US>, </span>색상<span
lang=EN-US>, </span>텍스처 좌표 설정 등을 살펴 보았습니다<span lang=EN-US>. </span>정점 쉐이더에서 가장 비중이
있는 영역은 조명<span lang=EN-US>(Lighting) </span>입니다<span lang=EN-US>. </span>특히<span
lang=EN-US>, </span>조명 원리를 잘 알고 있으면<span lang=EN-US> NPR(Non Photo-realistic
Rendering)</span>의 대표인<span lang=EN-US> Toon(Cartoon) Shading</span>을 쉽게 구현할 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>조명 효과를 구현하기 위한 모델은 여러 가지가 있습니다<span lang=EN-US>. </span>이 중에서
우리는<span lang=EN-US> 3D </span>기초 시간에 다루었던<span lang=EN-US> Lambert </span>확산과<span
lang=EN-US> Phone </span>반사를 각각 쉐이더로 구현해 보겠습니다<span lang=EN-US>. </span>다음으로<span
lang=EN-US> Phong </span>반사를 개선한<span lang=EN-US> Blinn-Phong </span>반사를 알아보고<span
lang=EN-US> Lambert </span>확산과<span lang=EN-US> Blinn-Phong </span>반사를 동시에 렌더링에
적용해 보도록 하겠습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>2.7.1 Lambert </span><span
style='font-size:12.0pt'>확산</span></p>

<p class=MsoNormal><span lang=EN-US>Lambert </span>확산은 그림과 같이 정점의 법선 벡터와 빛의 방향 벡터의
내적을 반사의 세기<span lang=EN-US>(Intensity)</span>로 사용하는 것입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=456 height=204
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image019.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Lambert </span>확산<span lang=EN-US>(</span>반사<span
lang=EN-US>)</span>의 세기<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>렌더링 오브젝트는 월드 변환할 수 있습니다<span lang=EN-US>. </span>월드 변환에서 법선 벡터는
회전만 적용해야 합니다<span lang=EN-US>. </span>회전을 법선벡터에 적용하려면 월드 행렬이 크기 변환이 없는 경우에 대해서<span
lang=EN-US> &quot;m3x3&quot;</span>을 이용합니다<span lang=EN-US> m3x3</span>은 주어진 행렬의<span
lang=EN-US> 3</span>행<span lang=EN-US> 3</span>열만 연산에 적용됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>월드 변환을 하는 오브젝트에 대한 반사의 세기를 쉐이더 코드로 작성하면 다음과 같습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#define </span><span lang=EN-US style='color:#A000A0'>Nor</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; r0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#define </span><span lang=EN-US style='color:#A000A0'>Lgt</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp; -c8</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>vs_1_1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl_normal</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>v1</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 법선 벡터를 입력
레지스터<span lang=EN-US> v1</span>에 선언</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#A000A0'>m3x3</span><span
lang=EN-US> </span><span lang=EN-US>Nor</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>v1</span><span lang=EN-US>,&nbsp; </span><span
lang=EN-US style='color:blue'>c4</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>법선 벡터는 회전만 적용</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#A000A0'>dp3</span><span
lang=EN-US>&nbsp; r1.w, Nor, Lgt&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// Light </span><span style='color:green'>방향과 내적으로 정점의 밝기를 설정</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>dp3</span>는<span lang=EN-US> Dot Product(</span>내적<span
lang=EN-US>)</span>으로<span lang=EN-US> &quot;dp&quot; </span>다음의 숫자는 차원을 나타냅니다<span
lang=EN-US>. 3</span>이면<span lang=EN-US> xyz</span>만 수행하고<span lang=EN-US> 4</span>면<span
lang=EN-US> xyzw </span>성분에 대해서 내적을 구합니다<span lang=EN-US>. </span>만약<span
lang=EN-US> &quot;dp3 r2, r0, r1&quot;</span>와 같이 결과를 저장하는 장소를 명시하지 않으면<span
lang=EN-US> dp3</span>는<span lang=EN-US> r2</span>의<span lang=EN-US> xyz </span>성분에
같은 내적 값을 기록합니다<span lang=EN-US>. </span>앞의 코드는 내적의 결과를<span lang=EN-US> r1.w</span>에
저장하고 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>반사의 세기<span lang=EN-US> I</span>는 내적에 의해 범위가<span
lang=EN-US> [-1, 1] </span>가 됩니다<span lang=EN-US>. </span>그런데 밝기는<span
lang=EN-US> (-)</span>가 없으므로<span lang=EN-US> 0</span>보다 작으면<span lang=EN-US> 0</span>으로
만드는<span lang=EN-US> Saturation</span>을 사용하거나 아니면 전체 밝기에<span lang=EN-US> 1</span>을
더한 다음 다시<span lang=EN-US> 0.5</span>를 곱해서<span lang=EN-US> [0, 1] </span>범위로 조정할
수 있습니다<span lang=EN-US>. </span>여기서 전체 밝기에<span lang=EN-US> 1</span>을 더하고<span
lang=EN-US> 0.5</span>를 곱하는 것을 적용해 봅시다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&quot;I = (I + 1)/2 &quot;</span>에 대해서 쉐이더를
사용하면<span lang=EN-US> add</span>와<span lang=EN-US> mul</span>연산이 필요합니다<span
lang=EN-US>. </span>그런데<span lang=EN-US> mad</span>를 사용하면 한 번에 처리가 됩니다<span
lang=EN-US>. &quot;I = (I + 1)/2&quot;</span>는<span lang=EN-US> &quot;I * 0.5 +
0.5&quot;</span>와 같으므로 다음과 같이<span lang=EN-US> mad</span>를 이용해서 쉐이더 코드를 작성합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>def </span><span
lang=EN-US>c24, </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>5</span><span lang=EN-US>,
</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'> 0</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=PT-BR style='color:#A000A0'>mad&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR>r1, r1.w, c24.y, c24.y</span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal>반사의 세기를 계산했습니다<span lang=PT-BR>. </span>만약 광원의 색상이 있으면 이 값을 반사의
세기에 곱한 후에 출력 레지스터<span lang=PT-BR> 0D0</span>에 복사합니다<span lang=PT-BR>.</span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>mov&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=PT-BR>r1.w,
c24.w</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>mul&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=PT-BR
style='color:blue'>oD0</span><span lang=PT-BR>, r1, </span><span lang=PT-BR
style='color:blue'>c10</span><span lang=PT-BR>&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// </span><span style='color:green'>최종</span><span
style='color:green'> </span><span style='color:green'>색상</span><span
lang=PT-BR style='color:green'> = Lambert </span><span style='color:green'>반사</span><span
lang=PT-BR style='color:green'> * </span><span style='color:green'>빛의</span><span
style='color:green'> </span><span style='color:green'>색상</span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=240 height=180
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image020.jpg"></span></p>

<p class=MsoNormal><span lang=PT-BR>&lt;Lambert </span>확산<span lang=PT-BR>. <a
href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_07_1lambert.zip">s0v_07_1lambert.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal><span lang=PT-BR style='font-size:12.0pt'>2.7.2 Phong </span><span
style='font-size:12.0pt'>반사</span></p>

<p class=MsoNormal>퐁<span lang=PT-BR>(Phong) </span>반사는 렌더링 오브젝트의 정 반사<span
lang=EN-US>(Specular) </span>효과를 표현한 조명 모델입니다<span lang=EN-US>. </span>퐁 반사의 세기는
정점에서 카메라의 위치에 대한 시선 벡터와 반사 벡터의 내적에 멱승 <span lang=EN-US>(Power)</span>을 적용해서 구합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>렌더링 오브젝트는 크기<span lang=EN-US>, </span>회전<span lang=EN-US>, </span>이동에
대한 월드 변환이 적용되므로 시선 벡터를 구하기 전에 먼저 정점의 위치에 대해서 월드 변환을 적용하며<span lang=EN-US>, </span>법선
벡터는<span lang=EN-US> Lambert </span>확산에서처럼 회전만 적용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=576 height=230
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image021.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>퐁 반사 모델<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>반사 벡터는 빛의 방향 벡터와 정점의 법선 벡터를 이용해서 구합니다<span lang=EN-US>. </span>반사
벡터를 빠르게 구하는 방법은 먼저 법선 벡터와 빛의 방향 벡터를 이용해서 법선 벡터 방향으로 <span lang=EN-US><sub><img
border=0 width=51 height=25 src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image022.gif"></sub></span>를
만듭니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>반사 벡터 <span lang=EN-US><sub><img border=0 width=17
height=21 src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image023.gif"></sub></span>과 <span
lang=EN-US><sub><img border=0 width=14 height=21
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image024.gif"></sub></span>을 더하면 <span lang=EN-US><sub><img
border=0 width=71 height=25 src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image025.gif"></sub></span>이
되므로 <span lang=EN-US><sub><img border=0 width=17 height=21
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image023.gif"></sub></span>을 쉽게 구할 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=324 height=139
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image026.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>반사 벡터 계산<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=290 height=25
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image027.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>퐁 반사를 저 수준 쉐이더 언어로 직접 작성하는 것은 쉬운 일이 아닙니다<span lang=EN-US>. </span>좀
더 편리한 방법은 다음과 같은 의사<span lang=EN-US>(Pseudo) </span>코드를 먼저 작성하고 이것을 쉐이더 언어로 변경하는
것입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>변환 위치<span lang=EN-US> = </span>정점 위치<span lang=EN-US> * </span>월드
행렬</i></p>

<p class=MsoNormal><i>변환 법선<span lang=EN-US> = </span>정점 법선<span lang=EN-US> * </span>월드
행렬의 회전 행렬</i></p>

<p class=MsoNormal><i>시선 벡터<span lang=EN-US> = normalize(</span>카메라 위치<span
lang=EN-US> - </span>변환 위치<span lang=EN-US>)</span></i></p>

<p class=MsoNormal><i>반사 벡터<span lang=EN-US> = 2 * dot(</span>빛의 방향<span
lang=EN-US>, </span>변환 법선<span lang=EN-US>) * </span>변환 법선<span lang=EN-US> - </span>빛의
방향</i></p>

<p class=MsoNormal><i>퐁 반사의 세기<span lang=EN-US> = dot(</span>시선 벡터<span
lang=EN-US>, </span>반사 벡터<span lang=EN-US>)^Power</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>쉐이더 코드 작성을 편리하게 하기 위해서 다음과 같이 전 처리문을 사용해서 레지스터 이름을 정의합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>#define </span><span lang=PT-BR style='color:#A000A0'>Pos</span><span
lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp; r0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>#define </span><span lang=PT-BR style='color:#A000A0'>Nor</span><span
lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp; r1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>#define </span><span lang=PT-BR style='color:#A000A0'>Eye</span><span
lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp; r2</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>#define </span><span lang=PT-BR style='color:#A000A0'>Rfc</span><span
lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp; r3</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>#define </span><span lang=PT-BR style='color:#A000A0'>Phn</span><span
lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp; r4</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>#define </span><span lang=PT-BR style='color:#A000A0'>Lgt</span><span
lang=PT-BR>&nbsp;&nbsp;&nbsp; -c8</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>#define </span><span lang=PT-BR style='color:#A000A0'>Cam</span><span
lang=PT-BR>&nbsp;&nbsp;&nbsp; c16</span></p>

<p class=MsoNormal><span lang=PT-BR style='color:blue'>#define </span><span
lang=PT-BR style='color:#A000A0'>Pow&nbsp;&nbsp;&nbsp; </span><span lang=PT-BR>c16.w</span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>'</span>변환 위치<span lang=EN-US>'</span><span
lang=EN-US> </span>월드 변환 행렬을 그대로 적용하면 되지만<span lang=PT-BR> '</span>변환 법선<span
lang=PT-BR>'</span>은 회전만 적용해야 합니다<span lang=PT-BR>. </span>만약 크기 변환 행렬이 적용 안된 월드
변환 행렬이라면 <span lang=PT-BR>'</span>변환 법선<span lang=PT-BR>'</span>은 회전만 적용하면 되므로<span
lang=PT-BR> m3x3</span>으로<span lang=PT-BR> '</span>변환 법선<span lang=PT-BR>'</span>을
구할 수 있습니다<span lang=PT-BR>. </span>다음은<span lang=PT-BR> '</span>변환 위치<span
lang=PT-BR>', '</span>변환 법선<span lang=PT-BR>'</span>을 구하는 쉐이더 코드입니다<span
lang=PT-BR>.</span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>dcl_position</span><span lang=PT-BR> &nbsp; </span><span
lang=PT-BR style='color:blue'>v0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>dcl_normal</span><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>v1</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>m4x4</span><span lang=PT-BR> Pos, </span><span
lang=PT-BR style='color:blue'>v0</span><span lang=PT-BR>,&nbsp; </span><span
lang=PT-BR style='color:blue'>c4</span><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// </span><span style='color:green'>월드</span><span
style='color:green'> </span><span style='color:green'>변환</span></p>

<p class=MsoNormal><span lang=PT-BR style='color:#A000A0'>m3x3</span><span
lang=PT-BR> Nor, </span><span lang=PT-BR style='color:blue'>v1</span><span
lang=PT-BR>,&nbsp; </span><span lang=PT-BR style='color:blue'>c4</span><span
lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// </span><span style='color:green'>법선</span><span
style='color:green'> </span><span style='color:green'>벡터는</span><span
style='color:green'> </span><span style='color:green'>회전만</span><span
style='color:green'> </span><span style='color:green'>적용</span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal>시선 벡터는<span lang=PT-BR> normalize(</span>카메라의 위치<span
lang=PT-BR> - </span>변환 위치<span lang=PT-BR>) </span>입니다<span lang=PT-BR>. </span>먼저
카메라의 위치에서 변환 위치를 뺍니다<span lang=PT-BR>.</span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>sub</span><span lang=PT-BR> Eye, Cam, Pos</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>시선 벡터를 단위 벡터로 만들어야 하는데 일반 벡터를 단위
벡터로 만드는 방법은 자신의 크기로 나누는 것입니다<span lang=PT-BR>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><sub><img
border=0 width=51 height=44 src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image028.gif"></sub></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>저 수준 쉐이더에서<span lang=PT-BR> rsq</span>는
입력된 <span lang=PT-BR>t</span>의 크기의 역수 <span lang=EN-US><sub><img border=0
width=37 height=24 src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image029.gif"></sub>&nbsp;</span>를 반환하는
연산자 입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><sub><img
border=0 width=40 height=21 src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image030.gif"></sub></span>는
<span lang=EN-US><sub><img border=0 width=61 height=24
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image031.gif"></sub></span>와 동등 하므로 먼저 시선 벡터를<span
lang=EN-US> dp3</span>로 내적을 구하고<span lang=EN-US> rsq</span>를 사용하면<span
lang=EN-US> 1/(</span>벡터 크기<span lang=EN-US>)</span>와 동등해집니다<span lang=EN-US>. </span>이
값을 다시 시선 벡터에 곱하면 시선 벡터가 단위 벡터가 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>dp3</span><span lang=EN-US> Eye.w, Eye, Eye</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>rsq</span><span lang=PT-BR> Eye.w, Eye.w</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>mul</span><span lang=PT-BR> Eye.xyz, Eye.xyz, Eye.www</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal><i><span lang=EN-US>&quot;</span>반사 벡터<span lang=EN-US> = 2
* dot(</span>빛의 방향<span lang=EN-US>, </span>변환 법선<span lang=EN-US>) * </span>변환
법선<span lang=EN-US> - </span>빛의 방향<span lang=EN-US>&quot;</span></i><span
lang=EN-US> </span>를 구하기 위해서 변환 법선과 빛의 방향 벡터의 내적을 먼저 구합니다<span lang=PT-BR>. </span>내적
값에<span lang=PT-BR> 2</span>를 곱해야 하는데 같은 내적 값을<span lang=PT-BR> add</span>를 하면<span
lang=PT-BR> 2</span>를 곱한 결과와 동일합니다<span lang=PT-BR>. </span>다시 변환 법선 벡터를 곱한 다음 빛의
방향 벡터를 빼주면 반사 벡터를 구하게 됩니다<span lang=PT-BR>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>dp3</span><span lang=EN-US> Rfc.w, Nor, Lgt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// dot(N, L)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>add</span><span lang=EN-US> Rfc.w, Rfc.w, Rfc.w&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// * 2</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>mul</span><span lang=PT-BR> Rfc.xyz, Nor, Rfc.www&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// * N</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>sub</span><span lang=PT-BR> Rfc, Rfc, Lgt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// - L</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>시선 벡터<span lang=PT-BR>, </span>반사
벡터를 구했으니 퐁 반사의 세기를 구할 수 있습니다<span lang=PT-BR>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>dp3</span><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp; Phn.w,
Eye, Rfc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// dot(E, R)</span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal>퐁 반사의 세기도 내적이므로<span lang=EN-US> Lambert </span>때와 마찬가지로<span
lang=EN-US> [0, 1] </span>범위로 조정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>def</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:blue'>c24</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>, .</span><span lang=EN-US style='color:red'>5</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>0</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>,
</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>add</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; Phn.w,
Phn.w, c24.x&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>//
limit [0, 1]</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR style='color:#A000A0'>mul</span><span
lang=FR>&nbsp;&nbsp;&nbsp;&nbsp; Phn.w, Phn.w, c24.y</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>마지막으로 멱승<span lang=FR>(Power)</span>을
적용합니다<span lang=FR>. </span>쉐이더<span lang=FR> 2.0 </span>이후에는<span lang=FR> pow
</span>연산자가 있지만<span lang=FR> 1.1</span>은 없기 때문에 다음과 같은 수식을 <span lang=FR>exp</span>와<span
lang=FR> log </span>함수로 만듭니다<span lang=FR>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><sub><img
border=0 width=406 height=27 src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image032.gif"></sub></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>B </span>대신 외부에서<span
lang=FR> Specular</span>의<span lang=FR> Power</span>에 대한 <span lang=FR>Pow </span>변수로
바꾸고 <span lang=FR>A </span>대신 내적을 적용하면</p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>log ( dot(E, R) ) *
Pow </span>가 되어 다음과 같은 쉐이더 코드를 만들 수 있습니다<span lang=FR>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>log</span><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp; Phn.w,
Phn.w</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>mul</span><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp; Phn.w,
Phn.w, Pow</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>exp</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; Phn.w,
Phn.w</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>마지막으로 빛의 색상을 곱하고 퐁 반사의<span
lang=EN-US> w </span>값을<span lang=EN-US> 1</span>로 설정한 다음<span lang=EN-US> oD0 </span>레지스터에
복사합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mul</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; Phn,
c10, Phn.w&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Color = </span><span style='color:green'>퐁 반사
<span lang=EN-US>* </span>빛의 색상</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mov</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; Phn.w,
c24.w&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Color.w = 1.f;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mov</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>oD0</span><span lang=EN-US>, Phn&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Output Diffuse Color</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><img border=0
width=242 height=181 src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image033.jpg"></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&lt;</span>퐁 반사<span
lang=EN-US>: <a href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_07_2phong.zip">s0v_07_2phong.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>2.7.3 Blinn-Phong </span><span
style='font-size:12.0pt'>반사</span></p>

<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 align=left
 style='border-collapse:collapse;margin-left:4.85pt;margin-right:4.85pt'>
 <tr>
  <td width=259 valign=top style='width:194.4pt;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><img
  border=0 width=216 height=163 src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image034.gif"></span></p>
  <p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&lt;</span>거의
  수평으로 입사한 빛의 퐁 반사<span lang=EN-US>&gt;</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='word-break:keep-all'>퐁 반사는 정면으로 반사하는 빛에 대해서 현실 세계를 잘 표현하지만
그림과 같이 거의 수평면으로 입사되는 빛에 대해서 더 넓은 영역의 하이라이트<span lang=EN-US>(Highlight)</span>를 만들고
반사의 경계를 만들어 냅니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'>또한 실 세계에서 거의 수평면으로 입사한 빛은 오히려 더 강한<span
lang=EN-US> Specular</span>를 만들고<span lang=EN-US>, </span>이를 표현하려면 시선 벡터 방향으로 반사
벡터를 좀 더 움직여야 합니다<span lang=EN-US>. </span>이것을 <span lang=EN-US>&quot;off-specular
peak&quot; </span>이라 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Blinn-Phong </span>반사는
퐁 반사 모델을 수정해서 좀 더 현실 세계의 정 반사 효과를 표현한 조명 모델이라 할 수 있습니다<span lang=EN-US>.
Blinn-Phong </span>반사는 다음 그림과 같이 퐁 반사의 반사 벡터 대신<span lang=EN-US> Half </span>벡터를
사용합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><img border=0
width=564 height=193 src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image035.gif"></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&lt;Blinn-Phong
</span>반사 모델<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Half </span>벡터는
시선 벡터와 빛의 방향 벡터의 합으로 다음과 같이 간단하게 계산합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><sub><img
border=0 width=80 height=49 src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image036.gif"></sub></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Blinn-Phong </span>반사
세기를 구하는 과정은 퐁 반사에서 반사 벡터 대신<span lang=EN-US> Half </span>벡터를 구하고<span
lang=EN-US>, Half</span>와 변환된 법선 벡터의 내적을 반사의 세기로 설정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>변환 위치<span lang=EN-US> = </span>정점 위치<span lang=EN-US> * </span>월드
행렬</i></p>

<p class=MsoNormal><i>변환 법선<span lang=EN-US> = </span>정점 법선<span lang=EN-US> * </span>월드
행렬의 회전 행렬</i></p>

<p class=MsoNormal><i>시선 벡터<span lang=EN-US> = normalize(</span>카메라 위치<span
lang=EN-US> - </span>변환 위치<span lang=EN-US>)</span></i></p>

<p class=MsoNormal><i><span lang=EN-US>Half </span>벡터<span lang=EN-US> = normalize(</span>시선
벡터<span lang=EN-US> + </span>빛의 방향 벡터<span lang=EN-US>)</span></i></p>

<p class=MsoNormal style='word-break:keep-all'><i><span lang=EN-US>Blinn-Phong </span>반사
세기<span lang=EN-US> = dot(</span>법선 벡터<span lang=EN-US>, Half </span>벡터<span
lang=EN-US>)^Power</span></i></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>다음은 시선 벡터와 빛의 방향 벡터를 이용해서<span
lang=EN-US> Half</span>를 구하는 쉐이더 코드입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>add</span><span lang=EN-US> Hlf, Eye, Lgt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// H = E + L</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>dp3</span><span lang=EN-US> Hlf.w, Hlf, Hlf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Normalize H</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>rsq</span><span lang=EN-US> Hlf.w, Hlf.w</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mul</span><span lang=EN-US> Hlf.xyz, Hlf.xyz, Hlf.www</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이후 <span lang=EN-US>Blinn-Phong </span>반사 세기를 구하는 내용은 퐁 쉐이딩에서
<span lang=EN-US>Half </span>벡터와 변환된 법선 벡터의 내적만 다르고 나머지는 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>dp3</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; Bln.w,
Hlf, Nor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// dot(H, N)</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>log</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; Bln.w,
Bln.w&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// pow(Blinn, Power)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mul</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; Bln.w,
Bln.w, Pow</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>exp</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; Bln.w,
Bln.w</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mul</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; Bln, </span><span
lang=EN-US style='color:blue'>c10</span><span lang=EN-US>, Bln.w&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Blinn-Phong </span><span style='color:green'>반사<span
lang=EN-US> * </span>빛의 색상</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mov&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US>Bln.w,
c24.w&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Color.w = 1.f;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mov&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:blue'>oD0</span><span lang=EN-US>, Bln&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Output Diffuse Color</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Blinn-Phong </span>반사는
퐁 반사보다 반사의 영역이 넓지만 그림과 같이 거의 수평으로 반사되는 빛에 대해서도 잘 표현 됩니다<span lang=EN-US>. </span>반사
영역을 좁히는 것은<span lang=EN-US> Power </span>값을 증가시키면 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><img border=0
width=242 height=181 src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image037.jpg">&nbsp;<img border=0
width=242 height=181 src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image038.jpg"></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&lt;Blinn-Phong
</span>반사<span lang=EN-US>: <a href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_07_3blinn.zip">s0v_07_3blinn.zip</a>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>2.7.4 Lighting</span></p>

<p class=MsoNormal style='word-break:keep-all'>지금까지 퐁 반사와 퐁 반사를 개선한<span
lang=EN-US> Blinn-Phong </span>반사를 살펴보았습니다<span lang=EN-US>. </span>게임에서는<span
lang=EN-US> Lambert </span>확산과 함께 이 들을 결합해서 조명 효과를 만듭니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><img border=0
width=242 height=181 src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image039.jpg">&nbsp;<img border=0
width=242 height=181 src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image040.jpg"></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&lt;Lambert+Phong:
<a href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_07_4lambert+phong.zip">s0v_07_4lambert+phong.zip</a>,</span></p>

<p class=MsoNormal style='text-indent:20.0pt;word-break:keep-all'><span
lang=EN-US>Lambert+Blinn-Phong: <a href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_07_5lambert+blinn.zip">s0v_07_5lambert+blinn.zip</a>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>이들 조명 효과는 다음과 같은 공식으로 출력 레지스터<span
lang=EN-US> oD0</span>의 값을 설정했습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>출력 색상<span lang=EN-US>(oD0) =
Lambert * </span>정점 색상<span lang=EN-US> + Blinn </span>또는</p>

<p class=MsoNormal style='word-break:keep-all'>출력 색상<span lang=EN-US>(oD0) =
Lambert * </span>정점 색상<span lang=EN-US> * Blinn</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>그런데 이 방법 대로 조명 효과를 만들고 텍스처를 적용하기
위해서 쉐이더 코드를 추가하고<span lang=EN-US>,</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>dcl_color&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; v2</span></p>

<p class=MsoNormal><span lang=EN-US>dcl_texcoord&nbsp;&nbsp; v3</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#A000A0'>mad</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>oD0</span><span
lang=EN-US>, Lmb, </span><span lang=EN-US style='color:blue'>v2</span><span
lang=EN-US>, Bln</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mov</span><span lang=EN-US>&nbsp; </span><span
lang=EN-US style='color:blue'>oT0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>v3</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>화면에 출력하면 조명 효과의<span lang=EN-US>
Specular </span>적용이 우리가 원하는 형태로 되고 있지 않음을 볼 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><img border=0
width=242 height=182 src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image041.jpg"></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&lt;Specular </span>효과
적용이 미미한 예<span lang=EN-US>. <a href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_07_6texture1.zip">s0v_07_6texture1.zip</a>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>이것은 출력 레지스터<span lang=EN-US> oD0</span>가<span
lang=EN-US> Diffuse </span>값을 저장하는 용도로 사용되고<span lang=EN-US>, </span>고정 기능 파이프라인에서
픽셀 처리를 하게 되면 이<span lang=EN-US> oD0</span>의 색상 범위를<span lang=EN-US> [0, 1]</span>로
정규화 해서 사용하기 문입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'>아직까지 우리는 픽셀 쉐이더를 사용하지 않기 때문에 고정 기능
파이프라인에서 이것을 개선하도록 합시다<span lang=EN-US>. </span>먼저 쉐이더 코드를<span lang=EN-US> oD0</span>에는<span
lang=EN-US> Lambert * </span>정점 색상 결과를 출력하고<span lang=EN-US> oD1</span>는<span
lang=EN-US> Blinn </span>또는<span lang=EN-US> Phong </span>반사의<span lang=EN-US>
Specular </span>값을 출력합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=FR style='color:#A000A0'>mul</span><span lang=FR>
</span><span lang=FR style='color:blue'>oD0</span><span lang=EN-US>, Lmb, </span><span
lang=FR style='color:blue'>v2</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=FR style='color:green'>// Output Diffuse: Lambert * Vertex Diffuse</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mov</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>oD1</span><span lang=EN-US>, Bln&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Output Specular: Blinn-Phong Reflectance</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>다중 텍스처 처리<span lang=EN-US>(Multi-Texturing)</span>의
단계에서 색상 혼합 방법을 <span lang=EN-US>D3DTOP_MULTIPLYADD</span>로 정합니다<span
lang=EN-US>. MULTIPLYADD</span>는<span lang=EN-US> Arg0 + Arg1 * Arg2 </span>연산을
수행하기 때문에 색상 인수 <span lang=EN-US>0</span>번은<span lang=EN-US> Specular(oD1)</span>으로
설정하고<span lang=EN-US> Arg1</span>은 텍스처를<span lang=EN-US> Arg2</span>는<span
lang=EN-US> Diffuse(oD0)</span>로 설정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>m_pDev-&gt;</span><span lang=EN-US
style='color:#880000'>SetTextureStageState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DTSS_COLORARG0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DTA_SPECULAR</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>m_pDev-&gt;</span><span lang=EN-US
style='color:#880000'>SetTextureStageState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DTSS_COLORARG1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DTA_TEXTURE</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>m_pDev-&gt;</span><span lang=EN-US
style='color:#880000'>SetTextureStageState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DTSS_COLORARG2</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DTA_DIFFUSE</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetTextureStageState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DTSS_COLOROP</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DTOP_MULTIPLYADD</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><img border=0
width=242 height=182 src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image042.jpg"></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&lt;Specular </span>효과<span
lang=EN-US>. <a href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_07_6texture2.zip">s0v_07_6texture2.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>2.8 Vertex
Blending</span></p>

<p class=MsoNormal>정점 블렌딩<span lang=EN-US>(Vertex Blending)</span>은 정점의 위치에 비중을
추가해서 최종 위치를 구하는 방법으로 대표적인 예가 스키닝<span lang=EN-US>(Skinning)</span>입니다<span
lang=EN-US>. </span>정점 블렌딩은 간단하게 다음과 같이 간단한 공식으로 표현합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=95 height=28
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image043.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>대부분 정점에 행렬이 적용되어 이것을 일반적으로 표현하면 <span lang=EN-US><sub><img
border=0 width=127 height=28 src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image044.gif"></sub>&nbsp;</span>이
되며 모든 <span lang=EN-US><sub><img border=0 width=16 height=23
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image045.gif"></sub></span>가 같고 <span lang=EN-US><sub><img
border=0 width=65 height=27 src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image046.gif"></sub></span>이면
스키닝이 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><sub><img border=0 width=127 height=28
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image044.gif"></sub>&nbsp;</span><span lang=EN-US
style='font-family:Wingdings'>&egrave;</span><span lang=EN-US> <sub><img border=0
width=230 height=28 src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image047.gif"></sub></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>정점 쉐이더를 이용해서 정점 블렌딩을 구현하기 위해서<span lang=EN-US> 3D </span>기초 과정에서
구현했던 태극기 예제의 폴리곤을 이용해 보겠습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>먼저 다음과 같이<span lang=EN-US> 2</span>개의 비중<span lang=EN-US>(Weight)</span>이
있는 정점 구조체를 선언합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>VtxBlend</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DXVECTOR3</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>위치</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>비중<span
lang=EN-US>(Weight)</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>DWORD</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; d;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Diffuse</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; u,
v;&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>텍스처 좌표</span></p>

<p class=MsoNormal style='text-indent:40.0pt;word-break:keep-all'><span
lang=EN-US style='color:blue'>enum</span><span lang=EN-US> {&nbsp; </span><span
lang=EN-US style='color:#A000A0'>FVF</span><span lang=EN-US> = (</span><span
lang=EN-US style='color:#A000A0'>D3DFVF_XYZB1</span><span lang=EN-US> | </span><span
lang=EN-US style='color:#A000A0'>D3DFVF_DIFFUSE</span><span lang=EN-US> | </span><span
lang=EN-US style='color:#A000A0'>D3DFVF_TEX1</span><span lang=EN-US>),};</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 정점 구조체로 만들어진 정점 데이터의 비중을 정점 쉐이더에서 사용하기 위해서 입력 레지스터를 선언해야 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl_blendweight&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:blue'>v1</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>행렬 비중</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>하나의 정점에 두 개의 행렬이 적용된 변환에서 블렌딩 정점의
위치는 다음과 같이 계산 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>블렌딩 정점 위치<span lang=EN-US> = </span>정점 위치<span
lang=EN-US> * </span>행렬<span lang=EN-US>0 * </span>비중<span lang=EN-US> + </span>정점
위치<span lang=EN-US> * </span>행렬<span lang=EN-US>1 * (1 - </span>비중<span
lang=EN-US>)</span></i></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이것을 쉐이더로 표현하면 외부에서 두 개의 월드 행렬을 적용해서 정점의 위치를 각각 저장한 후에 행렬<span
lang=EN-US>0</span>으로 변환된 위치에는<span lang=EN-US> &quot;</span>비중<span
lang=EN-US>(Weight)&quot;</span>을 곱하고<span lang=EN-US> &quot;1-</span>비중<span
lang=EN-US>&quot;</span>을 계산해서 행렬<span lang=EN-US>1</span>으로 변환된 정점에 곱한 다음 둘을 더해서
정점 블렌딩을 구현합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>m4x4</span><span lang=EN-US> r0, </span><span lang=EN-US
style='color:blue'>v0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>c12</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>월드 행렬<span
lang=EN-US> 0</span>에 의한 정점 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>m4x4</span><span lang=EN-US> r1, </span><span lang=EN-US
style='color:blue'>v0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>c16</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>월드 행렬<span
lang=EN-US> 1</span>에 의한 정점 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>mul</span><span lang=PT-BR> r0, r0, </span><span
lang=PT-BR style='color:blue'>v1</span><span lang=PT-BR>.x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// r0 = r0 * weight</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>add</span><span lang=PT-BR> r2, </span><span lang=PT-BR
style='color:blue'>c0</span><span lang=PT-BR>.x, -</span><span lang=PT-BR
style='color:blue'>v1</span><span lang=PT-BR>.x&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// r2.xyzw = 1 - weight</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>mad</span><span lang=PT-BR> r2, r1, r2, r0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// pos = (1-weight)*v1 + v0*weight</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>계산을 빠르게 적용하기 위해<span lang=PT-BR>
mad</span>를 이용했습니다<span lang=PT-BR>. </span>마지막으로 뷰 변환<span lang=PT-BR>, </span>투영
변환을 적용하고 출력 레지스터에 복사합니다<span lang=PT-BR>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>m4x4</span><span lang=EN-US> r0, r2, </span><span
lang=EN-US style='color:blue'>c4</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>뷰 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>m4x4</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>oPos</span><span lang=EN-US>, r0, </span><span lang=EN-US
style='color:blue'>c8</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>투영 변환</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image048.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>정점 블렌딩<span lang=EN-US>: <a
href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_08_vertex_blending.zip">s0v_08_vertex_blending.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>대부분 스키닝은<span lang=EN-US> 4</span>개의 행렬 인덱스를 포함한 정점으로 구현됩니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>VtxBlend</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DXVECTOR3</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; p;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g[</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US>];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:green'>// </span><span style='color:green'>비중<span
lang=EN-US>(Weight)</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>BYTE</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m[</span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>];&nbsp;&nbsp; &nbsp;&nbsp;
</span><span lang=EN-US style='color:green'>// </span><span style='color:green'>행렬의
인덱스</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>enum</span><span lang=EN-US> {&nbsp; </span><span
lang=EN-US style='color:#A000A0'>FVF</span><span lang=EN-US> = (</span><span
lang=EN-US style='color:#A000A0'>D3DFVF_XYZB4</span><span lang=EN-US> | </span><span
lang=EN-US style='color:#A000A0'>D3DFVF_LASTBETA_UBYTE4</span><span lang=EN-US>
|…),&nbsp;&nbsp; };</span></p>

<p class=MsoNormal><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>정점 쉐이더는 비중과 인덱스를 처리하기 위한 입력 레지스터
선언이 필요합니다<span lang=EN-US>. </span>정점 데이터에서 인덱스를 가져와야 하는데 인덱스의 데이터 타입은 정수형입니다<span
lang=EN-US>. </span>정수형 데이터를 저장하려면<span lang=EN-US> &quot;mova&quot;</span>와 같은
명령어를 이용해야 하고 이를 위해서 정점 쉐이더 버전은<span lang=EN-US> 2.0</span>이상이 필요합니다<span
lang=EN-US>. </span>또한 행렬은<span lang=EN-US> 4x4 float</span>형입니다<span
lang=EN-US>. </span>따라서 인덱스에<span lang=EN-US> 4</span>를 곱해야만 외부에서 스키닝에 적용할 행렬 배열을
상수 레지스터에 복사했을 때 이 상수 레지스터에 저장된 행렬 값을 제대로 가져올 수 있게 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>vs_2_0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>def</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>c0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl_position</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>v0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>위치</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl_blendweight</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>v1</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>행렬 비중</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl_blendindices</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>v2</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>행렬 인덱스</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mul</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>v2</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>c0</span><span lang=EN-US>.x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>상수 레지스터의 위치를
정하기 위해 인덱스에<span lang=EN-US> 4</span>를 곱한다<span lang=EN-US>.</span></span></p>

<p class=MsoNormal><span lang=EN-US style='color:#A000A0'>mova</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>a0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:blue'>r0</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>상수 레지스터 위치 저장</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>쉐이더의 레지스터는<span lang=EN-US> [] </span>연산자를 이용해서 데이터를 가져올 수 있습니다<span
lang=EN-US>. </span>상수 레지스터에 복사된 행렬 값을<span lang=EN-US> []</span>연산자로 가져와서 <span
lang=EN-US>4</span>개의 인덱스에 대한 변환을 구현 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>#define </span><span
lang=EN-US style='color:#A000A0'>MATRIX_OFFSET</span><span lang=EN-US>&nbsp; </span><span
lang=EN-US style='color:red'>12</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>m4x4</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>v0</span><span lang=EN-US>, c[</span><span lang=EN-US
style='color:#A000A0'>MATRIX_OFFSET</span><span lang=EN-US> + </span><span
lang=EN-US style='color:blue'>a0</span><span lang=EN-US>.x]</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR style='color:#A000A0'>m4x4</span><span
lang=FR> </span><span lang=FR style='color:blue'>r1</span><span lang=FR>, </span><span
lang=FR style='color:blue'>v0</span><span lang=FR>, c[</span><span lang=FR
style='color:#A000A0'>MATRIX_OFFSET</span><span lang=FR> + </span><span
lang=FR style='color:blue'>a0</span><span lang=FR>.y]</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>m4x4</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r2</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>v0</span><span lang=PT-BR>, c[</span><span lang=PT-BR
style='color:#A000A0'>MATRIX_OFFSET</span><span lang=PT-BR> + </span><span
lang=PT-BR style='color:blue'>a0</span><span lang=PT-BR>.z]</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#A000A0'>m4x4</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>r3</span><span
lang=EN-US>, </span><span lang=EN-US style='color:blue'>v0</span><span
lang=EN-US>, c[</span><span lang=EN-US style='color:#A000A0'>MATRIX_OFFSET</span><span
lang=EN-US> + </span><span lang=EN-US style='color:blue'>a0</span><span
lang=EN-US>.w]</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>모든 비중의 합은<span lang=EN-US> 1</span>입니다<span lang=EN-US>. </span>그런데
정점 구조체의 비중은<span lang=EN-US> &quot;float g[3]&quot;</span>으로 되어 있어서 입력 레지스터는<span
lang=EN-US> 3</span>개의 비중만 전달될 것이므로 입력 레지스터에서 비중을 먼저 복사하고 마지막 비중을<span
lang=EN-US> &quot;1- (v1.x + v1.y + v1.z)&quot;</span>으로 계산합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>def</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:blue'>c0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>4</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>,
</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>mov</span><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>r4</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:blue'>v1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>add</span><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>r4</span><span lang=PT-BR>.w, </span><span
lang=PT-BR style='color:blue'>r4</span><span lang=PT-BR>.x, </span><span
lang=PT-BR style='color:blue'>r4</span><span lang=PT-BR>.y</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>add</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>r4</span><span lang=EN-US>.w, </span><span
lang=EN-US style='color:blue'>r4</span><span lang=EN-US>.w, </span><span
lang=EN-US style='color:blue'>r4</span><span lang=EN-US>.z</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#A000A0'>add</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:blue'>r4</span><span
lang=EN-US>.w, </span><span lang=EN-US style='color:blue'>c0</span><span
lang=EN-US>.w,-</span><span lang=EN-US style='color:blue'>r4</span><span
lang=EN-US>.w</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>변환된 정점의 위치에 각각 비중을 곱하고 이 위치들을 전부 더합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:green'>// </span><span
style='color:green'>변환된 정점의 위치에 각 비중을 곱한다<span lang=EN-US>.</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>mul</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r0</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r0</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r4</span><span lang=PT-BR>.x</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>mul</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r1</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r1</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r4</span><span lang=PT-BR>.y</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>mul</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r2</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r2</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r4</span><span lang=PT-BR>.z</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>mul</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r3</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r3</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r4</span><span lang=PT-BR>.w</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>비중이 곱해진 각 위치를 더한다<span
lang=EN-US>.</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>add</span><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>r0</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:blue'>r0</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:blue'>r1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>add</span><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>r0</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:blue'>r0</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:blue'>r2</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#A000A0'>add</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:blue'>r0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:blue'>r0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:blue'>r3</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>뷰 변환<span lang=EN-US>, </span>투영 변환 행렬을 적용하고 출력 레지스터에 복사하면 스키닝이
완성됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>m4x4</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r1</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>c4</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>뷰 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>m4x4</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>oPos</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>r1</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>c8</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>투영 변환</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=182
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image049.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>정점 쉐이더 스키닝<span lang=EN-US>: <a
href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_08_vertex_skinning.zip">s0v_08_vertex_skinning.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>2.9 </span><span
style='font-size:14.0pt'>안개 효과<span lang=EN-US>(Fog)</span></span></p>

<p class=MsoNormal>정점 쉐이더 중에서 흥미로운 부분이 포그<span lang=EN-US>(Fog) </span>입니다<span
lang=EN-US>. </span>포그는 정점의 위치를 가지고 결정합니다<span lang=EN-US>. </span>고정 기능 파이프라인에서의
포그는 카메라의 거리 또는 카메라의 <span lang=EN-US>z </span>축에 대한 값에 의존하기 때문에 높은 산에 올라가면 구름이 발
밑에 걸리는 높이 포그<span lang=EN-US>(</span><span lang=EN-US>Layered Fog) </span>같은 것들은
표현이 불가능 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>쉐이더는 공식만 정해지면 포그에 대해서 아주 쉽게 구현할 수 있습니다<span lang=EN-US>. </span>예를
들어 고정 기능 파이프라인과 동일한 카메라의<span lang=EN-US> Z </span>축 방향의 거리에 의존하는 선형 포그<span
lang=EN-US>(Linear)</span>의 계수는 다음과 같이 계산합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i><span lang=EN-US>Fog Factor </span><span lang=EN-US>= </span>뷰
변환 후 정점의<span lang=EN-US> z </span>값<span lang=EN-US>/(</span>포그 끝 값 </i><i><span
lang=EN-US>&#8211; </span>포그 시작 값<span lang=EN-US>)</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>'</span>뷰 변환 후의 정점<span lang=EN-US> z</span>값<span
lang=EN-US>'</span>을 사용하는 이유는 뷰 행렬을 월드 변환한 정점에 곱하면 카메라 공간의<span lang=EN-US> z</span>축에
대한 값으로 계산 되기 때문입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>뷰 변환 후 정점<span lang=EN-US> z = dot( (</span>월드 변환 정점<span
lang=EN-US> - </span>카메라 위치<span lang=EN-US>), </span>카메라<span lang=EN-US> z</span>축
벡터<span lang=EN-US>)</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>공식들이 간단해서 어렵지 않게 쉐이더를 작성할 수 있습니다<span lang=EN-US>. </span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl_position</span><span lang=EN-US>&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>v0</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>m4x4</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>v0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>c4</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>뷰 변환 후 정점<span
lang=EN-US> z</span></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>뷰 변환 후의 정점<span lang=EN-US> z</span>를 구했고 다음으로<span
lang=EN-US> Fog Factor</span>를 구합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#define </span><span lang=EN-US style='color:#A000A0'>FogBgn</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>c12</span><span
lang=EN-US>.x&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>포그</span><span style='color:green'> </span><span
style='color:green'>시작</span><span style='color:green'> </span><span
style='color:green'>값</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#define </span><span lang=EN-US style='color:#A000A0'>FogEnd</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>c12</span><span
lang=EN-US>.y&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>// </span><span
style='color:green'>포그</span><span style='color:green'> </span><span
style='color:green'>끝</span><span style='color:green'> </span><span
style='color:green'>값</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#define </span><span lang=EN-US style='color:#A000A0'>FogDsR</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>c12</span><span
lang=EN-US>.w&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>// 1/(</span><span
style='color:green'>포그</span><span style='color:green'> </span><span
style='color:green'>끝</span><span style='color:green'> </span><span
style='color:green'>값</span><span style='color:green'> <span lang=EN-US>- </span></span><span
style='color:green'>포그</span><span style='color:green'> </span><span
style='color:green'>시작</span><span style='color:green'> </span><span
style='color:green'>값</span><span lang=EN-US style='color:green'>)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>sub</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r0</span><span lang=PT-BR>.z, </span><span lang=PT-BR
style='color:#A000A0'>FogEnd</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r0</span><span lang=PT-BR>.z </span><span lang=PT-BR
style='color:green'>// (fog end - distance)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mul</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>.x, </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>.z, </span><span lang=EN-US
style='color:#A000A0'>FogDsR</span><span lang=EN-US> </span><span lang=EN-US
style='color:green'>// Fog Factor = distance/(end - begin)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>Fog Factor</span>가<span
lang=EN-US> [0, 1] </span>범위에 있도록 하기 위해서<span lang=EN-US> min, max </span>를 이용합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>def</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>c14</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>min</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>.x, </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>.x, </span><span lang=EN-US
style='color:blue'>c14</span><span lang=EN-US>.x&nbsp; </span><span lang=EN-US
style='color:green'>// 1 </span><span style='color:green'>보다 큰 값 제거</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>max</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>.x, </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>.x, </span><span lang=EN-US
style='color:blue'>c14</span><span lang=EN-US>.y&nbsp; </span><span lang=EN-US
style='color:green'>// </span><span style='color:green'>음수 값 제거</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>마지막으로<span lang=EN-US> Fog
Factor</span>를 출력 레지스터<span lang=EN-US> oFog</span>에 복사 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#A000A0'>mov</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>oFog</span><span
lang=EN-US>, </span><span lang=EN-US style='color:blue'>r0</span><span
lang=EN-US>.x</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=252 height=189
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image050.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>선형 포그<span lang=EN-US>(Linear
Fog): <a href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_09_fog1_range.zip">s0v_09_fog1_range.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>고정 기능 파이프라인의<span lang=EN-US> Range Fog</span>는 뷰 변환 후의 정점<span
lang=EN-US> z</span>에 의존하는 포그입니다<span lang=EN-US>. </span>높이 포그<span
lang=EN-US>(</span><span lang=EN-US>Layered Fog)</span>는 월드 변환 후의 정점<span
lang=EN-US> y</span>에 대한 포그이기 때문에<span lang=EN-US> Fog Factor </span>공식은 아주 간단합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i><span lang=EN-US>Layered Fog Factor </span><span
lang=EN-US>= </span>월드 변환 후 정점의<span lang=EN-US> y </span>값<span lang=EN-US>/(</span>포그
끝 값 </i><i><span lang=EN-US>&#8211; </span>포그 시작 값<span lang=EN-US>)</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>월드 변환이 없는 정점의 경우에서는<span lang=EN-US> Fog Factor</span>를 쉐이더로
작성하는 것은 어려운 일이 아닙니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#define </span><span lang=EN-US style='color:#A000A0'>FogBgn</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>c12</span><span
lang=EN-US>.x</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#define </span><span lang=EN-US style='color:#A000A0'>FogEnd</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>c12</span><span
lang=EN-US>.y</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE style='color:blue'>#define
</span><span lang=DE style='color:#A000A0'>FogDsR</span><span lang=EN-US> </span><span
lang=DE style='color:blue'>c12</span><span lang=EN-US>.w&nbsp;&nbsp; </span><span
lang=DE style='color:green'>// 1/(FogEnd-FogBgn)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>def</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>c14</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl_position</span><span lang=EN-US>&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>v0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mul</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>.x, </span><span lang=EN-US
style='color:blue'>v0</span><span lang=EN-US>.y, </span><span lang=EN-US
style='color:#A000A0'>FogDsR</span><span lang=EN-US> </span><span lang=EN-US
style='color:green'>// Output FogFactor = height/(end - begin)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>min</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>.x, </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>.x, </span><span lang=EN-US
style='color:blue'>c14</span><span lang=EN-US>.x&nbsp; </span><span lang=EN-US
style='color:green'>// 1 </span><span style='color:green'>보다 큰 값 제거</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>max</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>.x, </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>.x, </span><span lang=EN-US
style='color:blue'>c14</span><span lang=EN-US>.y&nbsp; </span><span lang=EN-US
style='color:green'>// </span><span style='color:green'>음수 값 제거</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#A000A0'>mov</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>oFog</span><span
lang=EN-US>, </span><span lang=EN-US style='color:blue'>r0</span><span
lang=EN-US>.x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>포그 출력 레지스터에 저장</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image051.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>높이 포그<span lang=EN-US>(Layered
Fog): <a href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_09_fog2_height.zip">s0v_09_fog2_height.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>지금까지<span lang=EN-US> Fog Factor</span>를 계산하고 출력 레지스터<span
lang=EN-US> oFog</span>에 복사했습니다<span lang=EN-US>. </span>이런 방식은 렌더링에서 디바이스의 포그를
활성화<span lang=EN-US>(D3DRS_FOGENABLE, TRUE) </span>해야 합니다<span lang=EN-US>. </span>또한
높이 포그는 <span lang=EN-US>D3DRS_-FOGTABLEMODE </span>를 <span lang=EN-US>D3DFOG_NONE</span>으로
설정해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>쉐이더 버전<span lang=EN-US> 3.0 </span>이상에서는<span lang=EN-US>
oFog</span>를 사용할 수 없어서 포그를 직접 구현 해야 합니다<span lang=EN-US>. DXSDK</span>의 도움말을 보면
포그가 적용될 때 고정 기능 파이프라인에서 정점의 최종 색상은 포그 색상<span lang=EN-US>, Fog Factor, </span>조명과
정점의 색상 혼합으로 만들어진<span lang=EN-US> Diffuse </span>값을 선형 보간 형식으로 결정됩니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>정점의 최종 색상<span lang=EN-US> = Fog </span>색상<span
lang=EN-US> * Fog Factor + Diffuse * (1 - Fog Factor)</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>높이 포그의 예제를 수정해서 쉐이더를 적용해 봅시다<span lang=EN-US>. Fog Factor </span>계산을<span
lang=EN-US> mad </span>연산자로 한 번에 처리하기 위해서 공식을 풀어줍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i><span lang=EN-US>Fog Factor = (</span>포그 끝 값<span
lang=EN-US> - </span>월드 변환 후 정점의<span lang=EN-US> y </span>값<span lang=EN-US>)/(</span>포그
끝 값 </i><i><span lang=EN-US>&#8211; </span>포그 시작 값<span lang=EN-US>)</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i><span
lang=EN-US>= (</span>포그 끝 값<span lang=EN-US>) /(</span>포그 끝 값 </i><i><span
lang=EN-US>&#8211; </span>포그 시작 값<span lang=EN-US>)</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;</span><i><span
lang=EN-US>- </span>월드 변환 후 정점의<span lang=EN-US> y </span>값<span lang=EN-US>/(</span>포그
끝 값 </i><i><span lang=EN-US>&#8211; </span>포그 시작 값<span lang=EN-US>)</span></i></p>

<p class=MsoNormal><i><span lang=EN-US>Fog Factor= - </span>월드 변환 후 정점의<span
lang=EN-US> y </span>값<span lang=EN-US>/(</span>포그 끝 값 </i><i><span lang=EN-US>&#8211;
</span>포그 시작 값<span lang=EN-US>)</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><i><span
lang=EN-US>+ </span>포그 끝 값<span lang=EN-US> /(</span>포그 끝 값 </i><i><span
lang=EN-US>&#8211; </span>포그 시작 값<span lang=EN-US>)</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>외부에서 포그 끝 값<span lang=EN-US> /(</span>포그 끝 값 <span
lang=EN-US>&#8211; </span>포그 시작 값<span lang=EN-US>)</span>를 계산한다고 가정하고 다음과 같은 매크로를 정의
합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=DE style='color:blue'>#define </span><span
lang=DE style='color:#A000A0'>FogFct</span><span lang=EN-US> </span><span
lang=DE style='color:blue'>c12</span><span lang=EN-US>.</span><span lang=DE>z</span><span
lang=EN-US>&nbsp;&nbsp; </span><span lang=DE style='color:green'>//&nbsp;
FogEnd/(FogEnd - Begin)</span></p>

<p class=MsoNormal><span lang=DE style='color:blue'>#define </span><span
lang=DE style='color:#A000A0'>FogDsR</span><span lang=EN-US> </span><span
lang=DE style='color:blue'>c12</span><span lang=EN-US>.</span><span lang=DE>w</span><span
lang=EN-US>&nbsp;&nbsp; </span><span lang=DE style='color:green'>// 1.0/(FogEnd-FogBgn)</span></p>

<p class=MsoNormal><span lang=DE>&nbsp;</span></p>

<p class=MsoNormal>이렇게 정의된 매크로가 있으면<span lang=DE> y </span>값에 의존하는 높이 포그의<span
lang=DE> Fog Factor r0.x</span>는<span lang=DE> mad</span>로 한 번에 계산 됩니다<span
lang=DE>.</span></p>

<p class=MsoNormal><span lang=DE>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#A000A0'>mad</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:blue'>r0</span><span
lang=EN-US>.x, -</span><span lang=EN-US style='color:blue'>v0</span><span
lang=EN-US>.y, </span><span lang=EN-US style='color:#A000A0'>FogDsR</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>FogFct</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>min, max </span>연산자로<span lang=EN-US> [0,
1] </span>범위로 만들고 정점의 최종 색상을 선형 보간 형식으로 만들고 출력 레지스터<span lang=EN-US> oD0</span>에
복사 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>mul</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r1</span><span lang=EN-US>, </span><span lang=PT-BR
style='color:#A000A0'>FogColor</span><span lang=EN-US>, </span><span
lang=PT-BR style='color:blue'>r0</span><span lang=EN-US>.</span><span
lang=PT-BR>x</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>add</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r2</span><span lang=EN-US>, </span><span lang=PT-BR
style='color:blue'>c14</span><span lang=EN-US>.</span><span lang=PT-BR>x</span><span
lang=EN-US>, -</span><span lang=PT-BR style='color:blue'>r0</span><span
lang=EN-US>.</span><span lang=PT-BR>x</span><span lang=EN-US>&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// (1-r0.x) &lt;== (1-w)</span></p>

<p class=MsoNormal><span lang=PT-BR style='color:#A000A0'>mad</span><span
lang=PT-BR> </span><span lang=PT-BR style='color:blue'>oD0</span><span
lang=EN-US>, </span><span lang=PT-BR style='color:blue'>v2</span><span
lang=EN-US>, </span><span lang=PT-BR style='color:blue'>r2</span><span
lang=EN-US>, </span><span lang=PT-BR style='color:blue'>r1</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span lang=PT-BR style='color:green'>//
Diffuse *(1-FogFactor) + FogColor * FogFactor</span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal>이렇게 되면 고정 기능 파이프라인의 어떤 설정도 필요 없이 순수한 쉐이더로 포그를 구현할 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=182
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image052.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>완전한 쉐이더로 구현된 높이 포그<span
lang=EN-US>: <a href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_09_fog3_shader.zip">s0v_09_fog3_shader.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>2.10 Toon Shading</span></p>

<p class=MsoNormal>정점 쉐이더의 응용 중에 하나가 툰 쉐이딩<span lang=EN-US>(Toon: cartoon
Shading) </span>입니다<span lang=EN-US>. </span>툰 쉐이딩을 간단하게 설명하면 정점에 의한 반사 밝기를 선형적으로
처리하지 않고 양자화 단위의 단계적 처리를 의미합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>고정파이프 라인에서 만약 정점 <span lang=EN-US>a</span>의 라이팅에 대한 반사의 세기가<span
lang=EN-US> 0.3 </span>이고 정점 <span lang=EN-US>b</span>의 라이팅에 세기가<span
lang=EN-US> 0.7</span>이면 중간 밝기는 선형적인 계산을 통해 보간합니다<span lang=EN-US>. </span>하지만 툰
효과는 반사의 밝기를 선형적으로 처리하지 않고 마치 계단처럼 특정한 범위 내에서는 같은 밝기로 처리합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>만약 고정 기능 파이프라인에서 툰 효과를 만들기 위해서는 렌더링의 여러 패스를 거쳐 가야 하지만 정점 쉐이더를
사용하면 아주 간단하고 쉽게 처리할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>정점의 조명 효과에 대한 밝기를<span lang=EN-US> oD0</span>에 출력했습니다<span
lang=EN-US>. </span>그런데 밝기의 세기는<span lang=EN-US> [0, 1] </span>범위이며 이 것을<span
lang=EN-US> oD0</span>에 출력하지 않고 텍스처 좌표로 출력하면 픽셀 처리 과정에서 다음 그림과 같이 연속적으로 변하는 텍스처에서
색상을 샘플링 하게 되면 샘플링 된 색상은 곧<span lang=EN-US>, </span>조명의 밝기와 동등한 결과가 됩니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=453 height=82
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image053.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>밝기가<span lang=EN-US> 0, [0, 1] </span>범위<span
lang=EN-US>, 1</span>에서의 샘플링 위치<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>쉐이더는 값을 정하지 않으면<span lang=EN-US> 0 </span>또는<span
lang=EN-US> 1</span>이 되기 때문에 조명의 밝기를 텍스처에서 가져올 때 쉐이더에서<span lang=EN-US> y</span>는
대부분 설정을 안 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>Lambert </span>확산에 대해서 밝기의 계산은<span
lang=EN-US> dot(</span>정점 법선 벡터<span lang=EN-US>, </span>빛의 방향 벡터<span
lang=EN-US>)</span>입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#define </span><span lang=EN-US>Lgt&nbsp;&nbsp;&nbsp;&nbsp; -</span><span
lang=EN-US style='color:blue'>c8</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>def c24</span><span
lang=EN-US>, </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>.</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>,
</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>5</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>, .</span><span lang=EN-US
style='color:red'>9</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl_normal</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>v1</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 법선</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>m3x3</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>v1</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>c4</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>법선 벡터에 대한 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>dp3&nbsp; </span><span lang=EN-US style='color:blue'>r1</span><span
lang=EN-US>, </span><span lang=EN-US style='color:blue'>r0</span><span
lang=EN-US>, Lgt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>밝기<span
lang=EN-US> = Dot(</span>변환된 법선 벡터<span lang=EN-US>, </span>빛의 방향 벡터<span
lang=EN-US>)</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR style='color:#A000A0'>mad
</span><span lang=FR style='color:blue'>r1</span><span lang=FR>.x, </span><span
lang=FR style='color:blue'>r1</span><span lang=FR>.x, </span><span lang=FR
style='color:blue'>c24</span><span lang=FR>.y, </span><span lang=FR
style='color:blue'>c24</span><span lang=FR>.y&nbsp; </span><span lang=FR
style='color:green'>// (Dot + 1)* 0.5 = Dot * 0.5 + 0.5</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Lambert </span>확산에 대한 반사 세기는<span
lang=EN-US>&nbsp; &quot;</span><span lang=EN-US>dot(</span>정점 법선 벡터<span
lang=EN-US>, </span>조명 방향 벡터<span lang=EN-US>)&quot; </span>가 되어 전체 크기는 <span
lang=EN-US>cos </span>θ에 비례하고 값의 범위는<span lang=EN-US> [-1, 1]</span>이 됩니다<span
lang=EN-US>. </span>이 값의 범위를 <span lang=EN-US>[0, 1]</span>으로 하기 위해서<span
lang=EN-US> &quot;mad&quot; </span>연산자와<span lang=EN-US> 0.5 </span>값을 이용했습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>계산된 반사의 밝기를 출력 레지스터<span
lang=EN-US> oD0</span>에 복사하는 대신<span lang=EN-US> oT0.x</span>에 저장합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mov </span><span lang=EN-US style='color:blue'>oT0</span><span
lang=EN-US>.x, </span><span lang=EN-US style='color:blue'>r1</span><span
lang=EN-US>.x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>결과를 텍스처 좌표<span
lang=EN-US> x</span>에 저장<span lang=EN-US>.</span></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>픽셀 처리를 고정 파이프라인을 이용하려면 다중 텍스처를<span lang=EN-US> Texture</span>와<span
lang=EN-US> Diffuse</span>의 혼합으로 설정하고 폴리곤을 렌더링 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetTextureStageState</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> , </span><span
lang=EN-US style='color:#A000A0'>D3DTSS_COLORARG1</span><span lang=EN-US> , </span><span
lang=EN-US style='color:#A000A0'>D3DTA_TEXTURE</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetTextureStageState</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> , </span><span
lang=EN-US style='color:#A000A0'>D3DTSS_COLORARG2</span><span lang=EN-US> , </span><span
lang=EN-US style='color:#A000A0'>D3DTA_DIFFUSE</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>m_pDev-&gt;</span><span lang=EN-US
style='color:#880000'>SetTextureStageState</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> , </span><span
lang=EN-US style='color:#A000A0'>D3DTSS_COLOROP</span><span lang=EN-US> , </span><span
lang=EN-US style='color:#A000A0'>D3DTOP_MODULATE</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image054.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Lambert </span>확산을 텍스처 좌표로 사용<span
lang=EN-US>. <a href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_10_toon1_texture_lighting.zip">s0v_10_toon1_texture_lighting.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>툰 쉐이딩은 연속적으로 변화하는 텍스처 대신 다음과 같이 밝기가 양자화된 텍스처를 사용합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=453 height=81
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image055.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>그림에서 조명의 밝기 차이로 인해 파란 색 점과 붉은 색 점의 텍스처 좌표의 위치는 다르지만 텍스처에서 샘플링
하는 픽셀의 색상은 동등합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>이전의 <span lang=EN-US>Lambert </span>확산에 대해서 연속적으로 변하는 텍스처 대신
양자화된 텍스처를 적용하면 다음 그림과 같이 툰 쉐이딩<span lang=EN-US>(Toon Shading)</span>이 적용된 장면을 볼
수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image056.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>툰 쉐이딩<span lang=EN-US>(Toon
Shading): <a href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_10_toon1_texture_toon.zip">s0v_10_toon1_texture_toon.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>툰 쉐이딩에서 사용하는 텍스처는<span lang=EN-US> x</span>만 사용하기 때문에 높이가 필요
없습니다<span lang=EN-US>. 1</span>차원 텍스처는 높이가 하나의 픽셀로 구성하면 됩니다<span lang=EN-US>. 1</span>차원
텍스처 만드는 것은 간단해서 그래픽 툴을 이용하는 것 보다 프로그램에서 실시간으로 만드는 것이 정보 보호를 위해서 이점이 있습니다<span
lang=EN-US>. </span></p>

<p class=MsoNormal><span lang=EN-US>D3DXCreateTexture() </span>함수를 사용하면 실시간으로 텍스처를
만들 수 있으며 텍스처 객체의<span lang=EN-US> LockRect() </span>함수를 사용해서 픽셀 데이터를 가져와서 수정 할 수
있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>hr = </span><span
lang=EN-US style='color:#880000'>D3DXCreateTexture</span><span lang=EN-US>(m_pDev
, </span><span lang=EN-US style='color:red'>512</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US> , </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:#A000A0'>D3DFMT_X8R8G8B8</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>D3DPOOL_MANAGED</span><span
lang=EN-US>, &amp;m_pTex );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US> ( </span><span lang=EN-US
style='color:#A000A0'>FAILED</span><span lang=EN-US>(hr) )</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> hr;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>D3DLOCKED_RECT</span><span lang=EN-US> pRect;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pTex-&gt;</span><span
lang=EN-US style='color:#880000'>LockRect</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, &amp;pRect, </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>DWORD</span><span lang=EN-US>*&nbsp; pColor&nbsp; = (</span><span
lang=EN-US style='color:blue'>DWORD</span><span lang=EN-US>*)pRect.pBits;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> i = </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US> ; i &lt; </span><span lang=EN-US
style='color:red'>512</span><span lang=EN-US>; ++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>&nbsp;&nbsp; c = </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(i&lt;</span><span
lang=EN-US style='color:red'>10</span><span lang=EN-US>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c
= </span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(i&lt;</span><span
lang=EN-US style='color:red'>100</span><span lang=EN-US>) c= </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>2f</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(i&lt;</span><span
lang=EN-US style='color:red'>200</span><span lang=EN-US>) c= </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>4f</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(i&lt;</span><span
lang=EN-US style='color:red'>300</span><span lang=EN-US>) c= </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>6f</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(i&lt;</span><span
lang=EN-US style='color:red'>400</span><span lang=EN-US>) c= </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>8f</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c=
</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pColor[i]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; =
</span><span lang=EN-US style='color:blue'>D3DXCOLOR</span><span lang=EN-US>(c,c,c,</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>m_pTex-&gt;</span><span lang=EN-US
style='color:#880000'>UnlockRect</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=240 height=180
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image057.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;1</span>차원 툰 쉐이딩 텍스처<span lang=EN-US>: <a
href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_10_toon2_1D_texture.zip">s0v_10_toon2_1D_texture.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>툰 쉐이더용 텍스처를 사용하지 않고 직접 조건 문을 사용해서 툰 쉐이딩을 구현하는 방법도 있습니다<span
lang=EN-US>. </span>그런데 저 수준으로 약간 난이도 있는 조건 문을 작성하는 것보다 고 수준 언어의 조건 문이 훨씬 간단 하므로
이후<span lang=EN-US> HLSL</span>에서 텍스처 없이 툰 쉐이딩을 구현해 보도록 하겠습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>조명을 툰 쉐이딩으로 처리하고<span lang=EN-US> Diffuse</span>용 텍스처와 다중 텍스처
처리로 혼합을 하게 되면 툰 쉐이딩의 기본적인 내용은 마무리가 됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=241 height=181
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image058.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>툰 쉐이딩<span lang=EN-US> + Diffuse
Map: <a href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_10_toon2_diffuse+toon.zip">s0v_10_toon2_diffuse+toon.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><a href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_10_toon2_diffuse+toon.zip">s0v_10_toon2_diffuse+toon.zip</a></span>의
멀티 텍스처 처리 방식은</p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>최종 색상<span lang=EN-US> = Diffuse Map * Diffuse Color +
Toon Shading - 0.5</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이를 고정 기능 파이프라인에서 다중 텍스처 처리를 다음과 같이 작성했습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetTextureStageState</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> , </span><span
lang=EN-US style='color:#A000A0'>D3DTSS_COLORARG1</span><span lang=EN-US> , </span><span
lang=EN-US style='color:#A000A0'>D3DTA_TEXTURE</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetTextureStageState</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> , </span><span
lang=EN-US style='color:#A000A0'>D3DTSS_COLORARG2</span><span lang=EN-US> , </span><span
lang=EN-US style='color:#A000A0'>D3DTA_DIFFUSE</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetTextureStageState</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> , </span><span
lang=EN-US style='color:#A000A0'>D3DTSS_COLOROP</span><span lang=EN-US> , </span><span
lang=EN-US style='color:#A000A0'>D3DTOP_MODULATE</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetTextureStageState</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US> , </span><span
lang=EN-US style='color:#A000A0'>D3DTSS_COLORARG1</span><span lang=EN-US> , </span><span
lang=EN-US style='color:#A000A0'>D3DTA_CURRENT</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetTextureStageState</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US> , </span><span
lang=EN-US style='color:#A000A0'>D3DTSS_COLORARG2</span><span lang=EN-US> , </span><span
lang=EN-US style='color:#A000A0'>D3DTA_TEXTURE</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>m_pDev-&gt;</span><span lang=EN-US
style='color:#880000'>SetTextureStageState</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US> , </span><span
lang=EN-US style='color:#A000A0'>D3DTSS_COLOROP</span><span lang=EN-US> , </span><span
lang=EN-US style='color:#A000A0'>D3DTOP_ADDSIGNED</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetTexture</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, m_pTxDif );</span></p>

<p class=MsoNormal><span lang=EN-US>m_pDev-&gt;</span><span lang=EN-US
style='color:#880000'>SetTexture</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>, m_pTxToon );</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>2.11 </span><span
style='font-size:14.0pt'>윤곽선<span lang=EN-US>(Edge)</span></span></p>

<p class=MsoNormal>윤곽선을 만드는 방법은 변환한 정점의 깊이 값<span lang=EN-US>, </span>정점의<span
lang=EN-US> ID, </span>법선 벡터 등을 이용해서 만드는데 간단하게 윤곽선을 만들고자 할 때는 정점의 법선 벡터를 이용하는 것이
편리합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>모델 좌표계에서 윤곽선에 해당하는 정점 위치는 다음과 같이 만들 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>윤곽선 정점 위치<span lang=EN-US> = </span>정점 위치<span
lang=EN-US> + </span>법선 벡터<span lang=EN-US> * </span>크기</i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>렌더링은<span lang=EN-US> 2</span>번 진행 합니다<span lang=EN-US>. </span>먼저
일반적인 정점을 렌더링하고 다음으로 윤곽선 정점의 위치를 렌더링 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>고정 기능 파이프라인에서는 윤곽선 정점 위치에 대해서 정점 버퍼를 새로 만들어야 하지만 쉐이더를 사용하면 기존에
있는 정점 버퍼를 그대로 사용하고 대신 쉐이더에서 정점의 법선 벡터와 크기 값을 이용해서 윤곽선 정점 위치를 설정합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#define </span><span lang=EN-US style='color:#A000A0'>Scl </span><span
lang=EN-US style='color:blue'>c27</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>def</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>c25</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl_position&nbsp;&nbsp; v0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 위치 벡터 레지스터
선언<span lang=EN-US> v0</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl_normal&nbsp;&nbsp;&nbsp;&nbsp; v1</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// </span><span style='color:green'>정점 법선 벡터 레지스터 선언<span
lang=EN-US> v1</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mov</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>v1</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>법선 벡터</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mad</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:#A000A0'>Scl</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>v0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>윤곽선 위치<span
lang=EN-US>' = </span>법선 벡터<span lang=EN-US> * </span>스케일<span lang=EN-US> + </span>위치</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mov </span><span lang=EN-US style='color:blue'>r0</span><span
lang=EN-US>.w, </span><span lang=EN-US style='color:blue'>c25</span><span
lang=EN-US>.w&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>윤곽선 위치<span
lang=EN-US>' w = 1.0</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>m4x4</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>oPos</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>c0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>변환</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>같은 정점 버퍼를 가지고 두 번 그리는데 첫 번째에서는<span lang=EN-US> CCW</span>로 렌더링
합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// Toon Shading Process</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetRenderState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>D3DRS_CULLMODE</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DCULL_CCW</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetTexture</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, m_pTxToon );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>DrawIndexedPrimitive</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#A000A0'>D3DPT_TRIANGLELIST</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, m_nVtx, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, m_nFce);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>두 번째는<span lang=EN-US> CW</span>로
그립니다<span lang=EN-US>. </span>이렇게 하면<span lang=EN-US> CCW</span>로 그린 것이 앞쪽에 나오게
됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// Edge Process</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetRenderState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>D3DRS_CULLMODE</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DCULL_CW</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetTexture</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>m_pDev-&gt;</span><span lang=EN-US
style='color:#880000'>DrawIndexedPrimitive</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#A000A0'>D3DPT_TRIANGLELIST</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, m_nVtx, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, m_nFce);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image059.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>윤곽선<span lang=EN-US>: </span>위치<span
lang=EN-US> + </span>법선 벡터<span lang=EN-US>* </span>크기<span lang=EN-US>. <a
href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_10_toon3_edge1.zip">s0v_10_toon3_edge1.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>정확한 윤곽선 대신 대충 만드는 윤곽선도 있습니다<span lang=EN-US>. </span>이 윤곽선은 카메라의
<span lang=EN-US>(-)z</span>축과 법선 벡터의 내적 결과를 툰 쉐이딩과 같이 특정 텍스처의 좌표로 설정하는 것입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>윤곽선 텍스처 좌표<span lang=EN-US> = dot(</span>변환된 법선 벡터<span
lang=EN-US>, </span>카메라 <span lang=EN-US>(-)z</span>축<span lang=EN-US>)</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img width=421 height=27
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image060.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>윤곽선 텍스처<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>지금까지 내용을 가지고<span lang=EN-US> DX Tiny</span>의 모델에 대해서<span
lang=EN-US> Diffuse Map, </span>툰 쉐이딩<span lang=EN-US>, </span>윤곽선 텍스처 적용을 쉐이더로
작성해 봅시다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>쉐이더 프로그램 작성을 편리하게 하기 위해서 다음과 같이 매크로를 정의합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#define </span><span lang=EN-US style='color:#A000A0'>Nor</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:blue'>r2</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#define </span><span lang=EN-US style='color:#A000A0'>Lgt</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; -</span><span lang=EN-US style='color:blue'>c8</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#define </span><span lang=EN-US style='color:#A000A0'>CamZ</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp; -</span><span lang=EN-US style='color:blue'>c16</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>입력 레지스터는 위치<span lang=EN-US>, </span>법선
벡터<span lang=EN-US>, Diffuse, </span>텍스처 좌표들로 선언하고 지정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl_position</span><span lang=EN-US>&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>v0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 위치 벡터 레지스터
선언<span lang=EN-US> v0</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl_normal</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>v1</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 법선 벡터 레지스터
선언<span lang=EN-US> v1</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl_color0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>v2</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 디퓨즈 색상</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl_texcoord0</span><span lang=EN-US>&nbsp; </span><span
lang=EN-US style='color:blue'>v3</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 텍스처 좌표</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>먼저 정점 위치 변환과 정점의<span
lang=EN-US> Diffuse </span>값<span lang=EN-US>, Diffuse Map </span>텍스처 좌표를 출력 레지스터에
복사합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>m4x4</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>oPos</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>v0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>c0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력 위치</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mov</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>oD0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>v2</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 색상</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR style='color:#A000A0'>mov</span><span
lang=FR> </span><span lang=FR style='color:blue'>oT0</span><span lang=FR>, </span><span
lang=FR style='color:blue'>v3</span><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=FR style='color:green'>// Diffuse Map </span><span style='color:green'>텍스처
좌표</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>툰 쉐이딩에 대한 텍스처 좌표를 구현하고<span
lang=EN-US> oT1</span>에 복사합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>def c24</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>5</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>9</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>m3x3</span><span lang=EN-US> </span><span lang=EN-US
style='color:#A000A0'>Nor</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>v1</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>c4</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>법선 벡터에 대한 변환</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>dp3 </span><span lang=EN-US style='color:blue'>r1</span><span
lang=EN-US>,  </span><span lang=EN-US style='color:#A000A0'>Nor</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>Lgt</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// </span><span style='color:green'>정점 밝기 계산</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR style='color:#A000A0'>mad
</span><span lang=FR style='color:blue'>r1</span><span lang=FR>.x, </span><span
lang=FR style='color:blue'>r1</span><span lang=FR>.x, </span><span lang=FR
style='color:blue'>c24</span><span lang=FR>.y, </span><span lang=FR
style='color:blue'>c24</span><span lang=FR>.y</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mov </span><span lang=EN-US style='color:blue'>oT1</span><span
lang=EN-US>.x, </span><span lang=EN-US style='color:blue'>r1</span><span
lang=EN-US>.x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>결과를 텍스처 좌표<span
lang=EN-US> x</span>에 저장</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>윤곽선에 대한 텍스처 좌표를 구하고 이 결과를<span
lang=EN-US> oT2</span>에 복사합니다<span lang=EN-US>. </span>텍스처 좌표는 카메라의<span
lang=EN-US> -z</span>축과 변환된 정점의 법선 벡터의 내적으로 계산됩니다<span lang=EN-US>. </span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>dp3</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r3</span><span lang=PT-BR>.x, </span><span lang=PT-BR
style='color:#A000A0'>Nor</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:#A000A0'>CamZ</span><span lang=PT-BR>&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// Edge = dot(N, </span><span lang=PT-BR>(-)</span><span
lang=PT-BR style='color:green'>CameraZ)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>mov</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>oT2</span><span lang=PT-BR>.x, </span><span lang=PT-BR
style='color:blue'>r3</span><span lang=PT-BR>.x</span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal>고정 기능 파이프라인에서 다중 텍스처 처리 연산은<span lang=PT-BR> &quot;</span>정점<span
lang=PT-BR> Diffuse&quot; * &quot;Diffuse Map&quot; * &quot;Toon Shading&quot;
* &quot;</span>윤곽선<span lang=PT-BR>&quot;</span>으로 계산합니다<span lang=PT-BR>. </span>이를
구현하면 다음과 같습니다<span lang=PT-BR>.</span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>m_pDev-&gt;</span><span
lang=PT-BR style='color:#880000'>SetTextureStageState</span><span lang=PT-BR>(</span><span
lang=PT-BR style='color:red'>0</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:#A000A0'>D3DTSS_COLORARG1</span><span lang=PT-BR>,&nbsp;
</span><span lang=PT-BR style='color:#A000A0'>D3DTA_TEXTURE</span><span
lang=PT-BR>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>m_pDev-&gt;</span><span
lang=PT-BR style='color:#880000'>SetTextureStageState</span><span lang=PT-BR>(</span><span
lang=PT-BR style='color:red'>0</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:#A000A0'>D3DTSS_COLORARG2</span><span lang=PT-BR>,&nbsp;
</span><span lang=PT-BR style='color:#A000A0'>D3DTA_DIFFUSE</span><span
lang=PT-BR>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>m_pDev-&gt;</span><span
lang=PT-BR style='color:#880000'>SetTextureStageState</span><span lang=PT-BR>(</span><span
lang=PT-BR style='color:red'>0</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:#A000A0'>D3DTSS_COLOROP</span><span lang=PT-BR>,&nbsp; </span><span
lang=PT-BR style='color:#A000A0'>D3DTOP_MODULATE</span><span lang=PT-BR>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>m_pDev-&gt;</span><span
lang=PT-BR style='color:#880000'>SetTextureStageState</span><span lang=PT-BR>(</span><span
lang=PT-BR style='color:red'>1</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:#A000A0'>D3DTSS_COLORARG1</span><span lang=PT-BR>,&nbsp;
</span><span lang=PT-BR style='color:#A000A0'>D3DTA_TEXTURE</span><span
lang=PT-BR>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>m_pDev-&gt;</span><span
lang=PT-BR style='color:#880000'>SetTextureStageState</span><span lang=PT-BR>(</span><span
lang=PT-BR style='color:red'>1</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:#A000A0'>D3DTSS_COLORARG2</span><span lang=PT-BR>,&nbsp;
</span><span lang=PT-BR style='color:#A000A0'>D3DTA_CURRENT</span><span
lang=PT-BR>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>m_pDev-&gt;</span><span
lang=PT-BR style='color:#880000'>SetTextureStageState</span><span lang=PT-BR>(</span><span
lang=PT-BR style='color:red'>1</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:#A000A0'>D3DTSS_COLOROP</span><span lang=PT-BR>,&nbsp; </span><span
lang=PT-BR style='color:#A000A0'>D3DTOP_MODULATE</span><span lang=PT-BR>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>m_pDev-&gt;</span><span
lang=PT-BR style='color:#880000'>SetTextureStageState</span><span lang=PT-BR>(</span><span
lang=PT-BR style='color:red'>2</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:#A000A0'>D3DTSS_COLORARG1</span><span lang=PT-BR>,&nbsp;
</span><span lang=PT-BR style='color:#A000A0'>D3DTA_TEXTURE</span><span
lang=PT-BR>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>m_pDev-&gt;</span><span
lang=PT-BR style='color:#880000'>SetTextureStageState</span><span lang=PT-BR>(</span><span
lang=PT-BR style='color:red'>2</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:#A000A0'>D3DTSS_COLORARG2</span><span lang=PT-BR>,&nbsp;
</span><span lang=PT-BR style='color:#A000A0'>D3DTA_CURRENT</span><span
lang=PT-BR>);</span></p>

<p class=MsoNormal><span lang=PT-BR>m_pDev-&gt;</span><span lang=PT-BR
style='color:#880000'>SetTextureStageState</span><span lang=PT-BR>(</span><span
lang=PT-BR style='color:red'>2</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:#A000A0'>D3DTSS_COLOROP</span><span lang=PT-BR>,&nbsp; </span><span
lang=PT-BR style='color:#A000A0'>D3DTOP_MODULATE</span><span lang=PT-BR>);</span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image061.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Diffuse * Toon * Edge. <a
href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_10_toon3_edge2.zip">s0v_10_toon3_edge2.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>2.9 Depth Encoding</span></p>

<p class=MsoNormal>백 버퍼에 저장되는 깊이 값은 때로는 볼륨 포그나 투영 그림자 처리에서 종종 이용되기도 합니다<span
lang=EN-US>. </span>정점이 그래픽 파이프라인의 변환을 거치면<span lang=EN-US> Z</span>축의 값은 <span
lang=EN-US>[0, 1]</span>의 값을 가지게 되어서 이것을 색상으로 사용해도 되지만 변환 후에<span lang=EN-US> z</span>는
실제로<span lang=EN-US> 1.0 </span>근처에 몰려 있습니다<span lang=EN-US>. </span>따라서 적당한 값을
정규 변환 후에<span lang=EN-US> z</span>값에 곱하고 이 것을 색상으로 사용하는 것이 좋습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>정점의 변환 값을 색상으로 사용하기 때문에 임시 레지스터에 월드<span lang=EN-US>, </span>뷰<span
lang=EN-US>, </span>투영 행렬의 곱으로 구성된 행렬에 정점의 위치를 곱한 값을 저장합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl_position</span><span lang=EN-US>&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>v0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 위치를 입력 레지스터<span
lang=EN-US> v0</span>에 선언</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>m4x4</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>v0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>c0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점의 변환<span
lang=EN-US>: </span>입력 위치<span lang=EN-US> * c0</span>에 입력된 행렬</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다음으로 출력 레지스터<span lang=EN-US> oPos</span>에 임시 레지스터에 저장된 변환된 정점
위치를 복사합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mov</span><span lang=EN-US>&nbsp; </span><span
lang=EN-US style='color:blue'>oPos</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>r0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력 위치<span
lang=EN-US> = r0, z=[0,1]</span></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Depth Range </span>값을 저장한 상수 레지스터의 값과 임시 레지스터에
저장된 변환된 정점 위치의<span lang=EN-US> z</span>값을 곱하고 이것을 출력 레지스터<span lang=EN-US> oD0</span>에
복사합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#define </span><span lang=EN-US style='color:#A000A0'>DepthRange</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:blue'>c26</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mul</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>oD0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>.z, </span><span lang=EN-US
style='color:#A000A0'>DepthRange</span><span lang=EN-US>.z&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력 디퓨즈 색상<span
lang=EN-US> = </span>변환 후 정점의<span lang=EN-US> z * DepthRange.z</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US><img border=0
width=244 height=183 src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image062.jpg"></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&lt;</span>깊이 값
렌더링<span lang=EN-US>. <a href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_11_depth.zip">s0v_11_depth.zip</a>&gt;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>2.10 Vertex Shader
Effect</span></p>

<p class=MsoNormal>쉐이더에서 행렬을 정점 쉐이더의 상수 레지스터에 설정할 때 매번 전치<span lang=EN-US>(Transpose)
</span>하는 것이 종종 개발자를 혼란하게 만들거나 때로는 전치를 하지 않고 연결하는 실수를 종종 합니다<span lang=EN-US>. </span>또한<span
lang=EN-US> SetVertexShaderConstantF() </span>함수에서<span lang=EN-US> Float </span>형<span
lang=EN-US>, Vector </span>형<span lang=EN-US>, Matrix </span>형 등의 다른 타입을 하나의 함수에
설정하다 보니 <span lang=EN-US>float4</span>형의 개수를 인수로 전달해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>이것은<span lang=EN-US> D3D </span>디바이스가 저 수준을 지원하기 때문에 인터페이스를 늘리지
않기 위해서 어쩔 수 없이 만들어진 형태입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>만약 다음과 같이 저 수준 정점 쉐이더의 인터페이스를 만든다면 쉐이더 사용을 좀 더 편리하게 사용할 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>interface</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>ILcShader</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>Begin</span><span lang=EN-US>()=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>End</span><span lang=EN-US>()=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>SetFVF</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>* pFVF)=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>SetMatrix</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US> nRegister, </span><span
lang=EN-US style='color:blue'>const</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>D3DXMATRIX</span><span lang=EN-US>* v, </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US> Count=</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>)=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>SetVector</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US> nRegister, </span><span
lang=EN-US style='color:blue'>const</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>D3DXVECTOR4</span><span lang=EN-US>* v)=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>SetColor</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US> nRegister, </span><span
lang=EN-US style='color:blue'>const</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>D3DXCOLOR</span><span lang=EN-US>* v)=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>virtual</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#880000'>SetFloat</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US> nRegister, </span><span
lang=EN-US style='color:blue'>const</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>* v)=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><a href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_12_ShaderEffect.zip">s0v_12_ShaderEffect.zip</a></span>은
<span lang=EN-US>ILcShader</span>와<span lang=EN-US> ILcShader</span>를 상속 받은 <span
lang=EN-US>CLcShader </span>클래스가 구현되어 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>Begin()/End() </span>함수는 정점 처리를 프로그램 가능한 파이프라인에서
처리를 하거나 해제하는 함수로 다음과 같이 구현되어있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CLcShader</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>Begin</span><span lang=EN-US>()</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetVertexShader</span><span lang=EN-US>(m_pShd);</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=DE>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CLcShader</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>End</span><span lang=EN-US>()</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetVertexDeclaration</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetVertexShader</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=DE>&nbsp;</span></p>

<p class=MsoNormal><span lang=DE>SetFVF()</span>는 고정 기능 파이프라인의<span lang=DE>
FVF()</span>함수 호출과 유사한 기능을 하기 때문에 이 이름이 붙었습니다<span lang=DE>.</span></p>

<p class=MsoNormal><span lang=DE>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE style='color:blue'>INT</span><span
lang=DE> </span><span lang=DE style='color:blue'>CLcShader</span><span lang=DE>::</span><span
lang=DE style='color:#880000'>SetFVF</span><span lang=DE>(</span><span lang=DE
style='color:blue'>void</span><span lang=DE>* pFVF)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=DE style='color:blue'>return</span><span lang=DE> m_pDev-&gt;</span><span
lang=DE style='color:#880000'>SetVertexDeclaration</span><span lang=DE>((</span><span
lang=DE style='color:blue'>PDVD</span><span lang=DE>)pFVF);</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=DE>&nbsp;</span></p>

<p class=MsoNormal><span lang=DE>D3D </span>디바이스의<span lang=DE>
SetVertexConstantF() </span>함수를 분리해서<span lang=DE> Matrix, Vector, Color, Float
</span>형에 대해서 처리하도록 각 기능에 대한 명세를 분명히 하는 것이 프로그램 응집성에 도움이 됩니다<span lang=DE>.</span></p>

<p class=MsoNormal><span lang=DE>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE style='color:blue'>INT</span><span
lang=DE> </span><span lang=DE style='color:blue'>CLcShader</span><span lang=DE>::</span><span
lang=DE style='color:#880000'>SetMatrix</span><span lang=DE>(</span><span
lang=DE style='color:blue'>INT</span><span lang=DE> uReg, </span><span lang=DE
style='color:blue'>const</span><span lang=DE> </span><span lang=DE
style='color:blue'>D3DXMATRIX</span><span lang=DE>* v, </span><span lang=DE
style='color:blue'>INT</span><span lang=DE> nCount)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=DE style='color:blue'>HRESULT</span><span lang=DE> hr;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>for</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>int</span><span lang=EN-US> i=</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>; i&lt;nCount; ++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=FR>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=FR style='color:blue'>D3DXMATRIX</span><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp; t;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=FR style='color:#880000'>D3DXMatrixTranspose</span><span lang=FR>(&amp;t,
&amp;v[i] );</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hr
= m_pDev-&gt;</span><span lang=FR style='color:#880000'>SetVertexShaderConstantF</span><span
lang=FR>( uReg + i*</span><span lang=FR style='color:red'>4</span><span
lang=FR>, (</span><span lang=FR style='color:blue'>FLOAT</span><span lang=FR>*)&amp;t,
</span><span lang=FR style='color:red'>4</span><span lang=FR>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>FAILED</span><span lang=EN-US>(hr))</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> -</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CLcShader</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>SetVector</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US> uReg, </span><span
lang=EN-US style='color:blue'>const</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>D3DXVECTOR4</span><span lang=EN-US>* v)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetVertexShaderConstantF</span><span
lang=EN-US>( uReg , (</span><span lang=EN-US style='color:blue'>FLOAT</span><span
lang=EN-US>*)v , </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CLcShader</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>SetColor</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> uReg, </span><span lang=EN-US
style='color:blue'>const</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>D3DXCOLOR</span><span lang=EN-US>* v)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetVertexShaderConstantF</span><span
lang=EN-US>( uReg , (</span><span lang=EN-US style='color:blue'>FLOAT</span><span
lang=EN-US>*)v , </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>CLcShader</span><span lang=EN-US>::</span><span lang=EN-US
style='color:#880000'>SetFloat</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> uReg, </span><span lang=EN-US
style='color:blue'>const</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>FLOAT</span><span lang=EN-US>* v)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetVertexShaderConstantF</span><span
lang=EN-US>( uReg , (</span><span lang=EN-US style='color:blue'>FLOAT</span><span
lang=EN-US>*)v , </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=DE>&nbsp;</span></p>

<p class=MsoNormal>이렇게 구성된 <span lang=EN-US>ILcShader </span>인터페이스는 다음과 같이 간단하게
객체를 생성하고 사용할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>ILcShader</span><span
lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp; m_pVs;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>함수를 통한 객체 생성</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>LcDev_CreateVertexShaderFromFile</span><span lang=EN-US>(&amp;m_pVs,
m_pDev, </span><span lang=EN-US style='color:fuchsia'>&quot;data/Shader.vsh&quot;</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>쉐이더 사용</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pVs-&gt;</span><span
lang=EN-US style='color:#880000'>Begin</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pVs-&gt;</span><span
lang=EN-US style='color:#880000'>SetFVF</span><span lang=EN-US>(m_pFVF);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>D3DXVECTOR4</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>DepthScalers</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0f</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>004F</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0f</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0f</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>상수 연결</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pVs-&gt;</span><span
lang=EN-US style='color:#880000'>SetMatrix</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, &amp;(m_mtWld * mtViw *
mtPrj));</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pVs-&gt;</span><span
lang=EN-US style='color:#880000'>SetVector</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>26</span><span lang=EN-US>, &amp;DepthRange);</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>DrawPrimitive</span><span lang=EN-US>(…);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>쉐이더 해제</span></p>

<p class=MsoNormal><span lang=EN-US>m_pVs-&gt;</span><span lang=EN-US
style='color:#880000'>End</span><span lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>전체 코드는 <span lang=EN-US><a href="https://github.com/3dapi/bs25_shader1/raw/master/s0v_12_ShaderEffect.zip">s0v_12_ShaderEffect.zip</a></span>를
참고하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<span lang=EN-US style='font-size:10.0pt;font-family:바탕체'><br clear=all
style='page-break-before:always'>
</span>

<p class=MsoNormal><span lang=EN-US style='font-size:16.0pt'>3. Pixel Shader</span></p>

<p class=MsoNormal>지금까지 우리는 정점 쉐이더 사용법을 살펴보았습니다<span lang=EN-US>. </span>정점 쉐이더는
변환<span lang=EN-US>, </span>조명<span lang=EN-US>, </span>안개 효과 등 래스터라이징 이전까지의 처리
과정을 프로그램 가능한 파이프라인을 이용하는 것입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>Rasterizing </span>이후 만들어진 픽셀 데이터는 픽셀 처리 과정<span
lang=EN-US>(Pixel Processing)</span>으로 넘어갑니다<span lang=EN-US>. </span>픽셀 처리 과정은
샘플링→ 다중 텍스처 처리 → 알파 테스트 → 깊이 테스트 → 스텐실 테스트 → 픽셀 포그 → 알파 블렌딩 순으로 진행되고 마지막에 후면 버퍼를
갱신하는 과정입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>픽셀 쉐이더는 이러한 픽셀 처리 과정 중에서 텍스처에서 색상을 추출하는 샘플링<span lang=EN-US>(Sampling)</span>과
입력된 색상을 혼합하는 다중 텍스처 처리<span lang=EN-US>(Multi-Texturing)</span>를 고정 기능 파이프라인이 아닌
프로그램 가능한 파이프라인으로 처리하는 것입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=468 height=223
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image063.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>픽셀 처리 과정<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>하나의 삼각형을 구성하기 위해서 세 개의 정점이 필요하지만 이 세 정점으로 구성된 삼각형의 픽셀을 채우는 작업은
화면 해상도와 카메라의 위치에 따라 달라집니다<span lang=EN-US>. </span>즉<span lang=EN-US>, </span>정점
처리보다 픽셀 처리가 훨씬 많은 작업이 필요합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=492 height=186
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image064.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>정점 쉐이더와 픽셀 쉐이더 역할 비교<span
lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이와 같은 기술적 문제들과 픽셀 처리에 필요한 하드웨어의 구성에 대한 비용 문제로 인해서 픽셀 쉐이더보다 정점
쉐이더를 지원하는<span lang=EN-US> GPU</span>가 먼저 출시되었습니다<span lang=EN-US>. </span>또한 초창기<span
lang=EN-US> GPU </span>제조사들은 저마다 자신들의 저 수준 픽셀 쉐이더 언어를 표준으로 정하려고 했기 때문에 정점 쉐이더와는
다르게 명령어들이 일관성이 부족했습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>기술 보다 이론이 앞서 있는 상황에서 아직까지<span lang=EN-US> 1.x </span>버전에서 작성한
많은 예제들이 있지만 픽셀 쉐이더는 버전<span lang=EN-US> 2.0</span>에 와서 많은 명령어들이 정리되었기 때문에 저수준으로
작성하면 각 버전마다 다른 명령어를 사용해야 하지만 고 수준으로 작성하면 거의 같은 함수를 사용할 수 있어서 여러분은 최소한<span
lang=EN-US> 2.0</span>이상 버전에서 고 수준으로 작성하는 것이 사용의 편리와 유지 보수를 위해서 좋습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=611 height=424
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image065.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>픽셀 쉐이더 가상머신<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>픽셀 쉐이더 가상 머신은 정점 쉐이더 가상 머신처럼 입력 레지스터<span lang=EN-US>, </span>출력
레지스터<span lang=EN-US>, </span>상수 레지스터<span lang=EN-US>, </span>임시 레지스터<span
lang=EN-US>, </span>그리고 산술과 논리 연산을 담당하는<span lang=EN-US> ALU</span>로 구성되어 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>입력 레지스터는<span lang=EN-US> Rasterizing </span>을 거친 픽셀 데이터에 대해서
<span lang=EN-US>v</span>로 시작을 합니다<span lang=EN-US>. </span>색상 레지스터<span
lang=EN-US>(Color Register) v#</span>는<span lang=EN-US> v0</span>와<span
lang=EN-US> v1</span>이 있고<span lang=EN-US>, v0</span>는<span lang=EN-US>
Diffuse, v1</span>은<span lang=EN-US> Specular</span>에 해당합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>t</span>으로 시작하는 입력 레지스터<span lang=EN-US> t#</span>은
픽셀 쉐이더 버전 마다 차이가 있습니다<span lang=EN-US>. 1.x </span>버전에서는 텍스처 좌표에 의해 샘플링 된 픽셀이지만<span
lang=EN-US> 2.0 </span>이후에는 텍스처 좌표 자체입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>s</span>로 시작하는 입력 레지스터<span lang=EN-US> s#</span>은
색상을 추출하는 샘플러<span lang=EN-US>(Sampler) </span>객체입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>임시 레지스터<span lang=EN-US> r#</span>은 정점 쉐이더의 임시 레지스터와 같은 기능을 수행하며
연산의 결과를 저장하는 용도로 사용되는 읽기<span lang=EN-US>, </span>쓰기 레지스터입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>상수 레지스터<span lang=EN-US> c# </span>역시 정점 쉐이더의 상수 레지스터와 같은 기능을
수행하고 쉐이더 내부에서는 읽기만 가능하고 값의 설정은 외부에서 디바이스의 함수를 사용하거나<span lang=EN-US>
&quot;def&quot; </span>명령어로 미리 정해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>출력 레지스터는 쉐이더 버전 마다 크게 차이가 있습니다<span lang=EN-US>. 1.x </span>버전에서는
임시 레지스터<span lang=EN-US> r0</span>가 출력 레지스터입니다<span lang=EN-US>. 2.x </span>버전에서는
<span lang=EN-US>Multi-element texture</span>가 가능해서<span lang=EN-US> oC0~ oC3</span>이
있고<span lang=EN-US>, oDepth</span>도 있습니다<span lang=EN-US>. </span>보통<span
lang=EN-US> oC0</span>로 출력하는데<span lang=EN-US> oC0</span>는 후면 버퍼에 해당합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>픽셀 <span lang=EN-US>ALU</span>는 픽셀 데이터에 대한 산술 연산과 논리 동작을 담당하며
기본적인 사칙 연산부터 픽셀에 대해서 내적<span lang=EN-US>, </span>제곱근<span lang=EN-US>, </span>승수<span
lang=EN-US>, exp, log </span>등의 수학 함수들과 조건 문 등을 처리합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=552 height=311
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image066.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>픽셀 쉐이더 레이아웃<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>저 수준 픽셀 쉐이더 코드와 입력된 텍스처<span lang=EN-US>, </span>래스터 과정에 의해 만들어진
픽셀의 관계는 그림처럼 먼저 입력 레지스터 선언에 따라 픽셀은<span lang=EN-US> v#, </span>텍스처 좌표 또는 텍스처는<span
lang=EN-US> t#, </span>샘플러 객체는<span lang=EN-US> #s </span>입력 레지스터에 저장됩니다<span
lang=EN-US>.</span><span lang=EN-US> </span>이 입력 레지스터에 저장된 값과 미리 설정된 상수 레지스터<span
lang=EN-US> c#</span>에 저장된 값들을 가지고 픽셀<span lang=EN-US> ALU</span>는 연산을 합니다<span
lang=EN-US>. </span>또한 명령어에 따라 연산의 결과를 임시 레지스터를 이용하고<span lang=EN-US>, </span>마지막으로
출력 레지스터에 복사 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>100</span>번 보는 것보다 한 번 작성해 것이 훨씬 이해가 빠르기 때문에
픽셀 쉐이더 연습을 통해서 하나하나 배워봅시다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>3.1 </span><span
style='font-size:14.0pt'>간단한 픽셀 쉐이더</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>3.1.1 Diffuse </span><span
style='font-size:12.0pt'>출력</span></p>

<p class=MsoNormal>저 수준 픽셀 쉐이더의 명령어들과 문법은 정점 쉐이더와 거의 비슷합니다<span lang=EN-US>. </span>따라서
픽셀 쉐이더 코드를 컴파일 하고<span lang=EN-US>, </span>쉐이더 객체를 생성하고<span lang=EN-US>, </span>렌더링에서
상수 설정 등에 대한 기본 동작은 정점 쉐이더와 부분적으로 함수 이름만 다를 뿐 거의 같은 형식으로 되어 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>그런데 픽셀 쉐이더 <span lang=EN-US>1.x </span>에서 각 버전 마다 명령어들의 차이가 정점
쉐이더 보다 훨씬 심합니다<span lang=EN-US>. </span>예를 들어<span lang=EN-US> ATI</span>에서<span
lang=EN-US> ps_1_4 </span>버전이 지원이 되지만<span lang=EN-US> NVIDIA </span>계열에서는<span
lang=EN-US> ps_1_4</span>를 지원 안 합니다<span lang=EN-US>. </span>따라서 여러분은 간단한 픽셀 쉐이더의
경우<span lang=EN-US> 1.1 </span>버전을 사용하거나 아니면<span lang=EN-US> 2.0</span>이상 버전으로
사용하는 것이 좋습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>여기서는 픽셀 쉐이더 버전<span lang=EN-US> 1.1</span>과<span lang=EN-US>
2.0</span>을 중심으로 강의를 하겠습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>간단하게 색상이 있는 사각형을 출력하는 예를 만들어 봅시다<span lang=EN-US>. </span>이를
위해 다음과 같은 정점 구조체를 사용해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>VtxD</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DXVECTOR3</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; p;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 위치</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>DWORD</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; d;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 색상</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>enum</span><span lang=EN-US> {</span><span
lang=EN-US style='color:#A000A0'>FVF</span><span lang=EN-US> = (</span><span
lang=EN-US style='color:#A000A0'>D3DFVF_XYZ</span><span lang=EN-US>|</span><span
lang=EN-US style='color:#A000A0'>D3DFVF_DIFFUSE</span><span lang=EN-US>),};</span></p>

<p class=MsoNormal><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 구조체로 사각형을 출력하도록<span lang=EN-US> 4</span>개의 정점을 만들고 위치와 색상을
설정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>VtxD</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp; m_pVtx[</span><span lang=EN-US style='color:red'>4</span><span
lang=EN-US>];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>정점 데이터</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pVtx[</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:blue'>VtxD</span><span lang=EN-US>(-</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>9F</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>9F</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>D3DXCOLOR</span><span lang=EN-US>(</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>));</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pVtx[</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:blue'>VtxD</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>9F</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>9F</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>D3DXCOLOR</span><span lang=EN-US>(</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>));</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pVtx[</span><span
lang=EN-US style='color:red'>2</span><span lang=EN-US>] = </span><span
lang=EN-US style='color:blue'>VtxD</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>9F</span><span lang=EN-US>, -</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>9F</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>D3DXCOLOR</span><span lang=EN-US>(</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>));</span></p>

<p class=MsoNormal><span lang=EN-US>m_pVtx[</span><span lang=EN-US
style='color:red'>3</span><span lang=EN-US>] = </span><span lang=EN-US
style='color:blue'>VtxD</span><span lang=EN-US>(-</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>9F</span><span lang=EN-US>, -</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>9F</span><span lang=EN-US>,&nbsp; </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>D3DXCOLOR</span><span lang=EN-US>(</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>,</span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>));</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>고정 기능 파이프라인에서는 디바이스의<span lang=EN-US> DrawPrimitive…() </span>함수를
호출하면 바로 출력되었습니다<span lang=EN-US>. </span>우리는 픽셀 쉐이더를 이용해서 출력하는 것이 목표이기 때문에 다음과 같이
쉐이더 코드를 작성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>ps_1_1</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>픽셀 쉐이더 버전 선언</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#A000A0'>mov</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>r0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:blue'>v0</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력 레지스터에 복사</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>v0</span>는 래스터 처리를 거친<span lang=EN-US>
Diffuse </span>값입니다<span lang=EN-US>. </span>픽셀 쉐이더 버전<span lang=EN-US> 1.x</span>에서는
임시 레지스터로 사용되는<span lang=EN-US> r0</span>가 출력 레지스터 이기도 합니다<span lang=EN-US>. </span>버전<span
lang=EN-US> 1.1</span>에서는 임시 레지스터를<span lang=EN-US> r0</span>와<span lang=EN-US>
r1 2</span>개 정도만 사용할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>이와 동등한 코드를 픽셀 쉐이더<span lang=EN-US> 2.0</span>로 작성하면 다음과 같습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>ps_2_0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>픽셀 쉐이더 버전 선언</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>v0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Diffuse</span><span style='color:green'>를 입력 레지스터<span
lang=EN-US> v0 </span>선언</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#A000A0'>mov</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>oC0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:blue'>v0</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력 레지스터에 복사</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>dcl</span>은 입력 레지스터를 선언할 때 사용되며 <span
lang=EN-US>v#</span>는 색상<span lang=EN-US>, </span>텍스처 좌표는<span lang=EN-US> t#, </span>샘플러는<span
lang=EN-US> s#</span>으로 지정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 픽셀 쉐이더 명령어를 컴파일하고 픽셀 쉐이더 객체를 생성하는 코드는 다음과 같습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>DWORD</span><span lang=EN-US> dwFlags = </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#if defined</span><span lang=EN-US>( _DEBUG ) || </span><span
lang=EN-US style='color:blue'>defined</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#A000A0'>DEBUG</span><span lang=EN-US> )</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dwFlags
|= </span><span lang=EN-US style='color:#A000A0'>D3DXSHADER_DEBUG</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>#endif</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>LPD3DXBUFFER </span><span lang=EN-US>pShd = </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>;</span><span
lang=EN-US> &nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:blue'>LPD3DXBUFFER
</span><span lang=EN-US>pErr = </span><span lang=EN-US style='color:#A000A0'>NULL</span><span
lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>hr = </span><span
lang=EN-US style='color:#A000A0'>D3DXAssembleShaderFromFile</span><span
lang=EN-US>(&nbsp; </span><span lang=EN-US style='color:fuchsia'>&quot;data/Shader.psh&quot;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>, dwFlags, &amp;pShd,
&amp;pErr);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US>( </span><span lang=EN-US
style='color:#A000A0'>FAILED</span><span lang=EN-US>(hr) )</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(pErr)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#A000A0'>MessageBox</span><span lang=EN-US>( hWnd, (</span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US>*)pErr-&gt;</span><span
lang=EN-US style='color:#880000'>GetBufferPointer</span><span lang=EN-US>(), </span><span
lang=EN-US style='color:fuchsia'>&quot;Err&quot;</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>MB_ICONWARNING</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pErr-&gt;</span><span
lang=EN-US style='color:#880000'>Release</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:#A000A0'>MessageBox</span><span lang=EN-US>( hWnd, </span><span
lang=EN-US style='color:fuchsia'>&quot;File is Not exist&quot;</span><span
lang=EN-US>, </span><span lang=EN-US style='color:fuchsia'>&quot;Err&quot;</span><span
lang=EN-US>, </span><span lang=EN-US style='color:#A000A0'>MB_ICONWARNING</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> -</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>hr =
m_pDev-&gt;</span><span lang=EN-US style='color:#880000'>CreatePixelShader</span><span
lang=EN-US>( (</span><span lang=EN-US style='color:blue'>DWORD</span><span
lang=EN-US>*)pShd-&gt;</span><span lang=EN-US style='color:#880000'>GetBufferPointer</span><span
lang=EN-US>() , &amp;m_pPs);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>pShd-&gt;</span><span
lang=EN-US style='color:#880000'>Release</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US> ( </span><span lang=EN-US
style='color:#A000A0'>FAILED</span><span lang=EN-US>(hr) )</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> -</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>정점 쉐이더와 마찬가지로 쉐이더 컴파일은 문자열은 <span lang=EN-US>D3DXAssembleShader()</span>함수를
사용하고 파일은 <span lang=EN-US>D3DXAssembleShaderFromFile() </span>함수를 사용합니다<span
lang=EN-US>. </span>픽셀 쉐이더 객체는 디바이스의 <span lang=EN-US>CreatePixelShader() </span>함수를
이용해서 픽셀 쉐이더 객체를 생성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>이렇게 만든 픽셀 쉐이더 객체를 렌더링에서 사용하기 위해서는 정점 쉐이더와 유사하게 픽셀 처리를 프로그램 가능한
파이프라인 사용을 디바이스에 알려야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE>m_pDev-&gt;</span><span
lang=DE style='color:#880000'>SetPixelShader</span><span lang=DE>(m_pPs);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>이후 과정은 렌더링은 고정 기능 파이프라인과 같습니다<span
lang=DE>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=DE>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetFVF</span><span lang=EN-US>(…);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>DrawPrimitive</span><span lang=EN-US>(</span><span
lang=EN-US>…</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>프로그램 가능한 파이프라인 사용이 끝나면 이 또한 디바이스에게
알립니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>m_pDev-&gt;</span><span lang=EN-US
style='color:#880000'>SetPixelShader</span><span lang=EN-US>( </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이와 관련한 전체 코드는 <span lang=EN-US><a href="https://github.com/3dapi/bs25_shader1/raw/master/s1p_01_basic1.zip">s1p_01_basic1.zip</a></span>의<span
lang=EN-US> ShaderEx.cpp</span>와<span lang=EN-US> &quot;data/shader.psh&quot; </span>파일을
참고 하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image067.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>정점 색상 출력 픽셀 쉐이더<span lang=EN-US>.
<a href="https://github.com/3dapi/bs25_shader1/raw/master/s1p_01_basic1.zip">s1p_01_basic1.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>3.1.2 </span><span
style='font-size:12.0pt'>상수 레지스터 설정</span></p>

<p class=MsoNormal>픽셀 쉐이더에서 처리되는 데이터 또한 정점 쉐이더와 마찬가지로<span lang=EN-US> float4</span>형
이고 색상에 대해서<span lang=EN-US> r, g, b, a </span>또는<span lang=EN-US> x, y, z, w </span>로
접근할 수 있으며 <span lang=EN-US>swizzling </span>또한 가능합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>상수 설정도<span lang=EN-US> float4</span>형으로 전달해야 하며<span
lang=EN-US> SetPixelShaderConstantF() </span>함수를 사용합니다<span lang=EN-US>. </span>이
함수는<span lang=EN-US> SetVertexConstantF()</span>와 비슷하게 상수 레지스터의 값을 설정하는 함수로 첫 번째
인수는 상수 레지스터 번호를 지정하고<span lang=EN-US>, </span>두 번째 인수는<span lang=EN-US> float</span>형
데이터의 배열을 설정합니다<span lang=EN-US>. </span>마지막 세 번째 인수는<span lang=EN-US> float4</span>형의
개수를 정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>상수 레지스터 설정의 우선 순위는 쉐이더 내부에서 정한 코드입니다<span lang=EN-US>. </span>정점
쉐이더와 마찬 가지로 외부에서<span lang=EN-US> SetPixelShaderConstantF() </span>함수로 상수 레지스터의
값을 설정해도 쉐이더 내부에서 정의되어 있으면 이 정의된 값으로 상수 레지스터가 정해집니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>만약<span lang=EN-US> Diffuse</span>와 두 개의 색상을 곱해서 최종 색상<span
lang=EN-US> = Diffuse * </span>색상<span lang=EN-US> 0 * </span>색상<span
lang=EN-US> 1</span>으로 정하는 것을 픽셀 쉐이더로 작성하면 다음과 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>ps_1_1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>def</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>c0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>2</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>2</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>2</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>상수 레지스터<span
lang=EN-US> c0.rgba =(2,2,2,1)</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mul</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>c0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>v0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>상수 값과 색상 혼합</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mul</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>c1</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>외부에서 정한 상수 값과
색상 혼합</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>또는</p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>ps_2_0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>def</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>c0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>2</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>2</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>2</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>상수 레지스터<span
lang=EN-US> c0.rgba =(2,2,2,1)</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>v0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Diffuse</span><span style='color:green'>를 입력 레지스터<span
lang=EN-US> v0 </span>선언</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mul</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>c0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>v0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>상수 값과<span
lang=EN-US> Diffuse </span>합</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mul</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>c1</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>외부에서 정한 상수 값과
색상 혼합</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#A000A0'>mov</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>oC0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:blue'>r0</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력 레지스터에 복사</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>쉐이더 내부에서 상수 레지스터<span lang=EN-US> c0</span>가 설정되었습니다<span
lang=EN-US>. </span>상수 레지스터를 외부에서 설정하려면 <span lang=EN-US>SetPixelShaderConstantF()</span>함수로
다음과 같이 작성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>D3DXCOLOR</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>color0</span><span lang=EN-US>(</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetPixelShaderConstantF</span><span
lang=EN-US>(</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>,
(</span><span lang=EN-US style='color:blue'>float</span><span lang=EN-US>*)&amp;color0,
</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>상수 레지스터 값 설정</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>D3DXVECTOR4</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>color1</span><span lang=EN-US>(</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>5f</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetPixelShaderConstantF</span><span
lang=EN-US>(</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>,
(</span><span lang=EN-US style='color:blue'>float</span><span lang=EN-US>*)&amp;color1,
</span><span lang=EN-US style='color:red'>1</span><span lang=EN-US>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>상수 레지스터 값 설정</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>색상에 대해서<span lang=EN-US> D3DXVECTOR4 </span>구조체를 사용할 수 있지만<span
lang=EN-US> D3DXCOLOR </span>구조체를 사용하는 것이 보기 좋습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>외부에서<span lang=EN-US> c0</span>를 설정하고 있지만<span lang=EN-US>
c0</span>는 쉐이더 내부에서<span lang=EN-US> &quot;def&quot;</span>로 이미 설정되어 있어 이 값이 렌더링에
적용됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=264 height=198
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image068.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>픽셀 쉐이더 상수 레지스터 설정<span
lang=EN-US>. <a href="https://github.com/3dapi/bs25_shader1/raw/master/s1p_01_basic2_const.zip">s1p_01_basic2_const.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>3.1.3 </span><span
style='font-size:12.0pt'>색상 반전<span lang=EN-US>(Invert)</span></span></p>

<p class=MsoNormal>색상 밝기의 반전<span lang=EN-US>(Invert)</span>는 다음과 같이 계산 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>반전 색상<span lang=EN-US> = 1.0 - </span>색상</i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>고정 기능 파이프라인에서 색상을 반전하려면 전체 픽셀을 복사해서 이 공식을 적용해야 하는데 픽셀 쉐이더를 사용하면
다음과 같이 간단한 코드로 사용하면 입력된<span lang=EN-US> Diffuse</span>에 대해서 색상을 반전 시킬 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>ps_1_1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>def</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>c0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>1</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>sub</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=PT-BR
style='color:blue'>c0</span><span lang=EN-US>, </span><span lang=PT-BR
style='color:blue'>v0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>또는</p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>ps_2_0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>def</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>c0</span><span lang=EN-US>, </span><span lang=PT-BR
style='color:red'>1</span><span lang=EN-US>, </span><span lang=PT-BR
style='color:red'>1</span><span lang=EN-US>, </span><span lang=PT-BR
style='color:red'>1</span><span lang=EN-US>, </span><span lang=PT-BR
style='color:red'>0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>v0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>sub</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>c0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>v0</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#A000A0'>mov </span><span
lang=EN-US>oC0, </span><span lang=EN-US style='color:blue'>r0</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=276 height=207
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image069.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>색상 반전<span lang=EN-US>(Invert): <a
href="https://github.com/3dapi/bs25_shader1/raw/master/s1p_01_basic3_invert.zip">s1p_01_basic3_invert.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:12.0pt'>3.1.4 </span><span
style='font-size:12.0pt'>색상 단색<span lang=EN-US>(Monotone)</span></span></p>

<p class=MsoNormal><span lang=EN-US>R, G, B </span>색상을 하나의 색상으로 만드는 단색화<span
lang=EN-US>(Monotone)</span>도 픽셀 쉐이더를 사용하면 편리합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>단색화 색상<span lang=EN-US> = (R + G + B)/3</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>으로 정의할 수 있지만 사람의 눈은<span lang=EN-US> Green</span>과<span
lang=EN-US> Red</span>에 더 민감하다고 합니다<span lang=EN-US>. </span>경험적인 데이터에 의해 단색화 색상은
다음과 같이 정의 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>단색화 색상<span lang=EN-US> = R * 0.299 + G * 0.587 + B *
0.114</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>RGB </span>색상을<span lang=EN-US> 3</span>차원 벡터로
생각하면 단색화 색상 공식은 내적을 이용한 것과 동일합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>단색화 색상<span lang=EN-US> = dot( (R, G, B), (0.299, 0.587,
0.114) )</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>쉐이더 코드를 구성할 때 같은 기능이라면 쉐이더에서 제공하는 함수를 사용하고<span lang=EN-US>,
</span>저 수준의 경우 한 줄이라도 덜 작성하는 것이 효율이 높다고 합니다<span lang=EN-US>. </span>픽셀 쉐이더에서도
내적에 대한<span lang=EN-US> dp3, dp4 </span>연산자가 있어서 단색화 색상을 다음과 같이 작성할 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>ps_1_1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>def</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>c0</span><span lang=EN-US>, </span><span lang=PT-BR
style='color:red'>0</span><span lang=EN-US>.</span><span lang=PT-BR
style='color:red'>299</span><span lang=EN-US>, </span><span lang=PT-BR
style='color:red'>0</span><span lang=EN-US>.</span><span lang=PT-BR
style='color:red'>587</span><span lang=EN-US>, </span><span lang=PT-BR
style='color:red'>0</span><span lang=EN-US>.</span><span lang=PT-BR
style='color:red'>114</span><span lang=EN-US>, </span><span lang=PT-BR
style='color:red'>0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>dp3</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=PT-BR
style='color:blue'>c0</span><span lang=EN-US>, </span><span lang=PT-BR
style='color:blue'>v0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>또는</p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>ps_2_0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>def</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>c0</span><span lang=EN-US>, </span><span lang=PT-BR
style='color:red'>0</span><span lang=EN-US>.</span><span lang=PT-BR
style='color:red'>299</span><span lang=EN-US>, </span><span lang=PT-BR
style='color:red'>0</span><span lang=EN-US>.</span><span lang=PT-BR
style='color:red'>587</span><span lang=EN-US>, </span><span lang=PT-BR
style='color:red'>0</span><span lang=EN-US>.</span><span lang=PT-BR
style='color:red'>114</span><span lang=EN-US>, </span><span lang=PT-BR
style='color:red'>0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>dcl</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>v0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>dp3</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=PT-BR
style='color:blue'>c0</span><span lang=EN-US>, </span><span lang=PT-BR
style='color:blue'>v0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>mov </span><span lang=EN-US style='color:blue'>oC0</span><span
lang=EN-US>, </span><span lang=PT-BR style='color:blue'>r0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=PT-BR><img border=0 width=228 height=171
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image070.jpg"></span></p>

<p class=MsoNormal><span lang=PT-BR>&lt;</span>단색화<span lang=PT-BR>(Monotone): <a
href="https://github.com/3dapi/bs25_shader1/raw/master/s1p_01_basic4_mono.zip">s1p_01_basic4_mono.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal>단색화는 게임에서 자주 사용되는 기술 이므로 꼭 기억하기 바랍니다<span lang=PT-BR>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>3.2 Texturing
&amp; Multi-Texturing</span></p>

<p class=MsoNormal>픽셀 쉐이더에서 텍스처 색상을 처리하는 방법은 다른 픽셀 처리<span lang=EN-US>(Pixel
Processing)</span>과 동일하며 텍스처에서 색상을 가져오는 샘플링<span lang=EN-US>(Sampling)</span>만 추가될
뿐입니다<span lang=EN-US>. </span>그런데 픽셀 쉐이더<span lang=EN-US> 1.x </span>은 텍스처 색상을 가져오는
명령어들이 버전마다 차이가 있고 제조사 마다 지원이 되지 않는 버전도 존재했었는데 이것은 픽셀 처리량이 정점 쉐이더 보다 많아<span
lang=EN-US> GPU</span>를 만드는 가격과 기술의 문제가 있었기 때문이며 현재 대부분의 그래픽 카드는 픽셀 쉐이더 <span
lang=EN-US>2.0 </span>이상 지원 되고 있어서 이 버전부터 사용 방법과 명령어 구성의 일관성이 유지되고 있어서 이 버전 이상에서
작업하는 것이 좋습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>픽셀 쉐이더<span lang=EN-US> 1.1</span>에서 텍스처 색상을 가져올 때는 <span
lang=EN-US>tex </span>명령어와<span lang=EN-US> t# </span>레지스터를 사용해서 <span
lang=EN-US>&quot;tex t#&quot;</span>으로 작성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>ps_1_1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>tex</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>t0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// stage 0</span><span style='color:green'>의 텍스처
좌표에서 샘플링</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>tex</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>t1</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// stage 1</span><span style='color:green'>의 텍스처
좌표에서 샘플링</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>tex</span>는 텍스처의 샘플링 명령어로<span lang=EN-US>
&quot;tex t0&quot;</span>는 다중 텍스처 처리<span lang=EN-US>(Multi-Texturing)</span>의<span
lang=EN-US> 0 </span>번째<span lang=EN-US> Stage </span>텍스처 좌표에 해당하는 픽셀<span
lang=EN-US> R, G, B, A</span>를 가져와<span lang=EN-US> t0</span>에 저장합니다<span
lang=EN-US>. &quot;tex t1&quot;</span>은<span lang=EN-US> 1 </span>번째<span
lang=EN-US> Stage </span>텍스처 좌표의 픽셀을<span lang=EN-US> t1</span>에 저장합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>ATI </span>계열만 지원되는 픽셀 쉐이더 버전<span
lang=EN-US> 1.4</span>의 경우<span lang=EN-US> texld</span>를 사용합니다<span
lang=EN-US>. texld</span>는 두 개의<span lang=EN-US> Operand</span>가 필요합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>ps_1_4</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>texld</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>t0</span><span lang=EN-US>&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// stage 0</span><span style='color:green'>의 텍스처
좌표<span lang=EN-US> t0</span>에서 샘플링<span lang=EN-US>, r0</span>에 저장</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>texld</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>r1</span><span
lang=EN-US>, </span><span lang=EN-US style='color:blue'>t1</span><span
lang=EN-US>&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>// stage 1</span><span
style='color:green'>의 텍스처 좌표<span lang=EN-US> t1</span>에서 샘플링<span lang=EN-US>,
r1</span>에 저장</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>texld</span>의 첫 번째<span lang=EN-US> Operand
</span>임시 레지스터<span lang=EN-US> r#</span>은 픽셀의 저장 장소이고<span lang=EN-US>, </span>두
번째<span lang=EN-US> Operand t#</span>은 텍스처 좌표에 해당합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>앞의 <span lang=EN-US>&quot;texld r0, t0&quot;</span>는<span
lang=EN-US> t0(0 </span>번째<span lang=EN-US> Stage </span>텍스처 좌표<span
lang=EN-US>)</span>에 해당되는 픽셀을<span lang=EN-US> r0</span>에 저장하고<span lang=EN-US>,
&quot;texld r1, t1&quot;</span>은<span lang=EN-US> 1 </span>번째 텍스처 좌표<span
lang=EN-US>(t1)</span>의 픽셀을<span lang=EN-US> r1</span>에 저장하는 것입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>픽셀 쉐이더<span lang=EN-US> 2.0</span>부터 텍스처 색상을 추출하는 샘플러 객체<span
lang=EN-US> &quot;s#&quot;</span>와 임시 레지스터<span lang=EN-US> r0 </span>대신 출력 레지스터<span
lang=EN-US> &quot;oC#&quot;</span>이 추가되었습니다<span lang=EN-US>. </span>그리고 문법 체계도
바뀌어서 정점 쉐이더 문법과 비슷하게 입력 레지스터를 모두 선언해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>다음은 샘플러와 입력 레지스터를 선언하고 텍스처에서 색상을 추출하는 예입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>ps_2_0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl_2d&nbsp; s0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// 2</span><span style='color:green'>차원 텍스처에 대한 샘플러
선언</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>t0</span><span lang=EN-US>.xy&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// 0</span><span style='color:green'>번<span
lang=EN-US> Stage</span>에 대한<span lang=EN-US> 2</span>차원<span lang=EN-US> xy </span>텍스처
좌표 선언</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>texld&nbsp;&nbsp; r0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:blue'>t0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:blue'>s0</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US style='color:green'>//
</span><span style='color:green'>샘플러를 사용한 텍스처 색상 추출</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#A000A0'>mov&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>oC0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>r0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력 레지스터에 복사</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>샘플러 선언은<span lang=EN-US> 1</span>차원 텍스처는<span lang=EN-US>
&quot;dcl_1d s#&quot;, 2</span>차원 텍스처는<span lang=EN-US> &quot;dcl_2d s#&quot;, </span>입방체<span
lang=EN-US>(cube) </span>텍스처는<span lang=EN-US> &quot;dcl_cube s#&quot;, </span>볼륨
텍스처는<span lang=EN-US> &quot;dcl_volume s#&quot;</span>을 선언할 때 사용 합니다<span
lang=EN-US>. </span>텍스처 좌표 지정은<span lang=EN-US> &quot;dcl t#&quot;</span>로 합니다<span
lang=EN-US>. 1</span>차원 텍스처 좌표는<span lang=EN-US> &quot;dcl t#.x&quot;, 2</span>차원
텍스처 좌표는<span lang=EN-US> &quot;dcl t#.xy&quot; </span>등<span lang=EN-US> t# </span>레지스터
다음에 각 차원에 해당하는 좌표계만큼<span lang=EN-US> x, y, z, w </span>순서대로 적습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>샘플러 레지스터의 번호는 고정 기능 파이프라인에서 디바이스의<span lang=EN-US>
SetTexture() </span>함수 첫 번째 인수의<span lang=EN-US> Stage</span>에 해당합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>텍스처에서 색상을 가져오는 샘플링 명령은<span lang=EN-US> texld</span>를 사용합니다<span
lang=EN-US>. 2.0</span>에서<span lang=EN-US> texld</span>는<span lang=EN-US> 3</span>개의<span
lang=EN-US> Operand</span>를 사용합니다<span lang=EN-US>. </span>첫 번째<span
lang=EN-US> Operand</span>는 추출한 색상을 저장 장소이고<span lang=EN-US>, </span>두 번째<span
lang=EN-US> Operand</span>는 텍스처 좌표 레지스터<span lang=EN-US> t#</span>입니다<span
lang=EN-US>. </span>세 번째<span lang=EN-US> Operand</span>는 샘플러 레지스터<span
lang=EN-US> s#</span>입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>이렇게 샘플러<span lang=EN-US>, </span>텍스처 좌표 등이 분리되어 있어서 한 개의 텍스처
좌표가 입력되더라도 이것을 변화시켜가면서 샘플링 할 수 있어서 다중 텍스처 처리<span lang=EN-US>(Multi-Texturing),
Post Effect </span>등에서 픽셀 쉐이더<span lang=EN-US> 2.0 </span>이상을 사용하는 것이 작업하기에 편리합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>D3D </span>픽셀 쉐이더<span lang=EN-US> 2.0</span>은
픽셀의 결과에 대해서 <span lang=EN-US>Multi-element</span>에 대한 출력이 가능합니다<span
lang=EN-US>. </span>출력 레지스터<span lang=EN-US> oC#</span>는<span lang=EN-US> oC0 ~
0C3</span>까지 있으며 최소한<span lang=EN-US> oC0 </span>레지스터 출력이 설정되어야 쉐이더 컴파일이 됩니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>지금까지 쉐이더 버전마다 텍스처 샘플링에 대해서 살펴보았습니다<span lang=EN-US>. </span>쉐이더를
사용한 다중 텍스처 처리는 색상의 연산이므로 샘플링에 대한 방법만 알면 간단하게 만들 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>다음은 텍스처의 색상을 그대로 화면에 출력하는 쉐이더 코드 입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>ps_1_1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>tex</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>t0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>텍스처 좌표<span
lang=EN-US> t0</span>에 대한 샘플링</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mov</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>t0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력 레지스터에 복사</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>또는 </p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>ps_2_0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl_2d&nbsp; s0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// 2D </span><span style='color:green'>샘플러 선언</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>t0</span><span lang=EN-US>.xy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// 2</span><span style='color:green'>차원 텍스처 좌표 선언</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>texld&nbsp;&nbsp; r0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>t0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>s0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>샘플링</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#A000A0'>mov&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US>oC0, </span><span lang=EN-US style='color:blue'>r0</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// </span><span style='color:green'>출력 레지스터에 복사</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image071.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>단순 텍스처 색상 출력<span lang=EN-US>: <a
href="https://github.com/3dapi/bs25_shader1/raw/master/s1p_02_1tex1.zip">s1p_02_1tex1.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>대부분 정점 처리의<span lang=EN-US> Diffuse </span>또는<span
lang=EN-US> Specular </span>값과 혼합해서 출력합니다<span lang=EN-US>. </span>픽셀 쉐이더에서 정점 처리의<span
lang=EN-US> Diffuse</span>와<span lang=EN-US> Specular</span>는 입력 레지스터<span
lang=EN-US> v0, v1</span>으로 선언하고 텍스처 좌표는<span lang=EN-US> t#</span>으로 선언해서 사용합니다<span
lang=EN-US>. </span>정점 구조체와 정점 쉐이더 출력 레지스터<span lang=EN-US>, </span>픽셀 쉐이더 입력 레지스터의
관계를 비고 하면 다음 그림과 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=348 height=181
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image072.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>정점 구조체<span lang=EN-US>, </span>정점
쉐이더 출력 레지스터<span lang=EN-US>, </span>픽셀 쉐이더 입력 레지스터와의 관계<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>간단하게 다중 텍스처 처리의 색상 연산<span lang=EN-US> MODULATE4X </span>를 쉐이더로
구현해봅시다<span lang=EN-US>. MODULATE4X </span>는<span lang=EN-US> ARG1</span>과<span
lang=EN-US> ARG2</span>를 곱하고 다시<span lang=EN-US> 4</span>배를 합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i><span lang=EN-US>MODULATE4X </span></i><i>최종 색상<span
lang=EN-US> = </span>정점 처리<span lang=EN-US> Diffuse * </span>텍스처 색상<span
lang=EN-US> * 4</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>ps_1_1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>tex</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>t0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// 0</span><span style='color:green'>번 째<span
lang=EN-US> Stage</span>의 텍스처를<span lang=EN-US> t0</span>에 샘플링</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#880000'>mul_x4</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>t0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>v0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력 색상<span
lang=EN-US> = </span>텍스처<span lang=EN-US> * Diffuse * 4</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>또는</p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>ps_2_0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>def</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>c31</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>4</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl&nbsp;&nbsp;&nbsp;&nbsp; v0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Diffuse </span><span style='color:green'>선언</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>dcl_2d&nbsp; s0</span><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// 2D </span><span style='color:green'>샘플러</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>t0</span><span lang=EN-US>.xy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// 0</span><span style='color:green'>번<span
lang=EN-US> Stage</span>의 텍스처 좌표</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>texld</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>t0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>s0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>샘플링</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mul</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>v0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>색상<span
lang=EN-US> = </span>텍스처<span lang=EN-US> * Diffuse</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mul</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>c31</span><span lang=EN-US>.x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>색상<span
lang=EN-US> *= 4</span></span></p>

<p class=MsoNormal><span lang=EN-US style='color:#A000A0'>mov</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>oC0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:blue'>r0</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>1.X </span>버전에서는 수정자<span lang=EN-US>(modifier)
modifier</span>가 있어서 명령문을 줄일 수 있습니다<span lang=EN-US>. </span>앞의<span
lang=EN-US> mul_x4</span>는<span lang=EN-US> mul </span>연산과 이 연산의 결과에<span
lang=EN-US> 4</span>배를 지시하는 것입니다<span lang=EN-US>. </span>나누기는<span lang=EN-US>
_d2, _d4, _d8 </span>등이 있지만 사용을 잘 안 합니다<span lang=EN-US>. </span>또한 결과의 범위를<span
lang=EN-US> [0, 1]</span>로 한정하는<span lang=EN-US> _sat(Saturation)</span>도 있습니다<span
lang=EN-US>. </span>그런데 아쉽게도 <span lang=EN-US>2.0</span>부터 이들 수정자는 사용할 수 없고 상수를
설정해서 직접 계산해야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=244 height=181
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image073.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>멀티 텍스처<span lang=EN-US>
MODULATE4X: <a href="https://github.com/3dapi/bs25_shader1/raw/master/s1p_02_1tex2.zip">s1p_02_1tex2.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>고정 기능 파이프라인은 색상 처리 방식이 몇 가지로 한정되어 있지만 픽셀 쉐이더를 사용하면 처리 방식이 자유롭고
쉽게 코드로 만들 수 있습니다<span lang=EN-US>. </span>예를 들어 다음과 같이 최종 색상을 만든다고 합시다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>최종 색상<span lang=EN-US> = </span>외부 색상 <span lang=EN-US>*
Diffuse * </span>텍스처 색상<span lang=EN-US> + </span>베이스 색상</i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이것을 고정 기능 파이프라인에서 구현하려면<span lang=EN-US> 3</span>개 이상의 다중 처리<span
lang=EN-US>(Multi-Texturing)</span>을 거쳐야 합니다<span lang=EN-US>. </span>하지만 이것을 쉐이더
코드로 작성하면 다음과 같이 간단하게 만들 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>ps_1_1</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>def</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>c0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>2</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>2</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>2</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>베이스 색상</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>tex</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>t0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// 0</span><span style='color:green'>번<span
lang=EN-US> Stage</span>의 텍스처를<span lang=EN-US> t0</span>에 샘플링</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mul</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>c1</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>v0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>외부 상수 값과<span
lang=EN-US> Diffuse </span>곱셈</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mul</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r1</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>t0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// r1 = Diffuse * c1 * texture </span><span
style='color:green'>색상</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>add</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>r1</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>c0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력<span
lang=EN-US>= r1 + c0</span></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>또는</p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>ps_2_0</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>def</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>c0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>2</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>2</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>2</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl&nbsp;&nbsp;&nbsp;&nbsp; v0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl_2d&nbsp; s0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// 2D </span><span style='color:green'>샘플러</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>t0</span><span lang=EN-US>.xy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// 0</span><span style='color:green'>번<span
lang=EN-US> Stage</span>의 텍스처 좌표</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>texld</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>t0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>s0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>샘플링</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mul</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r1</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>c1</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>v0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// r1 = </span><span style='color:green'>외부 상수 값<span
lang=EN-US>* Diffuse</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mul</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r1</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>r1</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// r1 = Diffuse * c1 * texture </span><span
style='color:green'>색상</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>add</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>r1</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>c0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>색상<span
lang=EN-US> = r1 + c0</span></span></p>

<p class=MsoNormal><span lang=EN-US style='color:#A000A0'>mov</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>oC0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:blue'>r0</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image074.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>다중 텍스처 처리<span lang=EN-US>(Multi-Texturing):
<a href="https://github.com/3dapi/bs25_shader1/raw/master/s1p_02_1tex3.zip">s1p_02_1tex3.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>두 개의 텍스처의 혼합도 쉐이더를 사용하면 무척 편리합니다<span lang=EN-US>. </span>입력된
두 텍스처의 색상을 더하고<span lang=EN-US> Diffuse</span>와 곱해서 최종 색상을 출력하도록 쉐이더를 작성하면 다음과 같이<span
lang=EN-US> 1.1</span>에서 총<span lang=EN-US> 5</span>줄이면 충분합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>ps_1_1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>tex</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>t0</span><span lang=EN-US>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// 0</span><span style='color:green'>번 째<span
lang=EN-US> Stage </span>텍스처 샘플링</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>tex</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>t1</span><span lang=EN-US>&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// 1</span><span style='color:green'>번 째<span
lang=EN-US> Stage </span>텍스처 샘플링</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>add</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>t0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>t1</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>두 텍스처 색상을 더함</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mul</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>v0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>더한 색상에<span
lang=EN-US> Diffuse</span>를 곱하고 출력 레지스터<span lang=EN-US> r0</span>에 복사</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>만약<span lang=EN-US> 1</span>번<span
lang=EN-US> Stage</span>에 대한 텍스처 좌표를<span lang=EN-US> 0</span>번<span
lang=EN-US> Stage</span>의 좌표를 사용하려면 다중 처리 상태를 다음과 같이 설정합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetTextureStageState</span><span lang=EN-US>(</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DTSS_TEXCOORDINDEX</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>1.4 </span>버전은 다음과
같이<span lang=EN-US> texld</span>를 사용하고 텍스처 좌표를 지정할 수 있어서 같은 텍스처 좌표를 사용할 때<span
lang=EN-US> 1.1 </span>버전처럼 디바이스의 다중 텍스처 처리 상태를 설정할 필요가 없습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>ps_1_4</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>texld</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>t0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// 0 </span><span style='color:green'>번째 텍스처 좌표에
해당하는<span lang=EN-US> 0</span>번 째 텍스처 샘플링</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>texld</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r1</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>t0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// 0 </span><span style='color:green'>번째 텍스처 좌표에
해당하는<span lang=EN-US> 1</span>번 째 텍스처 샘플링</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>add</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r2</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>r1</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>두 텍스처 색상을 더함</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mul</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>r2</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>v0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>더한 색상에<span
lang=EN-US> Diffuse</span>를 곱하고 출력 레지스터<span lang=EN-US> r0</span>에 복사</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>2.0</span>은<span
lang=EN-US> Diffuse, </span>샘플러<span lang=EN-US>, </span>텍스처 좌표를 전부 선언해야만 사용할 수
있기 때문에 이 부분에 대해서만 코드가 길어질 뿐입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>ps_2_0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>dcl&nbsp;&nbsp;&nbsp;&nbsp; v0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>dcl_2d&nbsp; s0</span><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// 2D </span><span style='color:green'>샘플러<span
lang=PT-BR> 0</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>dcl_2d&nbsp; s1</span><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// 2D </span><span style='color:green'>샘플러<span
lang=PT-BR> 1</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>t0</span><span lang=EN-US>.xy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Texture Coordinate at stage 0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>texld&nbsp;&nbsp; r0</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:blue'>t0</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:blue'>s0</span><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// 0</span><span style='color:green'>번 텍스처 좌표에 해당하는<span
lang=PT-BR> 0</span>번 텍스처 샘플링</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>texld&nbsp;&nbsp; r1</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:blue'>t0</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:blue'>s1</span><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// 0</span><span style='color:green'>번 텍스처 좌표에 해당하는<span
lang=PT-BR> 1</span>번 텍스처 샘플링</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>add&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:blue'>r2</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>r1</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>두 텍스처 색상을 더함</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mul&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>r2</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>v0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>더한 색상에<span
lang=EN-US> Diffuse</span>를 곱함</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#A000A0'>mov&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>oC0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>r0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image075.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Multi-Texturing: <a
href="https://github.com/3dapi/bs25_shader1/raw/master/s1p_02_2tex_multi.zip">s1p_02_2tex_multi.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>3.3 </span><span
style='font-size:14.0pt'>단색 화면<span lang=EN-US>(</span></span><span lang=EN-US
style='font-size:12.0pt'>Monotone Effect)</span></p>

<p class=MsoNormal>만약 쉐이더를 사용하지 않고 출력 색상을 단색으로 만들고자 한다면 여러분은 디바이스의 후면 버퍼를 구성하는 색상버퍼에서
픽셀을 가져와 단색으로 만들어야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>IDirect3DSurface9</span><span lang=EN-US>*&nbsp;&nbsp;&nbsp;&nbsp; pSrc;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>hr =
m_pd3dDevice-&gt;</span><span lang=EN-US style='color:#880000'>GetBackBuffer</span><span
lang=EN-US>(</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>,
</span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:#A000A0'>D3DBACKBUFFER_TYPE_MONO</span><span
lang=EN-US>, &amp;pSrc);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>hr = pSrc-&gt;</span><span
lang=EN-US style='color:#880000'>LockRect</span><span lang=EN-US>(&amp;rc, </span><span
lang=EN-US style='color:#A000A0'>NULL</span><span lang=EN-US>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>DWORD</span><span lang=EN-US>*&nbsp; pColor = (</span><span
lang=EN-US style='color:blue'>DWORD</span><span lang=EN-US>*)rc.pBits;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US>(</span><span lang=EN-US
style='color:blue'>int</span><span lang=EN-US> i=</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>; i&lt;dsc.Width* dsc.Height; ++i)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>D3DXCOLOR</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; color
= pColor[i];</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>&nbsp;&nbsp; d =
color.r * </span><span lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span
lang=EN-US style='color:red'>299f</span><span lang=EN-US> + color.g * </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>587f</span><span lang=EN-US> + color.b * </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>114f</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pColor[i]
= </span><span lang=EN-US style='color:blue'>D3DXCOLOR</span><span lang=EN-US>(d,d,d,</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image076.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>화면 전체에 대한 단색화<span lang=EN-US>: <a
href="https://github.com/3dapi/bs25_shader1/raw/master/s1p_03_mono0_fixed.zip">s1p_03_mono0_fixed.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>전체 화면을 단색으로 멋지게 처리했지만 가장 큰 문제는 프레임 속도 입니다<span lang=EN-US>. </span>이
방식의 문제는 어떤 하드웨어 가속도 지원이 되지 않는 방식이라서 렌더링 속도가 빨라야<span lang=EN-US> ~10 FPS </span>정도여서
게임에서 사용하기는 부적합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>쉐이더를 사용하면 렌더링 속도의 저하 없이 화면 전체를 단색으로 만들 수 있습니다<span
lang=EN-US>. </span>방식은 다음 그림처럼<span lang=EN-US> 3D </span>장면을 텍스처에 저장하고 이 텍스처를
화면 영역과 동일한<span lang=EN-US> 4</span>개의 정점에 매핑 한 다음 다시 디바이스에 출력하는 것입니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=492 height=137
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image077.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>화면 단색화 방법<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>픽셀을 하나의 색상으로 만드는 단색화 방법은 이전에 살펴 보았고 이것을 다음과 같은 공식으로 표현할 수 있음을
우리는 알고 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><i>단색화 색상<span lang=EN-US> = dot( (R, G, B), (0.299, 0.587,
0.114) )</span></i></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이것을 텍스처에 적용하면 다음과 같이 작성 할 수 있습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>ps_2_0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>def</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>c0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>299</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>587</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>114</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl&nbsp;&nbsp;&nbsp;&nbsp; v0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>dcl_2d&nbsp; s0</span><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// 2D </span><span style='color:green'>샘플러<span
lang=PT-BR> 0</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>t0</span><span lang=EN-US>.xy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>텍스처 좌표</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>texld&nbsp;&nbsp; r0</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:blue'>t0</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:blue'>s0</span><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// </span><span style='color:green'>샘플링<span
lang=PT-BR> 0</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>dp3&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>c0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>내적으로 단색 색상 생성</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#A000A0'>mov&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US>oC0, </span><span lang=EN-US style='color:blue'>r0</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:green'>// </span><span style='color:green'>출력</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=240 height=180
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image078.jpg">&nbsp;<img border=0 width=241 height=181
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image079.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>텍스처 단색화 출력<span lang=EN-US>: <a
href="https://github.com/3dapi/bs25_shader1/raw/master/s1p_03_mono1.zip">s1p_03_mono1.zip</a>, <a href="https://github.com/3dapi/bs25_shader1/raw/master/s1p_03_mono2.zip">s1p_03_mono2.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>다음으로 화면 전체를 실시간으로 만든 텍스처에 렌더링 해야 하는데 이것은 서피스 효과 강좌에서 만들었던 <span
lang=EN-US>IrenderTarget </span>객체를 이용하겠습니다<span lang=EN-US>. IrenderTarget </span>사용은
다음과 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>IrenderTarget</span><span
lang=EN-US>* m_pTrnd;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>CMain</span><span
lang=EN-US>::</span><span lang=EN-US style='color:#880000'>Init</span><span
lang=EN-US>()</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>렌더 타깃 용 텍스처 생성</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US>(</span><span lang=EN-US
style='color:#A000A0'>FAILED</span><span lang=EN-US>(</span><span lang=EN-US
style='color:#880000'>LcD3D_CreateRenderTarget</span><span lang=EN-US>(…)))</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> -</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>CMain</span><span
lang=EN-US>::</span><span lang=EN-US style='color:#880000'>FrameMove</span><span
lang=EN-US>()</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>렌더 타깃에 장면 그리기</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pTrnd-&gt;</span><span
lang=EN-US style='color:#880000'>BeginScene</span><span lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>this</span><span lang=EN-US>-&gt;</span><span
lang=EN-US style='color:#880000'>RenderScene</span><span lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>m_pTrnd-&gt;</span><span lang=EN-US
style='color:#880000'>EndScene</span><span lang=EN-US>();</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='color:blue'>CMain</span><span
lang=EN-US>::</span><span lang=EN-US style='color:#880000'>Render</span><span
lang=EN-US>()</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// </span><span style='color:green'>쉐이더 실행<span lang=EN-US>,
</span>전체 화면에 다시 그리기</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>LPDIRECT3DTEXTURE9</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; pTx
= (</span><span lang=EN-US style='color:blue'>LPDIRECT3DTEXTURE9</span><span
lang=EN-US>)m_pTrnd-&gt;</span><span lang=EN-US style='color:#880000'>GetTexture</span><span
lang=EN-US>();</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>m_pShader-&gt;</span><span
lang=EN-US style='color:#880000'>SetSceneTexture</span><span lang=EN-US>(pTx);</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#A000A0'>SAFE_RENDER</span><span
lang=EN-US>(&nbsp;&nbsp; m_pShader&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>색상을 곱하면 어두워지므로 곱셈의 단색화 색상에 대한 색상 비중 값을 좀 더 밝게 올리고 외부에서 색상을 조정할
수 있도록 쉐이더를 작성하면 다음과 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>ps_1_1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>def</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>c0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>8</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>9</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>4</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>색상 비중 값</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>tex</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>t0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// 0 </span><span style='color:green'>번 스테지 텍스처 샘플링</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>dp3</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>t0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>c0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>내적으로 간단히 단색 만듦</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mul</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>c1</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>외부 상수와 곱해서 최종
색상 출력</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'>또는</p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>ps_2_0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>def</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>c0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>8</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>9</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>4</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl&nbsp;&nbsp;&nbsp;&nbsp; v0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>dcl_2d&nbsp; s0</span><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// 2D </span><span style='color:green'>샘플러<span
lang=PT-BR> 0</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>t0</span><span lang=EN-US>.xy&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>텍스처 좌표<span
lang=EN-US> 0</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>texld&nbsp;&nbsp; r0</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:blue'>t0</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:blue'>s0</span><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// </span><span style='color:green'>샘플링</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>dp3</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>c0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>내적으로 단색 색상 생성</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mul</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>c1</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>외부 상수와 곱해서 최종
색상 출력</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#A000A0'>mov</span><span
lang=EN-US> </span><span lang=EN-US>oC0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>r0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image080.jpg">&nbsp;<img border=0 width=242 height=182
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image081.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>단색화 화면<span lang=EN-US>: <a
href="https://github.com/3dapi/bs25_shader1/raw/master/s1p_03_mono3_shader.zip">s1p_03_mono3_shader.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>3.4 Blur </span><span
style='font-size:14.0pt'>효과</span></p>

<p class=MsoNormal>흐림<span lang=EN-US>(Blur) </span>효과는 단색 효과와 마찬가지로 픽셀 쉐이더를 사용하는
대표적인 예 입니다<span lang=EN-US>. </span>흐림 효과는<span lang=EN-US> Gaussian blur</span>를
많이 사용하지만 여기서는 단순하게 픽셀에 인접한 좌<span lang=EN-US>, </span>우<span lang=EN-US>, </span>상<span
lang=EN-US>, </span>하 픽셀들과 자기 자신을 더한 값의 평균을 최종 색상으로 정하는 방식을 구현해 보겠습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal>샘플링은 자신을 포함해서 좌<span lang=EN-US>, </span>우<span lang=EN-US>,
</span>상<span lang=EN-US>, </span>하 총<span lang=EN-US> 5</span>번 진행되기 때문에 좌표 또한
정점의 구조체는 총<span lang=EN-US> 5</span>개의 텍스처 좌표를 가지고 있어야 합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>struct</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>VtxDUV1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>{</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>VEC3</span><span lang=EN-US>&nbsp;&nbsp;&nbsp; p;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>DWORD</span><span lang=EN-US>&nbsp;&nbsp; d;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT&nbsp;&nbsp; </span><span lang=EN-US>u0,v0;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT&nbsp;&nbsp; </span><span lang=EN-US>u1,v1;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT&nbsp;&nbsp; </span><span lang=EN-US>u2,v2;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT&nbsp;&nbsp; </span><span lang=EN-US>u3,v3;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>FLOAT&nbsp;&nbsp; </span><span lang=EN-US>u4,v4;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>};</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 구조체에 각각의<span lang=EN-US> uv </span>좌표를 설정한 다음과 같이 쉐이더 코드를
작성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR style='color:blue'>ps_1_4</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR style='color:blue'>def</span><span
lang=FR> </span><span lang=FR style='color:blue'>c0</span><span lang=FR>, </span><span
lang=FR style='color:red'>0</span><span lang=FR>, </span><span lang=FR
style='color:red'>0</span><span lang=FR>, </span><span lang=FR
style='color:red'>0</span><span lang=FR>, </span><span lang=FR
style='color:red'>0</span><span lang=FR>.</span><span lang=FR style='color:
red'>2</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=FR style='color:blue'>texld</span><span
lang=FR> </span><span lang=FR style='color:blue'>r0</span><span lang=FR>, </span><span
lang=FR style='color:blue'>t0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>texld</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r1</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>t1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>texld</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r2</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>t2</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>texld</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r3</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>t3</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>texld</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r4</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>t4</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>add</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r5</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r0</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>add</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r5</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r5</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r2</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>add</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r5</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r5</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r3</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>add</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r5</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r5</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r4</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>mul</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r1</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r5</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>c0</span><span lang=PT-BR>.wwww</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mov</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>r0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:blue'>r1</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>렌더링에서 같은 텍스처를 여러 <span lang=EN-US>Stage</span>에 연결합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>for</span><span lang=EN-US>(i=</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>; i&lt;</span><span lang=EN-US
style='color:red'>5</span><span lang=EN-US>; ++i)</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetTexture</span><span lang=EN-US>(i, m_pTx);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이렇게 설정한 다음 렌더링 하면 흐림 효과를 만들어 낼 수 있으며 전체 코드는 <span
lang=EN-US><a href="https://github.com/3dapi/bs25_shader1/raw/master/s1p_04_blur1.zip">s1p_04_blur1.zip</a></span>를 참고 하기 바랍니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>픽셀 쉐이더<span lang=EN-US> 2.0</span>이상을 사용하면 텍스처 좌표를 변화해 가며 샘플링
할 수 있습니다<span lang=EN-US>. </span>다음의 쉐이더 코드에서 상수 값은 <span lang=EN-US>3.5f/800.f,
3.5f/256.f </span>값으로 바로 인접한 픽셀이 아닌 <span lang=EN-US>3.5</span>만큼 떨어져 있는 픽셀을 샘플링
하기 위한 값입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>ps_2_0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>def</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>c0</span><span lang=EN-US>,  </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>,-</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>004375f</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>2</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>def</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>c1</span><span lang=EN-US>,  </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>004375f</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>def</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>c2</span><span lang=EN-US>, -</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>005833f</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>def</span><span lang=EN-US> </span><span lang=EN-US
style='color:blue'>c3</span><span lang=EN-US>, -</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>005833f</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>, </span><span lang=EN-US
style='color:red'>0</span><span lang=EN-US>.</span><span lang=EN-US
style='color:red'>0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl_2d&nbsp; s0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// 2D </span><span style='color:green'>샘플러</span><span
lang=EN-US style='color:green'> 0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>t0</span><span lang=EN-US>.xyzw&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>텍스처 좌표<span
lang=EN-US> 0</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>add</span><span lang=EN-US>&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>r0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>c0</span><span lang=EN-US>, </span><span
lang=EN-US style='color:blue'>t0</span><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>텍스처 좌표를 왼쪽<span
lang=EN-US>(0, -3.5)</span>으로 이동</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>texld</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r0</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r0</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>s0</span><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// Sampling texcoord (0, -3.5)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>add</span><span lang=PT-BR>&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>r1</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:blue'>c1</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:blue'>t0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>texld</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r1</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r1</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>s0</span><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// Sampling texcoord (0, +3.5)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>add</span><span lang=PT-BR>&nbsp;&nbsp; </span><span
lang=PT-BR style='color:blue'>r2</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:blue'>c2</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:blue'>t0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>texld</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r2</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r2</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>s0</span><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// Sampling texcoord (-3.5, 0)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>add</span><span lang=PT-BR>&nbsp; &nbsp;</span><span
lang=PT-BR style='color:blue'>r3</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:blue'>c3</span><span lang=PT-BR>, </span><span
lang=PT-BR style='color:blue'>t0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>texld</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r3</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r3</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>s0</span><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// Sampling texcoord (+3.5, 0)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>texld</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r4</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>t0</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>s0</span><span lang=PT-BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// Sampling texcoord (0, 0)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>add</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r0</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r0</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>add</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r0</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r0</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r2</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>add</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r0</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r0</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r3</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>add</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r0</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r0</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r4</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>mul</span><span lang=PT-BR> </span><span lang=PT-BR
style='color:blue'>r0</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>r0</span><span lang=PT-BR>, </span><span lang=PT-BR
style='color:blue'>c0</span><span lang=PT-BR>.wwww</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#A000A0'>mov</span><span
lang=EN-US> </span><span lang=EN-US style='color:blue'>oC0</span><span
lang=EN-US>, </span><span lang=EN-US style='color:blue'>r0</span><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>출력</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>쉐이더 코드가 조금 길어졌는데 흐림 효과는 저 수준으로 작성하는 것보다 <span lang=EN-US>HLSL</span>을
사용하는 것이 편리합니다<span lang=EN-US>. </span>저 수준은 <span lang=EN-US>&quot;</span>이렇게 하는
방법도 있구나<span lang=EN-US>&quot; </span>하는 정도로만 기억하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image082.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>흐림 효과<span lang=EN-US>: <a
href="https://github.com/3dapi/bs25_shader1/raw/master/s1p_04_blur1.zip">s1p_04_blur1.zip</a>, <a href="https://github.com/3dapi/bs25_shader1/raw/master/s1p_04_blur2.zip">s1p_04_blur2.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>3.5 Shader Effect</span></p>

<p class=MsoNormal>앞서 정점 쉐이더를 <span lang=EN-US>Wrapping </span>하기 위해서 <span
lang=EN-US>ILcShader</span>를 만들었습니다<span lang=EN-US>. </span>이 클래스를 픽셀 쉐이더에서도 사용할
수 있도록 수정해 봅시다<span lang=EN-US>. </span>클래스의 인터페이스 모양은 변하지 않고<span lang=EN-US>, </span>생성
함수에서 정점 쉐이더와 픽셀 쉐이더를 구분할 수 있도록 인수를 추가합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// sCmd: Vertex Shader: &quot;vs&quot;, Pixel Shader:
&quot;ps&quot;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>LcDev_CreateShaderFromFile</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US>* sCmd</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:blue'>ILcShader</span><span lang=EN-US>**
pData, </span><span lang=EN-US style='color:blue'>void</span><span lang=EN-US>*
pDevice, </span><span lang=EN-US style='color:blue'>char</span><span
lang=EN-US>* sFile);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>LcDev_CreateShaderFromString</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US>* sCmd</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,
</span><span lang=EN-US style='color:blue'>ILcShader</span><span lang=EN-US>**
pData, </span><span lang=EN-US style='color:blue'>void</span><span lang=EN-US>*
pDevice, </span><span lang=EN-US style='color:blue'>char</span><span
lang=EN-US>* sString, </span><span lang=EN-US style='color:blue'>INT</span><span
lang=EN-US> iLen);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>CreateShaderFromFile() </span>함수에서 정점 쉐이더 또는
픽셀 쉐이더 타입을 결정하고<span lang=EN-US> ILcShader </span>객체를 생성합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT</span><span lang=EN-US> </span><span lang=EN-US
style='color:#880000'>LcDev_CreateShaderFromFile</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US>* sCmd, </span><span
lang=EN-US style='color:blue'>ILcShader</span><span lang=EN-US>** pData, </span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>* pDevice, </span><span
lang=EN-US style='color:blue'>char</span><span lang=EN-US>* sFile)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> == </span><span
lang=EN-US style='color:#880000'>_stricmp</span><span lang=EN-US>(sCmd, </span><span
lang=EN-US style='color:fuchsia'>&quot;vs&quot;</span><span lang=EN-US>))</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p-&gt;</span><span
lang=EN-US style='color:#880000'>SetShaderType</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>CLcShader</span><span lang=EN-US>::</span><span
lang=EN-US style='color:#A000A0'>ELC_VS</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>( </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US> == </span><span
lang=EN-US style='color:#880000'>_stricmp</span><span lang=EN-US>(sCmd, </span><span
lang=EN-US style='color:fuchsia'>&quot;ps&quot;</span><span lang=EN-US>))</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p-&gt;</span><span
lang=EN-US style='color:#880000'>SetShaderType</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>CLcShader</span><span lang=EN-US>::</span><span
lang=EN-US style='color:#A000A0'>ELC_PS</span><span lang=EN-US>);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US>{&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>delete</span><span lang=EN-US> p; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> -</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>FAILED</span><span lang=EN-US>(p-&gt;</span><span
lang=EN-US style='color:#880000'>Create</span><span lang=EN-US>(pDevice,
sFile)))</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>delete</span><span lang=EN-US> p; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> -</span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US>;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *pData
= p;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US>;</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>함수의 구현에서는<span lang=EN-US> sCmd </span>값을 가지고 정점 쉐이더와 픽셀 쉐이더를
구분해서 객체를 생성하는<span lang=EN-US> CLsShader::Create() </span>함수를 정점 쉐이더 또는 픽셀 쉐이더 객체를
생성할 수 있도록 다음과 같이 변경합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>INT CLcShader</span><span lang=EN-US>::</span><span
lang=EN-US style='color:#880000'>Create</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>* p1, </span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>* p2, </span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>* p3, </span><span
lang=EN-US style='color:blue'>void</span><span lang=EN-US>* p4)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Vertex Shader</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>ELC_VS</span><span lang=EN-US> == m_nShader)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hr
= m_pDev-&gt;</span><span lang=EN-US style='color:#880000'>CreateVertexShader</span><span
lang=EN-US>( (</span><span lang=EN-US style='color:blue'>DWORD</span><span
lang=EN-US>*)pShd-&gt;</span><span lang=EN-US style='color:#880000'>GetBufferPointer</span><span
lang=EN-US>()</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;,
&amp;m_pVs);</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Pixel Shader</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>else</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>if</span><span lang=EN-US>(</span><span
lang=EN-US style='color:#A000A0'>ELC_PS</span><span lang=EN-US> == m_nShader)</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hr
= m_pDev-&gt;</span><span lang=EN-US style='color:#880000'>CreatePixelShader</span><span
lang=EN-US>( (</span><span lang=EN-US style='color:blue'>DWORD</span><span
lang=EN-US>*)pShd-&gt;</span><span lang=EN-US style='color:#880000'>GetBufferPointer</span><span
lang=EN-US>()</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;,
&amp;m_pPs);</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>쉐이더 상수를 설정하는<span lang=EN-US> SetMatrix(), SetVector(),
SetColor(), SetFloat() </span>함수도 정점 쉐이더와 픽셀 쉐이더 둘 다 지원할 수 있도록 수정합니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>CLcShader</span><span lang=EN-US>::</span><span
lang=EN-US style='color:#880000'>SetVector</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US> uReg, </span><span
lang=EN-US style='color:blue'>const</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>D3DXVECTOR4</span><span lang=EN-US>* v)</span></p>

<p class=MsoNormal><span lang=EN-US>{</span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US>(</span><span lang=EN-US
style='color:#A000A0'>ELC_VS</span><span lang=EN-US> == m_nShader)</span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetVertexShaderConstantF</span><span
lang=EN-US>( uReg , (</span><span lang=EN-US style='color:blue'>FLOAT</span><span
lang=EN-US>*)v , </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:blue'>return</span><span lang=EN-US> m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetPixelShaderConstantF</span><span
lang=EN-US>( uReg , (</span><span lang=EN-US style='color:blue'>FLOAT</span><span
lang=EN-US>*)v , </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>CLcShader</span><span lang=EN-US>::</span><span
lang=EN-US style='color:#880000'>SetColor</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US> uReg, </span><span
lang=EN-US style='color:blue'>const</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>D3DXCOLOR</span><span lang=EN-US>* v)</span></p>

<p class=MsoNormal><span lang=EN-US>{</span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US>(</span><span lang=EN-US
style='color:#A000A0'>ELC_VS</span><span lang=EN-US> == m_nShader)</span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetVertexShaderConstantF</span><span
lang=EN-US>( uReg , (</span><span lang=EN-US style='color:blue'>FLOAT</span><span
lang=EN-US>*)v , </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:blue'>return</span><span lang=EN-US> m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetPixelShaderConstantF</span><span
lang=EN-US>( uReg , (</span><span lang=EN-US style='color:blue'>FLOAT</span><span
lang=EN-US>*)v , </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>CLcShader</span><span lang=EN-US>::</span><span
lang=EN-US style='color:#880000'>SetFloat</span><span lang=EN-US>(</span><span
lang=EN-US style='color:blue'>INT</span><span lang=EN-US> uReg, </span><span
lang=EN-US style='color:blue'>const</span><span lang=EN-US> </span><span
lang=EN-US style='color:blue'>FLOAT</span><span lang=EN-US>* v)</span></p>

<p class=MsoNormal><span lang=EN-US>{</span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:blue'>if</span><span lang=EN-US>(</span><span lang=EN-US
style='color:#A000A0'>ELC_VS</span><span lang=EN-US> == m_nShader)</span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>return</span><span lang=EN-US> m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetVertexShaderConstantF</span><span
lang=EN-US>( uReg , (</span><span lang=EN-US style='color:blue'>FLOAT</span><span
lang=EN-US>*)v , </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal align=left style='text-align:left;word-break:keep-all'><span
lang=EN-US>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang=EN-US
style='color:blue'>return</span><span lang=EN-US> m_pDev-&gt;</span><span
lang=EN-US style='color:#880000'>SetPixelShaderConstantF</span><span
lang=EN-US>( uReg , (</span><span lang=EN-US style='color:blue'>FLOAT</span><span
lang=EN-US>*)v , </span><span lang=EN-US style='color:red'>1</span><span
lang=EN-US>);</span></p>

<p class=MsoNormal><span lang=EN-US>}</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>Begin()</span><span lang=EN-US>/End() </span>함수도
같은 방식으로 정점 쉐이더<span lang=EN-US>, </span>픽셀 쉐이더 지원이 되도록 수정합니다<span lang=EN-US>. </span>전체
코드는 다음 예제를 참고하기 바랍니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><a href="https://github.com/3dapi/bs25_shader1/raw/master/s1p_05_IShaderEffect.zip">s1p_05_IShaderEffect.zip</a></span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US style='font-size:14.0pt'>3.6 Shader Effect</span></p>

<p class=MsoNormal>앞서 픽셀 쉐이더<span lang=EN-US> 2.0 </span>이상은 샘플러<span
lang=EN-US>, </span>텍스처 좌표 등이 분리되어 있어서 쉐이더 코드에서 같은 텍스처 좌표에 편차<span lang=EN-US>(Deviation)</span>를
주어 흐림 효과 등을 만들 수 있다고 했습니다<span lang=EN-US>. </span>흐림 효과 등 인접 픽셀을 처리할 때 미리 계산된 값들을
주변 픽셀에 가중치<span lang=EN-US>(</span>또는 비중<span lang=EN-US>: Weight)</span>을 주어 이
가중치에 각 픽셀을 곱하고 곱해진 픽셀들을 다시 더해서 최종 색상을 결정합니다<span lang=EN-US>. </span>인접한 픽셀에 가중치를
설정하는 것을 픽셀 마스킹이라 합니다<span lang=EN-US>. </span>이 마스킹 값에 따라 흐림 효과 같은 적분 형태가 될 수 있고<span
lang=EN-US>, </span>색의 변화 부분에서 날카롭게 만드는 미분 형태도 존재합니다<span lang=EN-US>. </span>특히
미분 형태 중에서 장면의 외곽선 추출은 게임 프로그램에서 자주 응용되는 기술입니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이전에 구현했던 흐림 효과에 대해서 마스킹 테이블을 구성하면 다음과 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=168 height=99
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image083.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>흐림 효과 마스킹 테이블<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>때로는 주변 픽셀의 가중 값을 음수<span lang=EN-US>(-) </span>값으로 설정 할 수 있습니다<span
lang=EN-US>. </span>결과적으로 픽셀 사이의 뺄셈이 수행되는데 이러한 형태는 미분과 흡사하며 외곽선 등 픽셀의 변화가 큰 부분을
표현할 때 사용됩니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=163 height=125
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image084.gif"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>외곽선 마스킹 테이블<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 외곽선 마스킹 테이블을 가지고 야간 투시경<span lang=EN-US>(Night Scope)</span>을
구현해 봅시다<span lang=EN-US>. </span>가장 먼저 구현해야 할 것은 화면 전체 장면을 픽셀에 저장하는 것입니다<span
lang=EN-US>. </span>이것은 이전의 단색화 과정에서 만들어 보았으므로 생략하겠습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>다음으로 다음과 같은 스코프 이미지가 필요합니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=241 height=182
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image085.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;Scope </span>이미지<span lang=EN-US>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>화면 전체를 저장한 픽셀은 마스킹 테이블의 값에 따라 총 <span lang=EN-US>9</span>번 텍스처
좌표를 변화해 가면서 샘플링 하고 가중치를 곱한 이 값들을 더해서 색상을 만듭니다<span lang=EN-US>. </span>그리고 최종 출력
픽셀을 스코프 이미지와 곱셈으로 결정하면 야간 투시경이 만들어 집니다<span lang=EN-US>.</span></p>

<p class=MsoNormal>이를 쉐이더 코드로 작성하면 다음과 같습니다<span lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>ps_2_0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>def</span><span lang=EN-US style='color:black'> </span><span
lang=EN-US style='color:blue'>c10</span><span lang=EN-US style='color:black'>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US style='color:black'>.</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US style='color:black'>, </span><span
lang=EN-US style='color:red'>1</span><span lang=EN-US style='color:black'>.</span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US style='color:black'>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US style='color:black'>.</span><span
lang=EN-US style='color:red'>8</span><span lang=EN-US style='color:black'>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// Min, Max, </span><span style='color:green'>전체
밝기</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>def</span><span lang=EN-US style='color:black'> </span><span
lang=EN-US style='color:blue'>c11</span><span lang=EN-US style='color:black'>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US style='color:black'>.</span><span
lang=EN-US style='color:red'>7</span><span lang=EN-US style='color:black'>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US style='color:black'>.</span><span
lang=EN-US style='color:red'>9</span><span lang=EN-US style='color:black'>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US style='color:black'>.</span><span
lang=EN-US style='color:red'>3</span><span lang=EN-US style='color:black'>, </span><span
lang=EN-US style='color:red'>0</span><span lang=EN-US style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// </span><span style='color:green'>색상 비중 값</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:black'>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl</span><span lang=EN-US style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:blue'>t0</span><span lang=EN-US style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// t0 </span><span style='color:green'>텍스처 좌표 선언</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl_2d</span><span lang=EN-US style='color:black'>&nbsp; </span><span
lang=EN-US style='color:blue'>s0</span><span lang=EN-US style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// 0-stage </span><span style='color:green'>샘플러 객체
선언</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>dcl_2d</span><span lang=EN-US style='color:black'>&nbsp; </span><span
lang=EN-US style='color:blue'>s1</span><span lang=EN-US style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
lang=EN-US style='color:green'>// 1-stage </span><span style='color:green'>샘플러 객체
선언</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:black'>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// Circle Image</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mov</span><span lang=EN-US style='color:black'> </span><span
lang=EN-US style='color:blue'>r0</span><span lang=EN-US style='color:black'>, </span><span
lang=EN-US style='color:blue'>t0</span><span lang=EN-US style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=EN-US style='color:green'>// </span><span style='color:green'>샘플링<span
lang=EN-US> 1-stage with 0 stage texture coordinate</span></span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>texld</span><span lang=EN-US style='color:black'> </span><span
lang=EN-US style='color:blue'>r0</span><span lang=EN-US style='color:black'>, </span><span
lang=EN-US style='color:blue'>r0</span><span lang=EN-US style='color:black'>, </span><span
lang=EN-US style='color:blue'>s1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:black'>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:green'>// Render Target Image Sampling</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>mov</span><span lang=PT-BR style='color:black'> </span><span
lang=PT-BR style='color:blue'>r1</span><span lang=PT-BR style='color:black'>, </span><span
lang=PT-BR style='color:blue'>t0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>add</span><span lang=PT-BR style='color:black'> </span><span
lang=PT-BR style='color:blue'>r1</span><span lang=PT-BR style='color:black'>, </span><span
lang=PT-BR style='color:blue'>r1</span><span lang=PT-BR style='color:black'>, </span><span
lang=PT-BR style='color:blue'>c0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:blue'>texld</span><span lang=PT-BR style='color:black'> </span><span
lang=PT-BR style='color:blue'>r1</span><span lang=PT-BR style='color:black'>, </span><span
lang=PT-BR style='color:blue'>r1</span><span lang=PT-BR style='color:black'>, </span><span
lang=PT-BR style='color:blue'>s0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:black'>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>mov</span><span lang=PT-BR style='color:black'> </span><span
lang=PT-BR style='color:blue'>r2</span><span lang=PT-BR style='color:black'>, </span><span
lang=PT-BR style='color:blue'>t0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>add</span><span lang=PT-BR style='color:black'> </span><span
lang=PT-BR style='color:blue'>r2</span><span lang=PT-BR style='color:black'>, </span><span
lang=PT-BR style='color:blue'>r2</span><span lang=PT-BR style='color:black'>, </span><span
lang=PT-BR style='color:blue'>c0</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:blue'>texld</span><span lang=EN-US style='color:black'> </span><span
lang=EN-US style='color:blue'>r2</span><span lang=EN-US style='color:black'>, </span><span
lang=EN-US style='color:blue'>r2</span><span lang=EN-US style='color:black'>, </span><span
lang=EN-US style='color:blue'>s0</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:green'>// Multiple Masking Value</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>mul</span><span lang=PT-BR style='color:black'> </span><span
lang=PT-BR style='color:blue'>r1</span><span lang=PT-BR style='color:black'>, </span><span
lang=PT-BR style='color:blue'>r1</span><span lang=PT-BR style='color:black'>, </span><span
lang=PT-BR style='color:blue'>c20</span><span lang=PT-BR style='color:black'>.</span><span
lang=PT-BR style='color:gray'>x</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>mul</span><span lang=PT-BR style='color:black'> </span><span
lang=PT-BR style='color:blue'>r2</span><span lang=PT-BR style='color:black'>, </span><span
lang=PT-BR style='color:blue'>r2</span><span lang=PT-BR style='color:black'>, </span><span
lang=PT-BR style='color:blue'>c20</span><span lang=PT-BR style='color:black'>.</span><span
lang=PT-BR style='color:gray'>y</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:green'>// Addl all Pixel</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>mov</span><span lang=PT-BR style='color:black'> </span><span
lang=PT-BR style='color:blue'>r10</span><span lang=PT-BR style='color:black'>, </span><span
lang=PT-BR style='color:blue'>r1</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>add</span><span lang=PT-BR style='color:black'> </span><span
lang=PT-BR style='color:blue'>r10</span><span lang=PT-BR style='color:black'>, </span><span
lang=PT-BR style='color:blue'>r10</span><span lang=PT-BR style='color:black'>, </span><span
lang=PT-BR style='color:blue'>r2</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>add</span><span lang=PT-BR style='color:black'> </span><span
lang=PT-BR style='color:blue'>r10</span><span lang=PT-BR style='color:black'>, </span><span
lang=PT-BR style='color:blue'>r10</span><span lang=PT-BR style='color:black'>, </span><span
lang=PT-BR style='color:blue'>r3</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>add</span><span lang=PT-BR style='color:black'> </span><span
lang=PT-BR style='color:blue'>r10</span><span lang=PT-BR style='color:black'>, </span><span
lang=PT-BR style='color:blue'>r10</span><span lang=PT-BR style='color:black'>, </span><span
lang=PT-BR style='color:blue'>r4</span></p>

<p class=MsoNormal><span lang=EN-US>…</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>max</span><span lang=PT-BR style='color:black'> </span><span
lang=PT-BR style='color:blue'>r10</span><span lang=PT-BR style='color:black'>, </span><span
lang=PT-BR style='color:blue'>r10</span><span lang=PT-BR style='color:black'>, </span><span
lang=PT-BR style='color:blue'>c10</span><span lang=PT-BR style='color:black'>.</span><span
lang=PT-BR style='color:gray'>r</span><span lang=PT-BR style='color:black'>&nbsp;&nbsp;&nbsp; </span><span
lang=PT-BR style='color:green'>// (-)</span><span style='color:green'>제거</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:black'>&nbsp;</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>dp3</span><span lang=PT-BR style='color:black'> </span><span
lang=PT-BR style='color:blue'>r10</span><span lang=PT-BR style='color:black'>, </span><span
lang=PT-BR style='color:blue'>r10</span><span lang=PT-BR style='color:black'>, </span><span
lang=PT-BR style='color:blue'>c11</span><span lang=PT-BR style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=PT-BR style='color:green'>// </span><span style='color:green'>내적으로</span><span
style='color:green'> </span><span style='color:green'>간단히</span><span
style='color:green'> </span><span style='color:green'>단색</span><span
style='color:green'> </span><span style='color:green'>만듦</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>mul</span><span lang=PT-BR style='color:black'> </span><span
lang=PT-BR style='color:blue'>r10</span><span lang=PT-BR style='color:black'>, </span><span
lang=PT-BR style='color:blue'>r10</span><span lang=PT-BR style='color:black'>, </span><span
lang=PT-BR style='color:blue'>c16</span><span lang=PT-BR style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=PT-BR style='color:green'>// </span><span style='color:green'>외부</span><span
style='color:green'> </span><span style='color:green'>상수와</span><span
style='color:green'> </span><span style='color:green'>곱해서</span><span
style='color:green'> </span><span style='color:green'>최종</span><span
style='color:green'> </span><span style='color:green'>색상</span><span
style='color:green'> </span><span style='color:green'>출력</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=PT-BR
style='color:#A000A0'>mul</span><span lang=PT-BR style='color:black'> </span><span
lang=PT-BR style='color:blue'>r10</span><span lang=PT-BR style='color:black'>, </span><span
lang=PT-BR style='color:blue'>r0</span><span lang=PT-BR style='color:black'>, </span><span
lang=PT-BR style='color:blue'>r10</span><span lang=PT-BR style='color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang=PT-BR style='color:green'>// Multiple r0, r10</span></p>

<p class=MsoNormal style='word-break:keep-all'><span lang=EN-US
style='color:#A000A0'>mul</span><span lang=EN-US style='color:black'> </span><span
lang=EN-US style='color:blue'>r10</span><span lang=EN-US style='color:black'>, </span><span
lang=EN-US style='color:blue'>r10</span><span lang=EN-US style='color:black'>, </span><span
lang=EN-US style='color:blue'>c10</span><span lang=EN-US style='color:black'>.zzz&nbsp;&nbsp;
</span><span lang=EN-US style='color:green'>// </span><span style='color:green'>전체
밝기 조정</span></p>

<p class=MsoNormal><span lang=EN-US style='color:#A000A0'>mov</span><span
lang=EN-US style='color:black'> </span><span lang=EN-US style='color:blue'>oC0</span><span
lang=EN-US style='color:black'>, </span><span lang=EN-US style='color:blue'>r10</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>이 쉐이더 코드는 <span lang=EN-US><a href="https://github.com/3dapi/bs25_shader1/raw/master/s1p_05_scope.zip">s1p_05_scope.zip</a></span>의<span
lang=EN-US> &quot;data/shader.psh&quot;</span>에 구현 되어 있고 실행하면 다음과 같은 화면을 볼 수 있습니다<span
lang=EN-US>.</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal><span lang=EN-US><img border=0 width=242 height=181
src="https://github.com/3dapi/bs25_shader1/raw/master/bs25_shader1.files/image086.jpg"></span></p>

<p class=MsoNormal><span lang=EN-US>&lt;</span>저 수준 쉐이더 응용<span lang=EN-US> -
Night Scope: <a href="https://github.com/3dapi/bs25_shader1/raw/master/s1p_05_scope.zip">s1p_05_scope.zip</a>&gt;</span></p>

<p class=MsoNormal><span lang=EN-US>&nbsp;</span></p>

<p class=MsoNormal>저 수준 작성이 여러모로 힘이 많이 드니까 여러분은<span lang=EN-US> HLSL</span>을 이용하기
바랍니다<span lang=EN-US>.</span></p>
<br>
<br>

</div>

<?php
	include '../base/lc_tail.php';
?>
